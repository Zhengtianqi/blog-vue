import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as l,c as t,b as a,d as s,e as n,a as i}from"./app-0ce632a0.js";const d="/blog-vue/assets/images/image-20210802000052243.png",p={},c=a("h1",{id:"_1、redis-主-从-机制",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_1、redis-主-从-机制","aria-hidden":"true"},"#"),s(" 1、Redis “主 - 从” 机制")],-1),m=a("p",null,"Redis 提供 “主 - 从” 的数据复制：“从” Redis 即作为 “主” Redis 的数据副本。“从” Redis，既能够用于读性能的扩展，亦能够作为数据备份的一种手段。",-1),k={href:"https://redis.io/topics/sentinel",target:"_blank",rel:"noopener noreferrer"},h=i(`<h1 id="_2、工作机制" tabindex="-1"><a class="header-anchor" href="#_2、工作机制" aria-hidden="true">#</a> 2、工作机制</h1><h2 id="主-从-数据复制的基本工作机制" tabindex="-1"><a class="header-anchor" href="#主-从-数据复制的基本工作机制" aria-hidden="true">#</a> “主 <strong>-</strong> 从” 数据复制的基本工作机制</h2><ul><li>已建立的 “主” - “从” 连接，“主” Redis 不断地将命令发送到 “从” Redis</li><li>若连接中断（例如：网络问题），“从” Redis 将尝试重新建立连接，并尝试 “半 - 重新同步”</li><li>若无法进行 “半 - 重新同步”，“从” Redis 将尝试进行 “重新同步”（“主 - 从” 连接首次建立，亦执行 “重新同步”）</li></ul><h2 id="关于-半-重新同步-重新同步" tabindex="-1"><a class="header-anchor" href="#关于-半-重新同步-重新同步" aria-hidden="true">#</a> 关于 “半 - 重新同步” &amp; “重新同步”</h2><ul><li>“半 - 重新同步”：“从” Redis 将尝试获取连接中断期间于 “主” Redis 执行的命令（存储于 backlog）</li><li>“重新同步” <ul><li>“主” Redis 创建数据快照（RDB 文件）、同步到 “从” Redis，开始将 “主” Redis 执行的命令发送到 “从” Redis</li><li>“从” Redis 丢弃当前数据，加载 “主” Redis 的 RDB 文件，开始执行 “主” Redis 发送的命令</li></ul></li></ul><p>“数据复制” 对于 “主” Redis 全部是异步的；对于 “从” Redis，大部分是异步的，但 “重新同步” 涉及 “丢弃当前数据，加载 RDB 文件”，将引起 “短暂中断”。</p><h1 id="_3、-主-从-配置" tabindex="-1"><a class="header-anchor" href="#_3、-主-从-配置" aria-hidden="true">#</a> 3、“主 - 从” 配置</h1><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>slaveof master_ip master_port  # “从” <span class="token class-name">Redis</span> 配置：“主” <span class="token class-name">Redis</span> <span class="token operator">-</span> <span class="token constant">IP</span> <span class="token operator">&amp;</span>  port
masterauth master_password     # “从” <span class="token class-name">Redis</span> 配置：“主” <span class="token class-name">Redis</span> <span class="token operator">-</span> 密码

slave<span class="token operator">-</span>serve<span class="token operator">-</span>stale<span class="token operator">-</span>data yes     # “从” <span class="token class-name">Redis</span> 配置：当 “主 <span class="token operator">-</span> 从” 连接中断或 “从” <span class="token class-name">Redis</span> 正在进行初始化同步，“从” <span class="token class-name">Redis</span> 是否提供服务：
                               #   yes<span class="token operator">:</span> 默认，以 “从” <span class="token class-name">Redis</span> 当前数据提供服务
                               #   no<span class="token operator">:</span> 对于接收到的命令，“从” <span class="token class-name">Redis</span> 返回 “<span class="token constant">SYNC</span> in progress”（<span class="token constant">INFO</span>、<span class="token constant">SLAVEOF</span> 命令除外）
                               #
slave<span class="token operator">-</span>read<span class="token operator">-</span>only yes            # “从” <span class="token class-name">Redis</span> 配置：是否 “只读”，默认 yes


“主” <span class="token class-name">Redis</span> 配置：根据已连接的 “从” <span class="token class-name">Redis</span> 情况，“主” <span class="token class-name">Redis</span> 是否接收 “写命令”
min<span class="token operator">-</span>slaves<span class="token operator">-</span><span class="token keyword">to</span><span class="token operator">-</span>write <span class="token number">3</span>
min<span class="token operator">-</span>slaves<span class="token operator">-</span>max<span class="token operator">-</span>lag <span class="token number">10</span>
表示：最少有 <span class="token number">3</span> 个已连接的 “从” <span class="token class-name">Redis</span>，且延迟小于等于 <span class="token number">10</span> 秒

min<span class="token operator">-</span>slaves<span class="token operator">-</span><span class="token keyword">to</span><span class="token operator">-</span>write <span class="token number">3</span>          # 默认 <span class="token number">0</span>，即无论 “从” <span class="token class-name">Redis</span> 的连接情况，始终接收 “写命令”
min<span class="token operator">-</span>slaves<span class="token operator">-</span>max<span class="token operator">-</span>lag <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),u={href:"https://raw.githubusercontent.com/antirez/redis/2.8/redis.conf",target:"_blank",rel:"noopener noreferrer"},v=i('<h1 id="_4、-主-从-命令" tabindex="-1"><a class="header-anchor" href="#_4、-主-从-命令" aria-hidden="true">#</a> 4、“主 - 从” 命令</h1><ol><li>SLAVEOF host port 将 Redis 配置作为 “从” Redis，其 “主” Redis 位置即为 host:port。</li><li>SLAVEOF NO ONE 终止 “从” Redis 自 “主” Redis 的数据同步。 特别说明：SLAVEOF NO ONE 包含了 Redis 设计之初，关于 “自由” 的思想：“If slavery is not wrong, nothing is wrong. -- Abraham Lincoln”。</li></ol><h1 id="_5、-主-从-链" tabindex="-1"><a class="header-anchor" href="#_5、-主-从-链" aria-hidden="true">#</a> 5、“主 - 从” 链</h1><p>“从” Redis 能够作为其他 Redis 的 “主” Redis，由此构建级联结构的 “主 - 从” 链。并且，“主” Redis 能够与多个 “从” Redis 建立连接，建立 “树状” 结构。</p><figure><img src="'+d+'" alt="image-20210802000052243" tabindex="0" loading="lazy"><figcaption>image-20210802000052243</figcaption></figure>',5);function R(_,b){const e=r("ExternalLinkIcon");return l(),t("div",null,[c,m,a("p",null,[s("同时，Redis 支持 "),a("a",k,[s("Redis Sentinel"),n(e)]),s("，实现 “主 - 从” 监控、故障迁移，限于篇幅，本文不予以展开。")]),h,a("p",null,[s("以上的代码，仅列出了部分关键的配置。其他类似于：diskless 复制、backlog 配置，限于篇幅，未能列出，详情内容请参考 "),a("a",u,[s("redis.conf for Redis 2.8"),n(e)]),s("。")]),v])}const x=o(p,[["render",R],["__file","初识redis（4）-主从架构.html.vue"]]);export{x as default};
