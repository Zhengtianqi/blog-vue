import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,a as t}from"./app-0ce632a0.js";const e="/blog-vue/assets/images/javaagent1.png",p={},o=t(`<h1 id="《手写一个最简单的javaagent》" tabindex="-1"><a class="header-anchor" href="#《手写一个最简单的javaagent》" aria-hidden="true">#</a> 《手写一个最简单的javaagent》</h1><h1 id="_1、javaagent介绍" tabindex="-1"><a class="header-anchor" href="#_1、javaagent介绍" aria-hidden="true">#</a> 1、javaagent介绍</h1><p>​ 在使用skywalking时，使用到了Javaagent技术作为节点的探针，使用Javaagent做字节码植入，无侵入式的收集，并通过HTTP或者gRPC方式发送数据到Skywalking Collector。</p><p>​ 后来查阅资料发现javaagent用途还是很广的，有JRebel，各种线上诊断工具（Btrace, Greys），还有阿里开源的 Arthas，在此记录一下javaagent的学习历程。</p><p>​ 其实 Java Agent 一点都不神秘，也是一个 Jar 包，只是启动方式和普通 Jar 包有所不同，对于普通的Jar包，通过指定类的 main 函数进行启动，但是 Java Agent 并不能单独启动，必须依附在一个 Java 应用程序运行。</p><p>​ 我们可以使用 Agent 技术构建一个独立于应用程序的代理程序，用来协助监测、运行甚至替换其他 JVM 上的程序，使用它可以实现虚拟机级别的 AOP 功能。</p><h1 id="_2、手写一个javaagent" tabindex="-1"><a class="header-anchor" href="#_2、手写一个javaagent" aria-hidden="true">#</a> 2、手写一个javaagent</h1><h2 id="_1-建立maven的空java项目" tabindex="-1"><a class="header-anchor" href="#_1-建立maven的空java项目" aria-hidden="true">#</a> （1）建立maven的空java项目</h2><p>​ 修改pom为：包含一些常量的定义和一个插件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token generics"><span class="token punctuation">&lt;</span>properties<span class="token punctuation">&gt;</span></span>
        <span class="token generics"><span class="token punctuation">&lt;</span>project<span class="token punctuation">.</span>build<span class="token punctuation">.</span>sourceEncoding<span class="token punctuation">&gt;</span></span><span class="token constant">UTF</span><span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token punctuation">.</span>build<span class="token punctuation">.</span>sourceEncoding<span class="token operator">&gt;</span>
        <span class="token generics"><span class="token punctuation">&lt;</span>project<span class="token punctuation">.</span>reporting<span class="token punctuation">.</span>outputEncoding<span class="token punctuation">&gt;</span></span><span class="token constant">UTF</span><span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token punctuation">.</span>reporting<span class="token punctuation">.</span>outputEncoding<span class="token operator">&gt;</span>
        <span class="token generics"><span class="token punctuation">&lt;</span>java<span class="token punctuation">.</span>version<span class="token punctuation">&gt;</span></span><span class="token number">1.8</span><span class="token operator">&lt;</span><span class="token operator">/</span>java<span class="token punctuation">.</span>version<span class="token operator">&gt;</span>

        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token class-name">Build</span> args <span class="token operator">--</span><span class="token operator">&gt;</span>
        <span class="token generics"><span class="token punctuation">&lt;</span>argline<span class="token punctuation">&gt;</span></span><span class="token operator">-</span><span class="token class-name">Xms512m</span> <span class="token operator">-</span><span class="token class-name">Xmx512m</span><span class="token operator">&lt;</span><span class="token operator">/</span>argline<span class="token operator">&gt;</span>
        <span class="token generics"><span class="token punctuation">&lt;</span>updateReleaseInfo<span class="token punctuation">&gt;</span></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>updateReleaseInfo<span class="token operator">&gt;</span>
        <span class="token generics"><span class="token punctuation">&lt;</span>maven<span class="token punctuation">.</span>test<span class="token punctuation">.</span>skip<span class="token punctuation">&gt;</span></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>test<span class="token punctuation">.</span>skip<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 自定义<span class="token constant">MANIFEST</span><span class="token punctuation">.</span><span class="token constant">MF</span> <span class="token operator">--</span><span class="token operator">&gt;</span>
        <span class="token generics"><span class="token punctuation">&lt;</span>maven<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>manifestFile<span class="token punctuation">&gt;</span></span>src<span class="token operator">/</span>main<span class="token operator">/</span>resources<span class="token operator">/</span><span class="token constant">META</span><span class="token operator">-</span><span class="token constant">INF</span><span class="token operator">/</span><span class="token constant">MANIFEST</span><span class="token punctuation">.</span><span class="token constant">MF</span><span class="token operator">&lt;</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>manifestFile<span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span><span class="token operator">/</span>properties<span class="token operator">&gt;</span>

    <span class="token generics"><span class="token punctuation">&lt;</span>build<span class="token punctuation">&gt;</span></span>
        <span class="token generics"><span class="token punctuation">&lt;</span>plugins<span class="token punctuation">&gt;</span></span>
            <span class="token generics"><span class="token punctuation">&lt;</span>plugin<span class="token punctuation">&gt;</span></span>
                <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>plugins<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
                <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>maven<span class="token operator">-</span>shade<span class="token operator">-</span>plugin<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
                <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">2.4</span><span class="token number">.3</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
                <span class="token generics"><span class="token punctuation">&lt;</span>executions<span class="token punctuation">&gt;</span></span>
                    <span class="token generics"><span class="token punctuation">&lt;</span>execution<span class="token punctuation">&gt;</span></span>
                        <span class="token generics"><span class="token punctuation">&lt;</span>phase<span class="token punctuation">&gt;</span></span><span class="token keyword">package</span><span class="token operator">&lt;</span><span class="token operator">/</span>phase<span class="token operator">&gt;</span>
                        <span class="token generics"><span class="token punctuation">&lt;</span>goals<span class="token punctuation">&gt;</span></span>
                            <span class="token generics"><span class="token punctuation">&lt;</span>goal<span class="token punctuation">&gt;</span></span>shade<span class="token operator">&lt;</span><span class="token operator">/</span>goal<span class="token operator">&gt;</span>
                        <span class="token operator">&lt;</span><span class="token operator">/</span>goals<span class="token operator">&gt;</span>
                        <span class="token generics"><span class="token punctuation">&lt;</span>configuration<span class="token punctuation">&gt;</span></span>
                            <span class="token generics"><span class="token punctuation">&lt;</span>transformers<span class="token punctuation">&gt;</span></span>
                                <span class="token operator">&lt;</span>transformer
                                        implementation<span class="token operator">=</span><span class="token string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span><span class="token operator">&gt;</span>
                                    <span class="token generics"><span class="token punctuation">&lt;</span>manifestEntries<span class="token punctuation">&gt;</span></span>
                                        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>指明包含 premain 方法的类名，否则打包出来的文件会找不到 <span class="token constant">MANIFEST</span><span class="token punctuation">.</span><span class="token constant">MF</span> <span class="token operator">--</span><span class="token operator">&gt;</span>
                                        <span class="token operator">&lt;</span><span class="token class-name">Premain</span><span class="token operator">-</span><span class="token class-name">Class</span><span class="token operator">&gt;</span><span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>bjut<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>AgentTest</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token class-name">Premain</span><span class="token operator">-</span><span class="token class-name">Class</span><span class="token operator">&gt;</span>
                                    <span class="token operator">&lt;</span><span class="token operator">/</span>manifestEntries<span class="token operator">&gt;</span>
                                <span class="token operator">&lt;</span><span class="token operator">/</span>transformer<span class="token operator">&gt;</span>
                            <span class="token operator">&lt;</span><span class="token operator">/</span>transformers<span class="token operator">&gt;</span>
                        <span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span><span class="token operator">/</span>execution<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>executions<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>plugin<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>plugins<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>build<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-manifest-mf-文件" tabindex="-1"><a class="header-anchor" href="#_2-manifest-mf-文件" aria-hidden="true">#</a> （2）MANIFEST.MF 文件</h2><p>​ 在 META-INF 目录下创建 MANIFEST.MF 文件：</p><figure><img src="`+e+`" alt="image-20200717132223819" tabindex="0" loading="lazy"><figcaption>image-20200717132223819</figcaption></figure><p>​ 内容为</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Manifest</span><span class="token operator">-</span><span class="token class-name">Version</span><span class="token operator">:</span> <span class="token number">1.0</span>
<span class="token class-name">Premain</span><span class="token operator">-</span><span class="token class-name">Class</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>bjut<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>AgentTest</span>
<span class="token class-name">Can</span><span class="token operator">-</span><span class="token class-name">Redefine</span><span class="token operator">-</span><span class="token class-name">Classes</span><span class="token operator">:</span> <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-写一个main函数" tabindex="-1"><a class="header-anchor" href="#_3-写一个main函数" aria-hidden="true">#</a> （3）写一个main函数</h2><p>​ 因为 Java Agent 的特殊性，需要一些特殊的配置，例如指定 Agent 的启动类等。这样才能在加载 Java Agent 之后，找到并运行对应的 agentmain 或者 premain 方法。配置方式主要有两种，一种是利用 maven-assembly-plugin 插件（推荐），一种是 MANIFEST.MF 文件。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span></span><span class="token class-name">Instrumentation</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 测试项目启动执行的agent
 *
 * <span class="token keyword">@author</span> zhengtianqi
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgentTest</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * JVM 首先尝试在代理类上调用以下方法
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">,</span> <span class="token class-name">Instrumentation</span> inst<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行了JavaAgent &quot;</span> <span class="token operator">+</span> agentArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 如果代理类没有实现上面的方法，那么 JVM 将尝试调用该方法
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">premain</span><span class="token punctuation">(</span><span class="token class-name">String</span> agentArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-打包" tabindex="-1"><a class="header-anchor" href="#_4-打包" aria-hidden="true">#</a> （4）打包</h2><p>​ mvn clean package</p><h1 id="_3、运行javaagent" tabindex="-1"><a class="header-anchor" href="#_3、运行javaagent" aria-hidden="true">#</a> 3、运行javaagent</h1><p>​ Javaagent 程序写好了，怎么运行它呢？上面看到 Agent 程序分为两种，一种是 premain 函数，在主程序运行之前执行；一种是 agentmain 函数，在主程序运行之后执行。Java 加载这两种 Agent 程序也有区别：</p><h2 id="_1-主程序运行前" tabindex="-1"><a class="header-anchor" href="#_1-主程序运行前" aria-hidden="true">#</a> （1）主程序运行前</h2><p>​ 无侵入式，通过 JVM 参数 -javaagent:**.jar[=test] 启动，其中 test 为传入 premain 的 agentArgs 的参数，程序启动的时候，会优先加载 Java Agent，并执行其 premain 方法，这个时候，其实大部分的类都还没有被加载，这个时候可以实现对新加载的类进行字节码修改，但是如果 premain 方法执行失败或抛出异常，那么 JVM 会被中止，这是很致命的问题。</p><h2 id="_2-主程序运行后加载" tabindex="-1"><a class="header-anchor" href="#_2-主程序运行后加载" aria-hidden="true">#</a> （2）主程序运行后加载</h2><p>​ 有侵入式，程序启动之后，通过某种特定的手段加载 Java Agent，这个特定的手段就是 VirtualMachine 的 attach api，这个 api 其实是 JVM 进程之间的的沟通桥梁，底层通过socket 进行通信，JVM A 可以发送一些指令给JVM B，B 收到指令之后，可以执行对应的逻辑，比如在命令行中经常使用的 jstack、jps 等，很多都是基于这种机制实现的。</p><p>​ VirtualMachine 的实现位于 tools.jar 中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>sun<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>tools<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">1.8</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
            <span class="token generics"><span class="token punctuation">&lt;</span>scope<span class="token punctuation">&gt;</span></span>system<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">&gt;</span>
            <span class="token generics"><span class="token punctuation">&lt;</span>systemPath<span class="token punctuation">&gt;</span></span>$<span class="token punctuation">{</span>java<span class="token punctuation">.</span>home<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span>/lib<span class="token operator">/</span>tools<span class="token punctuation">.</span>jar<span class="token operator">&lt;</span><span class="token operator">/</span>systemPath<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为是进程间通信，所以使用 attach api 的也是一个独立的Java进程，下面是一个简单的实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">AttachNotSupportedException</span><span class="token punctuation">,</span> <span class="token class-name">AgentLoadException</span><span class="token punctuation">,</span> <span class="token class-name">AgentInitializationException</span> <span class="token punctuation">{</span>
        <span class="token class-name">VirtualMachine</span> virtualMachine <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 80000 是进程号</span>
            virtualMachine <span class="token operator">=</span> <span class="token class-name">VirtualMachine</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token string">&quot;80000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 第一个参数是 agent jar包路径，第二个参数为传入 agentmain 的 args 参数</span>
            virtualMachine<span class="token punctuation">.</span><span class="token function">loadAgent</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\git\\credible\\checkpoint-agent\\target\\checkpoint-agent-1.0-SNAPSHOT.jar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>virtualMachine <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                virtualMachine<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30),c=[o];function l(i,r){return a(),s("div",null,c)}const d=n(p,[["render",l],["__file","基于JavaAgent的全链路监控（1）.html.vue"]]);export{d as default};
