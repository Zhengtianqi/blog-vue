import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as l,c as r,b as a,d as n,e as p,a as e}from"./app-0ce632a0.js";const o="/blog-vue/assets/images/mysql时间存储.png",d="/blog-vue/assets/images/mysql的ip存储.png",c="/blog-vue/assets/images/885859-20190729184911699-676257427.png",u="/blog-vue/assets/images/image-20220414004507836.png",h="/blog-vue/assets/images/image-20220414004546438.png",m={},v=e('<h2 id="一、一些建议" tabindex="-1"><a class="header-anchor" href="#一、一些建议" aria-hidden="true">#</a> 一、一些建议</h2><p>建议来自《MYSQL 王者晋级之路》，本文做些笔记</p><p>1）在创建业务表时，库名、表名、字段名必须使用小写字母，采用 “_” 分割。</p><p>2）MySQL数据库中，通过lower_case_table_names参数来区别表名的大小写，默认为0，代表大小写敏感。如果是1，代表大小写不敏感，以小写存储。为字段选取数据类型时，要秉承着简单、够用的原则。表中的字段和索引数量都不宜过多，要保证SQL语句查询的高效性，快速执行完，避免出现堵塞、排队现象。</p><p>3）表的存储引擎一定要选择使用InnoDB。MySQL 5.7基本已经废弃 MyISAM，8.0后彻底废弃。</p><p>4）要显式地为表创建一个使用自增列 INT 或者 BIGINT 类型作为主键，可以保证写入顺序是自增的，和B+tree叶子节点分裂顺序一致。写入更加高效，TPS性能会更高，存储效率也是最高的。</p><p>5）金钱、日期时间、IPV4尽量使用 int 来存储。用 int 来存储金钱，让 int 单位为分，这样就不存在四舍五入了，存储的数值更加准确。</p><p>​ 日期可以选择使用datetime，datetime的可用范围比timestamp大，物理存储上仅比timestamp 多占 1 个字节多的空间，整体性能上的消耗并不算太大。因此在生产环境可以使用datetime时间类型。当然也可以使用 int 来存储时间，通过转换函数 from_unixtime 和 unix_timesstamp来实现。</p><p>​ <img src="'+o+'" alt="img" loading="lazy"></p><p>​ IPV4字段基本上可以不适用char(15)来存储，使用int来存储，通过转换函数 inet_aton 和 inet_ntoa来实现。</p><p>​ <img src="'+d+`" alt="img" loading="lazy"></p><p>​ 有些字段比如性别sex字段、状态status字段，基本上选择tinyint就可以。</p><p>​ 有时候精确计算使用decimal，设计sum等统计数据时候</p><p>6）text 和 blob 这种存大量文字或者存图片的大数据类型，建议不要和业务表放在一起。</p><p>注：主要业务表切忌出现这样大类型的字段。</p><p>​ SQL语句中尽量避免出现 or 子句，这种判断的子句可以让程序自动完成，不要交给数据库判断。也要避免使用union，尽量采用union all，减少去重和排序的工作。</p><p>7）用 select 查询表时只需要获取必要的字段，避免使用 select *。这样可以减少网络带宽的消耗，还有可能利用到覆盖索引。</p><p>​ 建立索引时不要在选择性低的字段上创建，比如sex、status这种字段。</p><p>​ 索引的选择性计算方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        select <span class="token function">count</span><span class="token punctuation">(</span>distinct coll<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> from table_name<span class="token punctuation">;</span>  <span class="token comment">// 越接近 1 ，证明选择性越高，越适合创建索引。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>sum()函数容易返回null值，记得处理</p><p>8）很长的字符串可以考虑创建前缀索引，提高索引利用率。</p><p>​ 单表索引数量不要太多，一般建议不要超过 4~5个（根据实际业务表再确定）。当执行DML语句操作时，也会索引进行更新，如果索引数量太多，则会造成索引树的分裂，性能也会下降。</p><p>9）所有字段定义中，默认都加上 not null 约束，避免出现 null 。在对该字段进行 select count() 统计计数时，可以让统计结果更准确，因为值为null的数据不会被计算进去。</p><p>10）表的字符集默认使用 UTF-8 ，必要时可申请使用 UTF8mb4 字符集。因为它的通用性比 GBK 、Latin1 都要好。UTF8字符集存储汉子占用3个字节，如果遇到表情储存的需求，就可以使用UTF8mb4</p><p>11）建议模糊查询 select...like &#39;%**%&#39; 的语句不要出现在数据库中，可以使用搜索引擎sphinx代替。</p><p>12）索引字段上面不要使用函数，否则使用不到索引，也不要创建函数索引。</p>`,27),b={href:"https://blog.csdn.net/n88Lpo/article/details/78099114",target:"_blank",rel:"noopener noreferrer"},_=e(`<p>14）当在执行计划中的 extra 项看到 Using filesort，或者看到 Using temporary 时，也要优先考虑创建排序索引和分组索引。（排序、分组字段上都要创建索引）</p><p>15）limit 语句上的优化，建议使用主键来进行范围检索，缩短结果集大小，使查询效率更高效。</p><h2 id="二、算是面试题吧" tabindex="-1"><a class="header-anchor" href="#二、算是面试题吧" aria-hidden="true">#</a> 二、算是面试题吧</h2><h3 id="_1-为什么一定要设一个主键" tabindex="-1"><a class="header-anchor" href="#_1-为什么一定要设一个主键" aria-hidden="true">#</a> 1）为什么一定要设一个主键？</h3><p>因为在不设置主键的情况下，innodb也会自动生成一个隐藏列，作为自增主键。</p><p>所以自己显示指定更可以清晰的看出主键id。</p><h3 id="_2-主键是自增还是uuid" tabindex="-1"><a class="header-anchor" href="#_2-主键是自增还是uuid" aria-hidden="true">#</a> 2）主键是自增还是UUID?</h3><p>自增。innodb中的主键是聚簇索引。如果是自增的主键，插入数据时不会引发页分裂。性能更高。</p><h3 id="_3-主键为什么不推荐有业务含义" tabindex="-1"><a class="header-anchor" href="#_3-主键为什么不推荐有业务含义" aria-hidden="true">#</a> 3）主键为什么不推荐有业务含义？</h3><p>倘若主键变更会引发很多麻烦；引发页分裂。</p><p>4）表示枚举的字段为什么不用enum类型？</p><p>枚举字段一般用tinyint类型。因为enum类型order by效率低，而且插入阿拉伯数字有问题。</p><h3 id="_5-为什么不直接存储图片、音频、视频等大容量内容" tabindex="-1"><a class="header-anchor" href="#_5-为什么不直接存储图片、音频、视频等大容量内容" aria-hidden="true">#</a> 5）为什么不直接存储图片、音频、视频等大容量内容？</h3><p>在实际应用中，使用HDFS来存储文件。mysql只用来存储下载地址。</p><p>当存文件的时候，比如Base64加密文件等，排序不能使用内存临时表（OOM），必须使用磁盘的临时表，导致查询缓慢；binlog太多，导致主从的效率问题。</p><p>所以，不推荐使用text和blob类型。</p><h3 id="_6-字段为什么要定义not-null-default" tabindex="-1"><a class="header-anchor" href="#_6-字段为什么要定义not-null-default" aria-hidden="true">#</a> 6）字段为什么要定义NOT NULL DEFAULT ?</h3><p>有null，count（包含null的列）会出现问题。而且影响索引的性能</p><h3 id="_7-看建表语法" tabindex="-1"><a class="header-anchor" href="#_7-看建表语法" aria-hidden="true">#</a> 7）看建表语法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mysql<span class="token operator">&gt;</span> <span class="token operator">?</span> create table
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_8-mysql存储引擎" tabindex="-1"><a class="header-anchor" href="#_8-mysql存储引擎" aria-hidden="true">#</a> 8）Mysql存储引擎</h3><p>MyISAM、 InnoDB、BDB、MEMORY、MERGE、EXAMPLE、NDB Cluster、 ARCHIVE、CSV、BLACKHOLE、FEDERATED。</p><p>Tips: InnoDB和BDB提供事务安全表，其他存储引擎都是非事务安全表。</p><h3 id="_9-常用的2种存储引擎" tabindex="-1"><a class="header-anchor" href="#_9-常用的2种存储引擎" aria-hidden="true">#</a> 9）常用的2种存储引擎？</h3><p>1、Myisam是Mysql的默认存储引擎，当create创建新表时，未指定新表的存储引擎时，默认使用Myisam。每个MyISAM 在磁盘上存储成三个文件。</p><p>文件名都和表名相同，扩展名分别是 .frm (存储表定义) MYD (MYData，存储数据)、.MYI (MYIndex，存储索引)。数据文件和索引文件可以放置在不同的目录，平均分布io，获得更快的速度。</p><p>2、InnoDB 存储引擎提供了具有提交、回滚和崩溃恢复能力的事务安全。但是对比 Myisam 的存储引擎，InnoDB 写的处理效率差一些并且会占用更多的磁盘空间以保留数据和索引。</p><h3 id="_10-可以针对表设置引擎吗-如何设置" tabindex="-1"><a class="header-anchor" href="#_10-可以针对表设置引擎吗-如何设置" aria-hidden="true">#</a> 10）可以针对表设置引擎吗？如何设置？</h3><p>可以, ENGINE=xxx 设置引擎。</p><p>代码示例:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>create table <span class="token function">person</span><span class="token punctuation">(</span>
    id <span class="token keyword">int</span> primary key auto_increment<span class="token punctuation">,</span> 
    username <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span><span class="token class-name">InnoDB</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-选择合适的存储引擎" tabindex="-1"><a class="header-anchor" href="#_11-选择合适的存储引擎" aria-hidden="true">#</a> 11）选择合适的存储引擎？</h3><p>选择标准: 根据应用特点选择合适的存储引擎,对于复杂的应用系统可以根据实际情况选择 多种存储引擎</p><p>进行组合. 下面是常用存储引擎的适用环境:</p><ol><li>MyISAM:默认的 MySQL 插件式存储引擎, 它是在 Web、 数据仓储和其他应用环境下最常使用的存</li></ol><p>储引擎之一。</p><ol start="2"><li><p>InnoDB:用于事务处理应用程序，具有众多特性，包括 ACID 事务支持。</p></li><li><p>Memory: 将 所有数据保存在RAM 中， 在 需要快速查找引用和其他类似数据的环境下，可 提供极快的访问。</p></li><li><p>Merge:允许 MySQL DBA 或开发人员将一系列等同的 MyISAM 表以逻辑方式组合在一起,并作为 1个对象引用它们。对于诸如数据仓储等 VLDB 环境十分适合。</p></li></ol><h3 id="_12-选择合适的数据类型" tabindex="-1"><a class="header-anchor" href="#_12-选择合适的数据类型" aria-hidden="true">#</a> 12）选择合适的数据类型</h3><p>前提: 使用适合存储引擎。</p><p>选择原则: 根据选定的存储引擎,确定如何选择合适的数据类型下面的选择方法按存储引擎分类 :</p><ol><li><h4 id="myisam-数据存储引擎和数据列" tabindex="-1"><a class="header-anchor" href="#myisam-数据存储引擎和数据列" aria-hidden="true">#</a> MyISAM 数据存储引擎和数据列</h4></li></ol><p>MyISAM数据表，最好使用固定长度的数据列代替可变长度的数据列。</p><ol start="2"><li><h4 id="memory存储引擎和数据列" tabindex="-1"><a class="header-anchor" href="#memory存储引擎和数据列" aria-hidden="true">#</a> MEMORY存储引擎和数据列</h4></li></ol><p>MEMORY数据表目前都使用固定长度的数据行存储，因此无论使用CHAR或VARCHAR列都没有关</p><p>系。两者都是作为CHAR类型处理的。</p><ol start="3"><li><h4 id="innodb-存储引擎和数据列" tabindex="-1"><a class="header-anchor" href="#innodb-存储引擎和数据列" aria-hidden="true">#</a> InnoDB 存储引擎和数据列</h4></li></ol><p>建议使用 VARCHAR类型</p><p>对于InnoDB数据表，内部的行存储格式没有区分固定长度和可变长度列(所有数据行 都使用指向数</p><p>据列值的头指针) ，因此在本质上，使用固定长度的CHAR列不一定比使 用可变长度VARCHAR列简</p><p>单。 因而， 主要的性能因素是数据行使用的存储总量。 由于 CHAR 平均占用的空间多于</p><p>VARCHAR，因此使用VARCHAR来最小化需要处理的数据行的存储总 量和磁盘I/O是比较好的。</p><h3 id="_13-char-varchar" tabindex="-1"><a class="header-anchor" href="#_13-char-varchar" aria-hidden="true">#</a> 13）char &amp; varchar</h3><p>保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不</p><p>进行大小写转换。</p><h3 id="_14-mysql字符集" tabindex="-1"><a class="header-anchor" href="#_14-mysql字符集" aria-hidden="true">#</a> 14）Mysql字符集</h3><p>mysql服务器可以支持多种字符集 (可以用show character set命令查看所有mysql支持 的字符集) ，在</p><p>同一台服务器、同一个数据库、甚至同一个表的不同字段都可以指定使用不 同的字符集。</p><p>mysql的字符集包括字符集(CHARACTER)和校对规则(COLLATION)两个概念。</p><h3 id="_15-索引设计原则" tabindex="-1"><a class="header-anchor" href="#_15-索引设计原则" aria-hidden="true">#</a> 15）索引设计原则？</h3><ol><li>搜索的索引列：不 一定是所要选择的列。最适合索引的列是出现在WHERE子句中的列，或连接子</li></ol><p>句中指定的列，而不是出现在SELECT 关键字后的选择列表中的列。</p><ol start="2"><li>使用惟一索引：考虑某列中值的分布。 对于惟一值的列，索引的效果最好，而具有多个 重复值的</li></ol><p>列，其索引效果最差。</p><ol start="3"><li>使用短索引：如果对串列进行索引，应该指定一个前缀长度,只要有可能就应该这做样。 例如，如</li></ol><p>果有一个 CHAR(200) 列，如果在前 10 个或 20 个字符内，多数值是惟一的， 那么就不要对整个列</p><p>进行索引。</p><ol start="4"><li>利用最左前缀：在创建 一个 n 列的索引时，实际是创建了 MySQL 可利用的 n 个索引。 多列索引</li></ol><p>可起几个索引的作用，因为可利用索引中最左边的列集来匹配行。 这样的列集 称为最左前缀。 (这</p><p>与索引一个列的前缀不同，索引一个列的前缀是利用该的n前个字 符作为索引值 )</p><ol start="5"><li>不要过度索引：每个额外的索引都要占用额外的磁盘空间，并降低写操作的性能，这一点我们前面</li></ol><p>已经介绍 过。在修改表的内容时，索引必须进行更新,有时可能需要重构, 因此， 索引越多，所花的</p><p>时间越长。</p><p>如果有一个索引很少利用或从不使用，那么会不必要地减缓表的修改速度。 此外，MySQL 在生成</p><p>一个执行计划时，要考虑各个索引，这也要费时间。</p><p>创建多余的索引给查询优化带来了更多的工作。索引太多，也可能会使 MySQL选择不到所要使用</p><p>的 最好索引。 只保持所需的索引有利于查询优化。 如果想给已索引的表增加索引， 应 该考虑所要</p><p>增加的索引是否是现有多列索引的最左索引。</p><ol start="6"><li>考虑在列上进行的比较类型： 索引可用于“ &lt;”、“ &lt; = ”、“ = ”、“ &gt; =”、“ &gt; ”和 BETWEEN 运算。在</li></ol><p>模式具有一个直接量前缀时，索引也用于 LIKE 运算。如果只将某个列用于其他类型的运算时(如</p><p>STRCMP( )) ，对其进行索引没有价值。</p><h3 id="_16-mysql有哪些索引" tabindex="-1"><a class="header-anchor" href="#_16-mysql有哪些索引" aria-hidden="true">#</a> 16）MySql有哪些索引?</h3><p><strong>数据结构角度</strong></p><ol><li><p>BTREE</p></li><li><p>HASH</p></li><li><p>FULLTEXT</p></li><li><p>R-Tree</p></li></ol><p>物理存储角度</p><p>1、聚集索引（clustered index）</p><p>2、非聚集索引（non-clustered index）</p><p>从逻辑角度</p><ol><li><p>普通索引：仅加速查询</p></li><li><p>唯一索引：加速查询 + 列值唯一（可以有null）</p></li><li><p>主键索引：加速查询 + 列值唯一（不可以有null）+ 表中只有一个</p></li><li><p>组合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并</p></li><li><p>全文索引：对文本的内容进行分词，进行搜索</p></li></ol><h3 id="_17-hash索引和b-树索引的底层实现原理" tabindex="-1"><a class="header-anchor" href="#_17-hash索引和b-树索引的底层实现原理" aria-hidden="true">#</a> 17）Hash索引和B+树索引的底层实现原理</h3><p>hash索引底层就是hash表，进行查找时，调用一次hash函数就可以获取到相应的键值，之后进行回表查询获得实际数据。</p><p>B+树底层实现是多路平衡查找树，对于每一次的查询都是从根节点出发，查找到叶子节点方可以获得所查键值，然后根据查询判断是否需要回表查询数据。</p><p>那么可以看出他们有以下的不同：</p><p>hash索引进行等值查询更快(一般情况下)，但是却无法进行范围查询。</p><p>因为在hash索引中经过hash函数建立索引之后,索引的顺序与原顺序无法保持一致，不能支持范围查询。</p><p>而B+树的的所有节点皆遵循(左节点小于父节点,右节点大于父节点，多叉树也类似)，天然支持范围。</p><p>hash索引不支持使用索引进行排序,原理同上。</p><p>hash索引不支持模糊查询以及多列索引的最左前缀匹配.原理也是因为hash函数的不可预测。</p><p>AAAA和AAAAB的索引没有相关性。</p><p>hash索引任何时候都避免不了回表查询数据,而B+树在符合某些条件(聚簇索引，覆盖索引等)的时候可以只通过索引完成查询。</p><p>hash索引虽然在等值查询上较快，但是不稳定.性能不可预测，当某个键值存在大量重复的时候，发生hash碰撞，此时效率可能极差。而B+树的查询效率比较稳定，对于所有的查询都是从根节点到叶子节点，且树的高度较低。</p><p>因此，在大多数情况下，直接选择B+树索引可以获得稳定且较好的查询速度。</p><p>而不需要使用hash索引</p><h3 id="_18-非聚簇索引一定会回表查询吗" tabindex="-1"><a class="header-anchor" href="#_18-非聚簇索引一定会回表查询吗" aria-hidden="true">#</a> 18）非聚簇索引一定会回表查询吗?</h3><p>不一定,这涉及到查询语句所要求的字段是否全部命中了索引，如果全部命中了索引,那么就不必再进行回表查询。</p><p>举个简单的例子，假设我们在员工表的年龄上建立了索引，那么当进行</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>select age from employee where age <span class="token operator">&lt;</span> <span class="token number">20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>的查询时,在索引的叶子节点上，已经包含了age信息，不会再次进行回表查询.</p><h3 id="_19-如何避免回表查询-什么是索引覆盖" tabindex="-1"><a class="header-anchor" href="#_19-如何避免回表查询-什么是索引覆盖" aria-hidden="true">#</a> 19）如何避免回表查询？什么是索引覆盖？</h3>`,108),g={href:"https://www.cnblogs.com/myseries/p/11265849.html",target:"_blank",rel:"noopener noreferrer"},k=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>create table user <span class="token punctuation">(</span>
    id <span class="token keyword">int</span> primary key<span class="token punctuation">,</span>
    name <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    sex <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">index</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token punctuation">)</span>engine<span class="token operator">=</span>innodb<span class="token punctuation">;</span>

<span class="token number">1</span><span class="token punctuation">,</span> shenjian<span class="token punctuation">,</span> m<span class="token punctuation">,</span> <span class="token class-name">A</span>
<span class="token number">3</span><span class="token punctuation">,</span> zhangsan<span class="token punctuation">,</span> m<span class="token punctuation">,</span> <span class="token class-name">A</span>
<span class="token number">5</span><span class="token punctuation">,</span> lisi<span class="token punctuation">,</span> m<span class="token punctuation">,</span> <span class="token class-name">A</span>
<span class="token number">9</span><span class="token punctuation">,</span> wangwu<span class="token punctuation">,</span> f<span class="token punctuation">,</span> <span class="token class-name">B</span>

select <span class="token operator">*</span> from t where name<span class="token operator">=</span><span class="token char">&#39;lisi&#39;</span><span class="token punctuation">;</span>　
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+c+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如粉红色路径，需要扫码两遍索引树：</p><p>（1）先通过普通索引定位到主键值id=5；</p><p>（2）在通过聚集索引定位到行记录；</p><p>这就是所谓的回表查询，先定位主键值，再定位行记录，它的性能较扫一遍索引树更低。</p><p>都能够命中就是索引覆盖，无需回表。</p><h3 id="_20-事务4个特性" tabindex="-1"><a class="header-anchor" href="#_20-事务4个特性" aria-hidden="true">#</a> 20）事务4个特性？</h3><p>事务是必须满足4个条件（ACID）：</p><p>原子性 Atomicity：一个事务中的所有操作，要么全部完成，要么全部不完成，最小的执行单位。</p><p>一致性 Consistency：事务执行前后，都处于一致性状态。</p><p>隔离性 Isolation：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防</p><p>止多个事务并发执行时由于交叉执行而导致数据的不一致。</p><p>持久性 Durability：事务执行完成后，对数据的修改就是永久的，即便系统故障也不会丢失。</p><h3 id="_21-事务隔离级别分别是" tabindex="-1"><a class="header-anchor" href="#_21-事务隔离级别分别是" aria-hidden="true">#</a> 21）事务隔离级别分别是？</h3><p>READ_UNCOMMITTED 这是事务最低的隔离级别，它充许另外一个事务可以看到这个事务未提交的数据。解决第一类丢失更新的问题，但是会出现脏读、不可重复读、第二类丢失更新的问题，幻读 。</p><p>READ_COMMITTED 保证一个事务修改的数据提交后才能被另外一个事务读取，即另外一个事务不能读取该事务未提交的数据。解决第一类丢失更新和脏读的问题，但会出现不可重复读、第二类丢失更新的问题，幻读问题</p><p>REPEATABLE_READ 保证一个事务相同条件下前后两次获取的数据是一致的 （注意是 一个事务，可以理解为事务间的数据互不影响）解决第一类丢失更新，脏读、不可重复读、第二类丢失更新的问题，但会出幻读。</p><p>SERIALIZABLE 事务串行执行，解决了脏读、不可重复读、幻读。但效率很差，所以实际中一般不用。</p><h3 id="_22-innodb默认事务隔离级别-如何查看当前隔离级别" tabindex="-1"><a class="header-anchor" href="#_22-innodb默认事务隔离级别-如何查看当前隔离级别" aria-hidden="true">#</a> 22）InnoDB默认事务隔离级别?如何查看当前隔离级别</h3><p>可重复读（REPEATABLE-READ）</p><p>查看：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mysql<span class="token operator">&gt;</span> select @<span class="token annotation punctuation">@global.tx_isolation</span><span class="token punctuation">;</span>
<span class="token operator">+</span>———————————<span class="token operator">+</span> <span class="token operator">|</span> 
@<span class="token annotation punctuation">@global.tx_isolation</span> 
<span class="token operator">|</span> <span class="token operator">+</span>———————————<span class="token operator">+</span> <span class="token operator">|</span>
<span class="token constant">REPEATABLE</span><span class="token operator">-</span><span class="token constant">READ</span> <span class="token operator">|</span>
<span class="token operator">+</span>———————————<span class="token operator">+</span> 
<span class="token number">1</span> row in set<span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_23-如何查看表结构" tabindex="-1"><a class="header-anchor" href="#_23-如何查看表结构" aria-hidden="true">#</a> 23）如何查看表结构？</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mysql<span class="token operator">&gt;</span> desc zipkin_spans<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_24-mysql删除表的几种方式-区别" tabindex="-1"><a class="header-anchor" href="#_24-mysql删除表的几种方式-区别" aria-hidden="true">#</a> 24）Mysql删除表的几种方式？区别？</h3><p>1.delete : 仅删除表数据，支持条件过滤，支持回滚。记录日志。因此比较慢。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>delete from table_name<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.truncate: 仅删除所有数据，不支持条件过滤，不支持回滚。不记录日志，效率高于delete。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>truncate table table_name<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3.drop:删除表数据同时删除表结构。将表所占的空间都释放掉。删除效率最高。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>drop table table_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_25-主键和唯一索引区别" tabindex="-1"><a class="header-anchor" href="#_25-主键和唯一索引区别" aria-hidden="true">#</a> 25）<strong>主键和唯一索引区别？</strong></h3><p>本质区别，主键是一种约束，唯一索引是一种索引。</p><p>主键不能有空值（非空+唯一），唯一索引可以为空。</p><p>主键可以是其他表的外键，唯一索引不可以。</p><p>一个表只能有一个主键，唯一索引 可以多个。</p><p>都可以建立联合主键或联合唯一索引。</p><p>主键-&gt;聚簇索引，唯一索引-&gt;非聚簇索引。</p><p><strong>主键和唯一索引区别？</strong></p><p>本质区别，主键是一种约束，唯一索引是一种索引。</p><p>主键不能有空值（非空+唯一），唯一索引可以为空。</p><p>主键可以是其他表的外键，唯一索引不可以。</p><p>一个表只能有一个主键，唯一索引 可以多个。</p><p>都可以建立联合主键或联合唯一索引。</p><p>主键-》聚簇索引，唯一索引-&gt;非聚簇索引。</p><h3 id="_26、查看当前表有哪些索引" tabindex="-1"><a class="header-anchor" href="#_26、查看当前表有哪些索引" aria-hidden="true">#</a> 26、查看当前表有哪些索引？</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>show index from table_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_27、索引不生效的情况" tabindex="-1"><a class="header-anchor" href="#_27、索引不生效的情况" aria-hidden="true">#</a> 27、索引不生效的情况？</h3><p>使用不等于查询。</p><p>NULL值。</p><p>列参与了数学运算或者函数。</p><p>在字符串like时左边是通配符.比如 %xxx。</p><p>当mysql分析全表扫描比使用索引快的时候不使用索引。</p><p>当使用联合索引，前面一个条件为范围查询,后面的即使符合最左前缀原则，也无法使用索引。</p><h3 id="_28、explain列有哪些-含义" tabindex="-1"><a class="header-anchor" href="#_28、explain列有哪些-含义" aria-hidden="true">#</a> 28、explain列有哪些？含义？</h3><figure><img src="`+u+'" alt="image-20220414004507836" tabindex="0" loading="lazy"><figcaption>image-20220414004507836</figcaption></figure><p>1、 id</p><p>SQL查询中的序列号。</p><p>id列数字越大越先执行，如果说数字一样大，那么就从上往下依次执行。</p><p>2、select_type</p><figure><img src="'+h+'" alt="image-20220414004546438" tabindex="0" loading="lazy"><figcaption>image-20220414004546438</figcaption></figure><p>3、table</p><p>显示这一行的数据是关于哪张表的。不一定是实际存在的表名。 可以为如下的值：&lt;unionM,N&gt;: 引用id为M和N UNION后的结果。</p><p>引用id为N的结果派生出的表。派生表可以是一个结果集，例如派生自FROM中子查询的结果。</p><p>引用id为N的子查询结果物化得到的表。即生成一个临时表保存子查询的结果。</p><p>4、type</p><p>这是最重要的字段之一，显示查询使用了何种类型。从最好到最差的连接类型依次为：</p><p>system，const，eq_ref，ref，fulltext，ref_or_null，index_merge，unique_subquery，</p><p>index_subquery，range，index，ALL</p>',70),f={href:"https://www.jianshu.com/p/8fab76bbf448",target:"_blank",rel:"noopener noreferrer"},x=e('<h3 id="_29、mysql最多创建多少列索引" tabindex="-1"><a class="header-anchor" href="#_29、mysql最多创建多少列索引" aria-hidden="true">#</a> 29、MySql最多创建多少列索引？</h3><p>16</p><h3 id="_30、varchar-10-和int-10-代表什么含义" tabindex="-1"><a class="header-anchor" href="#_30、varchar-10-和int-10-代表什么含义" aria-hidden="true">#</a> 30、varchar(10)和int(10)代表什么含义</h3><p>varchar的10代表了申请的空间长度,也是可以存储的数据的最大长度,而int的10只是代表了展示的长度,</p><p>不足10位以0填充.也就是说,int(1)和int(10)所能存储的数字大小以及占用的空间都是相同的,只是在展示</p><p>时按照长度展示。</p><h3 id="_31、count-在不同引擎的实现方式" tabindex="-1"><a class="header-anchor" href="#_31、count-在不同引擎的实现方式" aria-hidden="true">#</a> 31、count(*)在不同引擎的实现方式?</h3><p>MyISAM :把一个表的总行数存在了磁盘上，执行 count(*) 的时候会直接返回这个数，效率很高。</p><p>InnoDB : 比较麻烦，它执行 count(*) 的时候，需要把数据一行一行地从引擎里面读出来，然后累积计</p><p>数</p><h2 id="三、数据结构" tabindex="-1"><a class="header-anchor" href="#三、数据结构" aria-hidden="true">#</a> 三、数据结构</h2><p>需要了解mysql的数据结构才能更加清楚上述效率的问题，请看数据结构篇~~</p>',12);function y(A,M){const s=t("ExternalLinkIcon");return l(),r("div",null,[v,a("p",null,[n("13）join列类型要保持一致，其中包括长度、字符集都要一致。？"),a("a",b,[n("https://blog.csdn.net/n88Lpo/article/details/78099114"),p(s)])]),_,a("p",null,[a("a",g,[n("MySQL优化：如何避免回表查询？什么是索引覆盖？"),p(s)])]),k,a("p",null,[a("a",f,[n("explain结果每个字段的含义说明 - 简书 (jianshu.com)"),p(s)])]),x])}const B=i(m,[["render",y],["__file","mysql表设计及优化.html.vue"]]);export{B as default};
