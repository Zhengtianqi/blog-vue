import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as p}from"./app-0ce632a0.js";const e={},t=p(`<p>Hive 中 SQL JOIN 语句，只支持等值连接</p><h1 id="一、inner-join" tabindex="-1"><a class="header-anchor" href="#一、inner-join" aria-hidden="true">#</a> 一、INNER JOIN</h1><p>​ 内连接（INNER JOIN）中，只有进行连接的两个表中都存在于连接标准相匹配的数据才会被保留下来。不支持 &gt;= 等不相等匹配、ON子句中谓词之间不能使用OR。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 苹果公司股价 AAPL   IBM股价IBM</span>
<span class="token comment">// ON子句指定了两个表间数据进行连接的条件</span>
<span class="token comment">// WHERE子句限制了左边表是AAPL的记录，右边表是IBM的记录</span>

hive<span class="token operator">&gt;</span> <span class="token constant">SELECT</span> a<span class="token punctuation">.</span>ymd<span class="token punctuation">,</span> a<span class="token punctuation">.</span>price_close<span class="token punctuation">,</span> b<span class="token punctuation">.</span>price_close
	<span class="token operator">&gt;</span><span class="token constant">FROM</span> stocks a <span class="token constant">JOIN</span> stocks b <span class="token constant">ON</span> a<span class="token punctuation">.</span>ymd <span class="token operator">=</span> b<span class="token punctuation">.</span>ymd 
	<span class="token operator">&gt;</span><span class="token constant">WHERE</span> a<span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token char">&#39;AAPL&#39;</span> <span class="token constant">AND</span> b<span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token char">&#39;IBM&#39;</span><span class="token punctuation">;</span>

<span class="token number">2010</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span>  <span class="token number">214.01</span>  <span class="token number">132.45</span>
<span class="token number">2010</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span>  <span class="token number">214.38</span>  <span class="token number">130.85</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大多数情况下，Hive会对每对 JOIN 连接对象启动一个 MapReduce 任务。</p><p>​ Hive同时假定查询中最后一个表是对打的那个表。在对每行记录进行连接操作时，它会尝试将其他表缓存起来，然后扫描最后那个表进行计算。</p><p>​ 所以优化JOIN的时候，将小表放在前边，大表放到后边。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 小表 <span class="token constant">JOIN</span> 大表 <span class="token constant">ON</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="二、left-outer-join" tabindex="-1"><a class="header-anchor" href="#二、left-outer-join" aria-hidden="true">#</a> 二、LEFT OUTER JOIN</h1><p>​ 用法和 INNER JOIN 一致，但是这种操作，会返回左侧表所有的记录，当右边表根据连接条件没有对应的记录时，那么右表响应的列的值是NULL</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 全部数据表 <span class="token constant">LEFT</span> <span class="token constant">OUTER</span> <span class="token constant">JOIN</span> 对应条件的表 <span class="token constant">ON</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="三、right-outer-join" tabindex="-1"><a class="header-anchor" href="#三、right-outer-join" aria-hidden="true">#</a> 三、RIGHT OUTER JOIN</h1><p>​ 用法和 INNER JOIN 一致，右外连接（RIGHT OUTER JOIN）会返回右边表所有符合WHERE语句的记录。左表中匹配不上的字段值用NULL代替。</p><h1 id="四、full-outer-join" tabindex="-1"><a class="header-anchor" href="#四、full-outer-join" aria-hidden="true">#</a> 四、FULL OUTER JOIN</h1><p>​ 最后介绍的完全外连接（FULL OUTER JOIN）将会返回所有表中符合 WHERE 语句条件的所有记录。</p><p>​ 如果任一表的指定字段没有符合条件的值的话，那么就使用 NULL 值代替。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>hive<span class="token operator">&gt;</span><span class="token constant">SELECT</span> s<span class="token punctuation">.</span>ymd<span class="token punctuation">,</span> s<span class="token punctuation">.</span>symbol<span class="token punctuation">,</span> s<span class="token punctuation">.</span>price_close<span class="token punctuation">,</span> d<span class="token punctuation">.</span>divided
	<span class="token operator">&gt;</span><span class="token constant">FROM</span> dividends d <span class="token constant">FULL</span> <span class="token constant">OUTER</span> <span class="token constant">JOIN</span> stocks s <span class="token constant">ON</span> d<span class="token punctuation">.</span>ymd <span class="token operator">=</span> s<span class="token punctuation">.</span>ymd <span class="token constant">AND</span> d<span class="token punctuation">.</span>symbol <span class="token operator">=</span> s<span class="token punctuation">.</span>symbol
	<span class="token operator">&gt;</span><span class="token constant">WHERE</span> s<span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token char">&#39;AAPL&#39;</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">1987</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">07</span> <span class="token constant">AAPL</span> <span class="token number">80.25</span> <span class="token constant">NULL</span>
<span class="token number">1987</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">08</span> <span class="token constant">AAPL</span> <span class="token number">97.0</span> <span class="token constant">NULL</span>
<span class="token number">1987</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">11</span> <span class="token constant">AAPL</span> <span class="token number">77.0</span> <span class="token number">0.015</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="五、left-semi-join" tabindex="-1"><a class="header-anchor" href="#五、left-semi-join" aria-hidden="true">#</a> 五、LEFT SEMI-JOIN</h1><p>​ 左开半连接（LEFT SEMI-JOIN）会返回左边表的记录，前提是其记录对于右表满足 ON 语句中的判定条件。</p><p>​ 这个子句的出现是为了解决 IN ... EXISTS结构的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 因为 Hive 不支持以下查询：</span>
<span class="token constant">SELECT</span> s<span class="token punctuation">.</span>ymd<span class="token punctuation">,</span> s<span class="token punctuation">.</span>symbol<span class="token punctuation">,</span> s<span class="token punctuation">.</span>price_close <span class="token constant">FROM</span> stocks s <span class="token constant">WHERE</span> s<span class="token punctuation">.</span>ymd<span class="token punctuation">,</span> s<span class="token punctuation">.</span>symbol <span class="token function">IN</span><span class="token punctuation">(</span><span class="token constant">SELECT</span> d<span class="token punctuation">.</span>yml<span class="token punctuation">,</span> d<span class="token punctuation">.</span>symbol <span class="token constant">FROM</span> dividends d<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 所以利用 LEFT SEMI JOIN</span>
<span class="token comment">// SELECT 和 WHERE 语句中不能引用到右边表中的字段</span>
hive<span class="token operator">&gt;</span> <span class="token constant">SELECT</span> s<span class="token punctuation">.</span>yml<span class="token punctuation">,</span> s<span class="token punctuation">.</span>symbol<span class="token punctuation">,</span> s<span class="token punctuation">.</span>price_close
    <span class="token operator">&gt;</span> <span class="token constant">FROM</span> stocks s <span class="token constant">LEFT</span> <span class="token constant">SEMI</span> <span class="token constant">JOIN</span> dividends d <span class="token constant">ON</span> s<span class="token punctuation">.</span>ymd <span class="token operator">=</span> d<span class="token punctuation">.</span>ymd <span class="token constant">AND</span> s<span class="token punctuation">.</span>symbol <span class="token operator">=</span> d<span class="token punctuation">.</span>symbol<span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">1962</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">05</span>  <span class="token constant">IBM</span>   <span class="token number">361.5</span>
<span class="token number">1962</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">07</span>	<span class="token constant">IBM</span>   <span class="token number">373.25</span>
<span class="token number">1962</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">08</span>  <span class="token constant">IBM</span>   <span class="token number">459.5</span>
<span class="token number">1962</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">06</span>  <span class="token constant">IBM</span>   <span class="token number">551.5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 注：SEMI-JOIN 比通常的 INNER JOIN 要更加高效：对于左表的一条指定的记录，在右边表中一旦找到匹配的记录，Hive 就会立即停止扫描。从这点来看，左边表中选择的列是可以预测的。</p><h1 id="六、map-side-join" tabindex="-1"><a class="header-anchor" href="#六、map-side-join" aria-hidden="true">#</a> 六、map-side JOIN</h1><p>​ 如果所有表中只有一张表是小表，那么可以在最大的表通过 mapper 的时候将小表完全放到内存中。</p><p>​ Hive 可以在 map 段执行连接过程（称为 map-side JOIN），这是因为 Hive 可以和内存中的小表进行逐一匹配，从而省略掉常规连接操作所需要的 reduce 过程。即使对于很小的数据集，这个优化也明显地要快于常规的连接操作：不仅减少了 reduce 过程，而且有时还可以同时减少 map 过程的执行步骤。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 当设置了以下的属性，内连接也可以使用这个优化(hive v0.7+) </span>
<span class="token comment">// 但是右外连接（RIGHT OUTER JOIN）和全外连接（FULL OUTER JOIN）不支持此优化</span>
hive<span class="token operator">&gt;</span>set hive<span class="token punctuation">.</span>auto<span class="token punctuation">.</span>convert<span class="token punctuation">.</span>join<span class="token operator">=</span><span class="token boolean">true</span>

hive<span class="token operator">&gt;</span> <span class="token constant">SELECT</span> s<span class="token punctuation">.</span>ymd<span class="token punctuation">,</span> s<span class="token punctuation">.</span>symbol<span class="token punctuation">,</span> s<span class="token punctuation">.</span>price_close<span class="token punctuation">,</span> d<span class="token punctuation">.</span>dividend
    <span class="token operator">&gt;</span> <span class="token constant">FROM</span> stocks s <span class="token constant">JOIN</span> dividends d <span class="token constant">ON</span> s<span class="token punctuation">.</span>ymd <span class="token operator">=</span> d<span class="token punctuation">.</span>ymd <span class="token constant">AND</span> s<span class="token punctuation">.</span>symbol <span class="token operator">=</span> d<span class="token punctuation">.</span>symbol 	  <span class="token operator">&gt;</span> <span class="token constant">WHERE</span> s<span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token char">&#39;AAPL&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 属于小表的属性</span>
hive<span class="token punctuation">.</span>mapjoin<span class="token punctuation">.</span>smalltable<span class="token punctuation">.</span>filesize<span class="token operator">=</span><span class="token number">25000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似的：</p><p>​ 表中的数据必须是按照 ON 语句中的键进行分桶的，而且其中一张表的分桶的个数必须是另一张表分桶个数的若干倍，当满足这些条件时：</p><p>​ Hive 可以在 map 阶段按照分桶数据进行连接。因此这种情况下，不需要先获取到表中所有的内容，之后采取和另一张表中每个分桶进行匹配连接。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 默认没有开启</span>
set hive<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>bucketmapJOIN<span class="token operator">=</span><span class="token boolean">true</span>
<span class="token comment">// 涉及的分桶表具有相同的分桶数，而且数据是按照 连接键 或 桶的键进行排序的</span>
<span class="token comment">// 此时 Hive 可以执行一个更快的分类-合并连接（sort-merge JOIN）</span>
<span class="token comment">// 默认没有开启</span>
set hive<span class="token punctuation">.</span>input<span class="token punctuation">.</span>format<span class="token operator">=</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>ql<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>BucketizedHiveInputFormat</span><span class="token punctuation">;</span>
set hive<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>bucketmapjoin<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
set hive<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>bucketmapjoin<span class="token punctuation">.</span>sortedmerge<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="七、order-by-和-sort-by" tabindex="-1"><a class="header-anchor" href="#七、order-by-和-sort-by" aria-hidden="true">#</a> 七、ORDER BY 和 SORT BY</h1><p>​ Hive 中 ORDER BY 语句和其他的 SQL 方言中的定义是一样的。会对查询结果集执行一个全局排序：所有数据都通过一个 reducer 进行处理的过程。对于大数据集，这个过程可能会消耗太漫长的时间来执行。（全局有序）</p><p>​ Hive 增加了一个可供选择的方式，也就是 SORT BY，其只会在每个 reducer 中对数据进行排序，也就是执行一个局部排序过程。这可以保证每个 reducer 的输出数据都是有序的（但并非全局有序）。这样可以提高后面进行的全局排序的效率。（每个reducer有序）</p><p>​ 注：当只有一个reducer时上述结果相同；默认升序ASC 降序DESC；若hive.maperd.mode=strict 时，语句必须加 LIMIT</p><h1 id="八、cluster-by" tabindex="-1"><a class="header-anchor" href="#八、cluster-by" aria-hidden="true">#</a> 八、CLUSTER BY</h1><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// CLUSTER BY = DISTRIBUTE BY ... SORT BY 语句。</span>
<span class="token comment">// 此语句会剥夺 SORT BY 的并行性</span>
hive<span class="token operator">&gt;</span> <span class="token constant">SELECT</span> a<span class="token punctuation">.</span>ymd<span class="token punctuation">,</span> s<span class="token punctuation">.</span>symbol<span class="token punctuation">,</span> s<span class="token punctuation">.</span>price_close
    <span class="token operator">&gt;</span> <span class="token constant">FROM</span> stocks s <span class="token constant">CLUSTER</span> <span class="token constant">BY</span> s<span class="token punctuation">.</span>symbol
    
<span class="token number">2010</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">08</span> <span class="token constant">AAPL</span> <span class="token number">194.12</span>
<span class="token number">2010</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">05</span> <span class="token constant">AAPL</span> <span class="token number">195.46</span>
<span class="token number">2010</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">04</span> <span class="token constant">AAPL</span> <span class="token number">192.05</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">2010</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">27</span> <span class="token constant">AAPL</span> <span class="token number">207.88</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36),o=[t];function c(l,i){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","Hive数据操作（2）.html.vue"]]);export{k as default};
