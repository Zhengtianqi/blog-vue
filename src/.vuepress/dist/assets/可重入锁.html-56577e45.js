const t=JSON.parse('{"key":"v-a3c1aec8","path":"/posts/java/%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81.html","title":"可重入锁","lang":"zh-CN","frontmatter":{"title":"可重入锁","author":"郑天祺","tag":["锁"],"category":["java基础"],"date":"2019-08-31T13:05:00.000Z","description":"1、可重入锁： ​\\t也叫做递归锁，指的是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响。 ​\\t\\"独占\\"，就是在同一时刻只能有一个线程获取到锁，而其它获取锁的线程只能处于同步队列中等待，只有获取锁的线程释放了锁，后继的线程才能够获取锁。 ​\\t“可重入“，就是支持重进入的锁，它表示该锁能够支持一个线程对资源的重复加锁。 ​\\t在JAVA环境下 ReentrantLock 和synchronized 都是可重入锁。 2、Synchronized和ReentrantLock 1）性能区别：","head":[["meta",{"property":"og:url","content":"https://zhengtianqi.gitee.io/blog-vue/posts/java/%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81.html"}],["meta",{"property":"og:site_name","content":"郑天祺的博客"}],["meta",{"property":"og:title","content":"可重入锁"}],["meta",{"property":"og:description","content":"1、可重入锁： ​\\t也叫做递归锁，指的是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响。 ​\\t\\"独占\\"，就是在同一时刻只能有一个线程获取到锁，而其它获取锁的线程只能处于同步队列中等待，只有获取锁的线程释放了锁，后继的线程才能够获取锁。 ​\\t“可重入“，就是支持重进入的锁，它表示该锁能够支持一个线程对资源的重复加锁。 ​\\t在JAVA环境下 ReentrantLock 和synchronized 都是可重入锁。 2、Synchronized和ReentrantLock 1）性能区别："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-10T12:47:14.000Z"}],["meta",{"property":"article:author","content":"郑天祺"}],["meta",{"property":"article:tag","content":"锁"}],["meta",{"property":"article:published_time","content":"2019-08-31T13:05:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-10T12:47:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"可重入锁\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-08-31T13:05:00.000Z\\",\\"dateModified\\":\\"2023-06-10T12:47:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"郑天祺\\"}]}"]]},"headers":[{"level":2,"title":"1、可重入锁：","slug":"_1、可重入锁","link":"#_1、可重入锁","children":[]},{"level":2,"title":"2、Synchronized和ReentrantLock","slug":"_2、synchronized和reentrantlock","link":"#_2、synchronized和reentrantlock","children":[]}],"git":{"createdTime":1686401234000,"updatedTime":1686401234000,"contributors":[{"name":"zhengtianqi","email":"270490096@qq.com","commits":1}]},"readingTime":{"minutes":2.67,"words":800},"filePathRelative":"posts/java/可重入锁.md","localizedDate":"2019年8月31日","excerpt":"<h2> 1、可重入锁：</h2>\\n<p>​\\t也叫做递归锁，指的是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响。\\n​\\t\\"独占\\"，就是在同一时刻只能有一个线程获取到锁，而其它获取锁的线程只能处于同步队列中等待，只有获取锁的线程释放了锁，后继的线程才能够获取锁。</p>\\n<p>​\\t“可重入“，就是支持重进入的锁，它表示该锁能够支持一个线程对资源的重复加锁。</p>\\n<p>​\\t在JAVA环境下 ReentrantLock 和synchronized 都是可重入锁。</p>\\n<h2> 2、Synchronized和ReentrantLock</h2>\\n<p><strong>1）性能区别：</strong></p>","autoDesc":true}');export{t as data};
