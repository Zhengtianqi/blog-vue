import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as t}from"./app-0ce632a0.js";const p={},e=t(`<h1 id="一、分区" tabindex="-1"><a class="header-anchor" href="#一、分区" aria-hidden="true">#</a> 一、分区</h1><p>Hive 中分区的功能是非常有用的。因为通常要对输入进行全盘扫描，来满足查询条件。</p><p>如：存储日志，log_2020_01_01、log_2020_01_02等</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>hive<span class="token operator">&gt;</span> <span class="token constant">CREATE</span> <span class="token constant">TABLE</span> 

hive<span class="token operator">&gt;</span> <span class="token constant">CREATE</span> <span class="token class-name">TABLE</span> log_2020_01_01 <span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span> part string<span class="token punctuation">,</span> quantity <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
hive<span class="token operator">&gt;</span> <span class="token constant">CREATE</span> <span class="token class-name">TABLE</span> log_2020_01_02 <span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span> part string<span class="token punctuation">,</span> quantity <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
hive<span class="token operator">&gt;</span> <span class="token constant">CREATE</span> <span class="token class-name">TABLE</span> log_2020_01_04 <span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span> part string<span class="token punctuation">,</span> quantity <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

hive<span class="token operator">&gt;</span> <span class="token class-name">SELECT</span> part<span class="token punctuation">,</span>quantity log_2020_01_01
    <span class="token operator">&gt;</span> <span class="token constant">UNION</span> <span class="token constant">ALL</span>
    <span class="token operator">&gt;</span> <span class="token class-name">SELECT</span> part<span class="token punctuation">,</span>quantity from log_2020_01_04
    <span class="token operator">&gt;</span> <span class="token constant">WHERE</span> quantity <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Hive 通过 WHERE 子句中表达式来选择查询所需要的指定的分区。这样效率高且清晰明了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>hive<span class="token operator">&gt;</span> <span class="token constant">CREATE</span> <span class="token class-name">TABLE</span> <span class="token function">supply</span><span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span> part string<span class="token punctuation">,</span> quantity <span class="token keyword">int</span><span class="token punctuation">)</span> 
    <span class="token operator">&gt;</span> <span class="token class-name">PARTITIONED</span> <span class="token function">BY</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span>

hive<span class="token operator">&gt;</span> <span class="token constant">ALTER</span> <span class="token constant">TABLE</span> supply add <span class="token constant">PARTITION</span> <span class="token punctuation">(</span>day<span class="token operator">=</span><span class="token number">20200201</span><span class="token punctuation">)</span>
hive<span class="token operator">&gt;</span> <span class="token constant">ALTER</span> <span class="token constant">TABLE</span> supply add <span class="token constant">PARTITION</span> <span class="token punctuation">(</span>day<span class="token operator">=</span><span class="token number">20200202</span><span class="token punctuation">)</span>
hive<span class="token operator">&gt;</span> <span class="token constant">ALTER</span> <span class="token constant">TABLE</span> supply add <span class="token constant">PARTITION</span> <span class="token punctuation">(</span>day<span class="token operator">=</span><span class="token number">20200203</span><span class="token punctuation">)</span>
hive<span class="token operator">&gt;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>load data<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
hive<span class="token operator">&gt;</span> <span class="token class-name">SELECT</span> part<span class="token punctuation">,</span>quantity <span class="token constant">FROM</span> supply <span class="token constant">WHERE</span> day<span class="token operator">&gt;=</span><span class="token number">20200201</span> <span class="token constant">AND</span> day<span class="token operator">&lt;</span><span class="token number">20200203</span> <span class="token constant">AND</span> quantity<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是不要存储太多的分区和文件夹目录，并且每一个文件要足够大。应该是文件系统中块的若干倍。</p><h2 id="二、同一份数据多种处理" tabindex="-1"><a class="header-anchor" href="#二、同一份数据多种处理" aria-hidden="true">#</a> 二、同一份数据多种处理</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>hive<span class="token operator">&gt;</span> <span class="token constant">INSERT</span> <span class="token constant">OVERWRITE</span> <span class="token constant">TABLE</span> sales
    <span class="token operator">&gt;</span> <span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> history <span class="token class-name">WHERE</span> action<span class="token operator">=</span>&#39;purchased&#39;
hive<span class="token operator">&gt;</span> <span class="token constant">INSERT</span> <span class="token constant">OVERWRITE</span> <span class="token constant">TABLE</span> credits
    <span class="token operator">&gt;</span> <span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> history <span class="token class-name">WHERE</span> action<span class="token operator">=</span>&#39;returned&#39;
<span class="token comment">// 可以优化上边两边编程下边，而且可以提高扫描速度，扫描一次</span>
hive<span class="token operator">&gt;</span> <span class="token constant">FROM</span> history
    <span class="token operator">&gt;</span> <span class="token constant">INSERT</span> <span class="token constant">OVERWRITE</span> sales <span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token class-name">WHERE</span> action<span class="token operator">=</span>&#39;phrchased&#39;
    <span class="token operator">&gt;</span> <span class="token constant">INSERT</span> <span class="token constant">OVERWRITE</span> credits <span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token class-name">WHERE</span> action<span class="token operator">=</span>&#39;returned&#39;<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="三、对于每个表的分区" tabindex="-1"><a class="header-anchor" href="#三、对于每个表的分区" aria-hidden="true">#</a> 三、对于每个表的分区</h1><p>​ ELT 处理过程会涉及到多个处理步骤，每个步骤可能会产生一到多个临时表，这些表仅供下一个job使用。</p><p>​ 问题：由于查询或原始数据处理的某个步骤出现问题而导致需要对好几天的输入数据重跑 ETL 过程。这时用户可能就需要执行那些一天执行一次的处理过程，来保证在所有的任务都完成之前不会有 job 将临时表覆盖重写。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 如：有中间表distinct_ip_in_logs</span>
hive<span class="token operator">&gt;</span> <span class="token constant">INSERT</span> <span class="token constant">OVERWRITE</span> table distinct_ip_in_logs 
    <span class="token operator">&gt;</span> <span class="token class-name">SELECT</span> <span class="token function">distict</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span> as ip from weblogs
    <span class="token operator">&gt;</span> <span class="token class-name">WHERE</span> hit_date<span class="token operator">=</span>&#39;$<span class="token punctuation">{</span>hiveconf<span class="token operator">:</span>dt<span class="token punctuation">}</span>&#39;<span class="token punctuation">;</span>

hive<span class="token operator">&gt;</span> <span class="token constant">CREATE</span> <span class="token class-name">TABLE</span> state_city_for_day <span class="token punctuation">(</span>state string<span class="token punctuation">,</span> city<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span>

hive<span class="token operator">&gt;</span> <span class="token constant">INSERT</span> <span class="token constant">OVERWRITE</span> state_city_for_day
    <span class="token operator">&gt;</span> <span class="token class-name">SELECT</span> <span class="token function">distinct</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> city<span class="token punctuation">)</span> <span class="token constant">FROM</span> distinct_ip_in_logs
    <span class="token operator">&gt;</span> <span class="token constant">JOIN</span> geodata <span class="token constant">ON</span> <span class="token punctuation">(</span>distinct_ip_in_logs<span class="token punctuation">.</span>ip<span class="token operator">=</span>geodata<span class="token punctuation">.</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 当计算某一天的数据时会导致前一天数据被 INSERT OVERWRITE 语句覆盖掉。</p><p>​ 如果同时运行两个这样的实例，处理不同日期的数据的话，那么它们就可能会相互影响对方的结果数据。</p><p>​ 改进方法, 建立分区：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>hive <span class="token operator">-</span>hiveconf dt<span class="token operator">=</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span>
    
hive<span class="token operator">&gt;</span> <span class="token constant">INSERT</span> <span class="token constant">OVERWRITE</span> table distinct_ip_in_logs
    <span class="token operator">&gt;</span> <span class="token function">PARTITION</span><span class="token punctuation">(</span>hit_date<span class="token operator">=</span>$<span class="token punctuation">{</span>dt<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token operator">&gt;</span> <span class="token class-name">SELECT</span> <span class="token function">distinct</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span> as ip from weblogs
    <span class="token operator">&gt;</span> <span class="token class-name">WHERE</span> hit_date<span class="token operator">=</span>&#39;$<span class="token punctuation">{</span>hiveconf<span class="token operator">:</span>dt<span class="token punctuation">}</span>&#39;

hive<span class="token operator">&gt;</span> <span class="token constant">CREATE</span> <span class="token class-name">TABLE</span> <span class="token function">state_city_for_day</span><span class="token punctuation">(</span>state string<span class="token punctuation">,</span>city string<span class="token punctuation">)</span>
    <span class="token operator">&gt;</span> <span class="token class-name">PARTITIION</span> <span class="token constant">BY</span> <span class="token punctuation">(</span>hit_date string<span class="token punctuation">)</span>
    
hive<span class="token operator">&gt;</span> <span class="token constant">INSERT</span> <span class="token constant">OVERWRITE</span> table state_city_for_day <span class="token function">PARTITION</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>hiveconf<span class="token operator">:</span>dt<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token operator">&gt;</span> <span class="token class-name">SELECT</span> <span class="token function">distinct</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span>city<span class="token punctuation">)</span> <span class="token constant">FROM</span> distinct_ip_in_logs
    <span class="token operator">&gt;</span> <span class="token constant">JOIN</span> geodata <span class="token constant">ON</span> <span class="token punctuation">(</span>distinct_ip_in_logs<span class="token punctuation">.</span>ip<span class="token operator">=</span>geodata<span class="token punctuation">.</span>ip<span class="token punctuation">)</span>
    <span class="token operator">&gt;</span> <span class="token constant">WHERE</span> <span class="token punctuation">(</span>hit_date<span class="token operator">=</span>&#39;$<span class="token punctuation">{</span>hiveconf<span class="token operator">:</span>dt<span class="token punctuation">}</span>&#39;<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="四、分桶表数据存储" tabindex="-1"><a class="header-anchor" href="#四、分桶表数据存储" aria-hidden="true">#</a> 四、分桶表数据存储</h1><p>​ 分区提供一个数据隔离和优化查询的遍历的方式。不过，并非所有的数据集都可形成合理的分区。</p><p>​ 分桶是将数据集分解成更统一管理的若干部分的另一个技术。利用哈希分发到不同的桶中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 分区：如果根据user_id分区，会创建太多分区</span>
hive<span class="token operator">&gt;</span> <span class="token constant">CREATE</span> <span class="token class-name">TABLE</span> weblog <span class="token punctuation">(</span>url <span class="token constant">STRING</span><span class="token punctuation">,</span> source_ip <span class="token constant">STRING</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token class-name">PARTITIONED</span> <span class="token constant">BY</span> <span class="token punctuation">(</span>dt <span class="token constant">STRING</span><span class="token punctuation">,</span> user_id <span class="token constant">INT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

hive<span class="token operator">&gt;</span> <span class="token constant">FROM</span> raw_weblog
    <span class="token operator">&gt;</span> <span class="token constant">INSERT</span> <span class="token constant">OVERWRITE</span> <span class="token constant">TABLE</span> page_view <span class="token function">PARTITION</span><span class="token punctuation">(</span>dt<span class="token operator">=</span>&#39;<span class="token number">2020</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">08</span>&#39;<span class="token punctuation">,</span> user_id<span class="token punctuation">)</span>
    <span class="token operator">&gt;</span> <span class="token class-name">SELECT</span> server_name<span class="token punctuation">,</span> url<span class="token punctuation">,</span> source_ip<span class="token punctuation">,</span> dt<span class="token punctuation">,</span> user_id<span class="token punctuation">;</span>

<span class="token comment">// 分桶：用户数比桶数多，每个桶就会有多个用户的记录</span>
hive<span class="token operator">&gt;</span> <span class="token constant">CREATE</span> <span class="token class-name">TABLE</span> weblog <span class="token punctuation">(</span>user_id <span class="token constant">INT</span><span class="token punctuation">,</span> url <span class="token constant">STRING</span><span class="token punctuation">,</span> source_ip <span class="token constant">STRING</span><span class="token punctuation">)</span>
    <span class="token operator">&gt;</span> <span class="token class-name">PARTITIONED</span> <span class="token constant">BY</span> <span class="token punctuation">(</span>dt <span class="token constant">STRING</span><span class="token punctuation">)</span>
    <span class="token operator">&gt;</span> <span class="token class-name">CLUSTERED</span> <span class="token constant">BY</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">)</span> <span class="token constant">INTO</span> <span class="token number">96</span> <span class="token constant">BUCKETS</span><span class="token punctuation">;</span>

<span class="token comment">// 此属性强制hive为目标表初始化过程设置一个正确的 reducer 个数。</span>
hive<span class="token operator">&gt;</span> <span class="token constant">SET</span> hive<span class="token punctuation">.</span>enforce<span class="token punctuation">.</span>bucketing<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
hive<span class="token operator">&gt;</span> <span class="token constant">FROM</span> raw_logs
    <span class="token operator">&gt;</span> <span class="token constant">INSERT</span> <span class="token constant">OVERWRITE</span> <span class="token constant">TABLE</span> weblog
    <span class="token operator">&gt;</span> <span class="token constant">PARTITION</span> <span class="token punctuation">(</span>dt<span class="token operator">=</span>&#39;<span class="token number">2020</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">25</span>&#39;<span class="token punctuation">)</span>
    <span class="token operator">&gt;</span> <span class="token class-name">SELECT</span> user_id<span class="token punctuation">,</span> url<span class="token punctuation">,</span> source_ip <span class="token class-name">WHERE</span> dt <span class="token operator">=</span> &#39;<span class="token number">2020</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">25</span>&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="五、为表增加列" tabindex="-1"><a class="header-anchor" href="#五、为表增加列" aria-hidden="true">#</a> 五、为表增加列</h1><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>hive<span class="token operator">&gt;</span> <span class="token constant">CREATE</span> <span class="token class-name">TABLE</span> weblogs  <span class="token punctuation">(</span>version <span class="token constant">LONG</span><span class="token punctuation">,</span> url <span class="token constant">STRING</span><span class="token punctuation">)</span>
    <span class="token operator">&gt;</span> <span class="token class-name">PARTITIONED</span> <span class="token constant">BY</span> <span class="token punctuation">(</span>hit_date <span class="token keyword">int</span><span class="token punctuation">)</span>
    <span class="token operator">&gt;</span> <span class="token constant">ROW</span> <span class="token constant">FORMAT</span> <span class="token constant">DELIMITED</span> <span class="token constant">FIELDS</span> <span class="token constant">TERMINATED</span> <span class="token constant">BY</span> <span class="token char">&#39;\\t&#39;</span><span class="token punctuation">;</span>

hive<span class="token operator">&gt;</span> <span class="token operator">!</span> cat log1<span class="token punctuation">.</span>txt
<span class="token number">1</span> <span class="token operator">/</span>mystuff
<span class="token number">1</span> <span class="token operator">/</span>toys
    
hive<span class="token operator">&gt;</span> <span class="token constant">LOAD</span> <span class="token constant">DATA</span> <span class="token constant">LOCAL</span> <span class="token constant">INPATH</span> &#39;log1<span class="token punctuation">.</span>txt&#39; <span class="token keyword">int</span> weblogs <span class="token function">partition</span><span class="token punctuation">(</span><span class="token number">20200101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
hive<span class="token operator">&gt;</span> <span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token class-name">FROM</span> weblogs<span class="token punctuation">;</span>
<span class="token number">1</span> <span class="token operator">/</span>mystuff <span class="token number">20200101</span>
<span class="token number">1</span> <span class="token operator">/</span>toys <span class="token number">20200101</span>
    
<span class="token comment">// 加新字段</span>
hive<span class="token operator">&gt;</span> <span class="token operator">!</span> cat log2<span class="token punctuation">.</span>txt
<span class="token number">2</span> <span class="token operator">/</span>cars bob
<span class="token number">2</span> <span class="token operator">/</span>stuff terrys
    
hive<span class="token operator">&gt;</span> <span class="token constant">ALTER</span> <span class="token constant">TABLE</span> weblogs <span class="token class-name">ADD</span> <span class="token constant">COLUMNS</span> <span class="token punctuation">(</span>user_id string<span class="token punctuation">)</span><span class="token punctuation">;</span>
hive<span class="token operator">&gt;</span> <span class="token constant">LOAD</span> <span class="token constant">DATA</span> <span class="token constant">LOCAL</span> <span class="token constant">INPATH</span> &#39;log2<span class="token punctuation">.</span>txt&#39; <span class="token keyword">int</span> weblogs <span class="token function">partition</span><span class="token punctuation">(</span><span class="token number">20200101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
hive<span class="token operator">&gt;</span> <span class="token constant">SELECT</span> <span class="token operator">*</span> from weblogs
<span class="token number">1</span> <span class="token operator">/</span>mystuff <span class="token number">20200101</span> <span class="token constant">NULL</span>
<span class="token number">2</span> <span class="token operator">/</span>toys    <span class="token number">20200101</span> <span class="token constant">NULL</span>
<span class="token number">3</span> <span class="token operator">/</span>cars    <span class="token number">20200102</span> bob
<span class="token number">4</span> <span class="token operator">/</span>stuff   <span class="token number">20200102</span> terry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","Hive模式设计.html.vue"]]);export{k as default};
