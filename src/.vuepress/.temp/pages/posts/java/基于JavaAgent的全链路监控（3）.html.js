export const data = JSON.parse("{\"key\":\"v-4ed73dd8\",\"path\":\"/posts/java/%E5%9F%BA%E4%BA%8EJavaAgent%E7%9A%84%E5%85%A8%E9%93%BE%E8%B7%AF%E7%9B%91%E6%8E%A7%EF%BC%883%EF%BC%89.html\",\"title\":\"基于JavaAgent的全链路监控（3）\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"基于JavaAgent的全链路监控（3）\",\"author\":\"郑天祺\",\"tag\":[\"javaagent\"],\"category\":[\"java基础\"],\"date\":\"2020-07-19T17:25:00.000Z\",\"description\":\"《利用javaagent进行 JVM内存与GC信息的采集》 1、介绍 ​\\t\\t除了监控java方法的执行耗时，我们还需要获取应用实例的jvm内存与gc信息，以实时把控我们的服务器性能是否在安全范围。监控jvm内存与gc信息是非常重要的，尤其是在大促以及微博火热爆点的时候，我们需要根据监控信息进行扩容，以保证系统稳定。 2、编码 在--- title: 基于JavaAgent的全链路监控（2）的基础上增加 （1）MyAgent.java ​ package cn.edu.bjut.agent; import com.google.common.util.concurrent.ThreadFactoryBuilder; import java.util.concurrent.*; /** * @author zhengtianqi */ public class MyAgent { /** * JVM 首先尝试在代理类上调用以下方法 */ public static void premain(String agentArgs, Instrumentation inst) { // 使用ScheduledExecutorService创建定时任务 ScheduledExecutorService schedule = new ScheduledThreadPoolExecutor(1, new ThreadFactoryBuilder().setNameFormat(\\\"scheduled-%d\\\").build()); // 创建并执行在给定延迟后启用的一次性操作 schedule.scheduleAtFixedRate(() -&gt; { // 此方法为打印jvm信息喝gc信息 JvmStack.printMemoryMetric(); JvmStack.printGcMetric(); }, 0L, 1000L, TimeUnit.MILLISECONDS); } /** * 如果代理类没有实现上面的方法，那么 JVM 将尝试调用该方法 */ public static void premain(String agentArgs) { } }\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://zhengtianqi.gitee.io/blog-vue/posts/java/%E5%9F%BA%E4%BA%8EJavaAgent%E7%9A%84%E5%85%A8%E9%93%BE%E8%B7%AF%E7%9B%91%E6%8E%A7%EF%BC%883%EF%BC%89.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"郑天祺的博客\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"基于JavaAgent的全链路监控（3）\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"《利用javaagent进行 JVM内存与GC信息的采集》 1、介绍 ​\\t\\t除了监控java方法的执行耗时，我们还需要获取应用实例的jvm内存与gc信息，以实时把控我们的服务器性能是否在安全范围。监控jvm内存与gc信息是非常重要的，尤其是在大促以及微博火热爆点的时候，我们需要根据监控信息进行扩容，以保证系统稳定。 2、编码 在--- title: 基于JavaAgent的全链路监控（2）的基础上增加 （1）MyAgent.java ​ package cn.edu.bjut.agent; import com.google.common.util.concurrent.ThreadFactoryBuilder; import java.util.concurrent.*; /** * @author zhengtianqi */ public class MyAgent { /** * JVM 首先尝试在代理类上调用以下方法 */ public static void premain(String agentArgs, Instrumentation inst) { // 使用ScheduledExecutorService创建定时任务 ScheduledExecutorService schedule = new ScheduledThreadPoolExecutor(1, new ThreadFactoryBuilder().setNameFormat(\\\"scheduled-%d\\\").build()); // 创建并执行在给定延迟后启用的一次性操作 schedule.scheduleAtFixedRate(() -&gt; { // 此方法为打印jvm信息喝gc信息 JvmStack.printMemoryMetric(); JvmStack.printGcMetric(); }, 0L, 1000L, TimeUnit.MILLISECONDS); } /** * 如果代理类没有实现上面的方法，那么 JVM 将尝试调用该方法 */ public static void premain(String agentArgs) { } }\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-06-10T12:47:14.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"郑天祺\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"javaagent\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2020-07-19T17:25:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-06-10T12:47:14.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"基于JavaAgent的全链路监控（3）\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2020-07-19T17:25:00.000Z\\\",\\\"dateModified\\\":\\\"2023-06-10T12:47:14.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"郑天祺\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"（1）MyAgent.java\",\"slug\":\"_1-myagent-java\",\"link\":\"#_1-myagent-java\",\"children\":[]}],\"git\":{\"createdTime\":1686401234000,\"updatedTime\":1686401234000,\"contributors\":[{\"name\":\"zhengtianqi\",\"email\":\"270490096@qq.com\",\"commits\":1}]},\"readingTime\":{\"minutes\":1.02,\"words\":307},\"filePathRelative\":\"posts/java/基于JavaAgent的全链路监控（3）.md\",\"localizedDate\":\"2020年7月20日\",\"excerpt\":\"<h1> 《利用javaagent进行 JVM内存与GC信息的采集》</h1>\\n<h1> 1、介绍</h1>\\n<p>​\\t\\t除了监控java方法的执行耗时，我们还需要获取应用实例的jvm内存与gc信息，以实时把控我们的服务器性能是否在安全范围。监控jvm内存与gc信息是非常重要的，尤其是在大促以及微博火热爆点的时候，我们需要根据监控信息进行扩容，以保证系统稳定。</p>\\n<h1> 2、编码</h1>\\n<p>在---\\ntitle: 基于JavaAgent的全链路监控（2）的基础上增加</p>\\n<h2> （1）MyAgent.java</h2>\\n<p>​</p>\\n<div class=\\\"language-java line-numbers-mode\\\" data-ext=\\\"java\\\"><pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">package</span> <span class=\\\"token namespace\\\">cn<span class=\\\"token punctuation\\\">.</span>edu<span class=\\\"token punctuation\\\">.</span>bjut<span class=\\\"token punctuation\\\">.</span>agent</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token import\\\"><span class=\\\"token namespace\\\">com<span class=\\\"token punctuation\\\">.</span>google<span class=\\\"token punctuation\\\">.</span>common<span class=\\\"token punctuation\\\">.</span>util<span class=\\\"token punctuation\\\">.</span>concurrent<span class=\\\"token punctuation\\\">.</span></span><span class=\\\"token class-name\\\">ThreadFactoryBuilder</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token import\\\"><span class=\\\"token namespace\\\">java<span class=\\\"token punctuation\\\">.</span>util<span class=\\\"token punctuation\\\">.</span>concurrent<span class=\\\"token punctuation\\\">.</span></span><span class=\\\"token operator\\\">*</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token doc-comment comment\\\">/**\\n * <span class=\\\"token keyword\\\">@author</span> zhengtianqi\\n */</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyAgent</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n    <span class=\\\"token doc-comment comment\\\">/**\\n     * JVM 首先尝试在代理类上调用以下方法\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">premain</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">String</span> agentArgs<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Instrumentation</span> inst<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// 使用ScheduledExecutorService创建定时任务</span>\\n        <span class=\\\"token class-name\\\">ScheduledExecutorService</span> schedule <span class=\\\"token operator\\\">=</span>\\n                <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ScheduledThreadPoolExecutor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ThreadFactoryBuilder</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setNameFormat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"scheduled-%d\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">build</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">// 创建并执行在给定延迟后启用的一次性操作</span>\\n        schedule<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">scheduleAtFixedRate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-&gt;</span>\\n\\n        <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// 此方法为打印jvm信息喝gc信息</span>\\n            <span class=\\\"token class-name\\\">JvmStack</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">printMemoryMetric</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token class-name\\\">JvmStack</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">printGcMetric</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0L</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000L</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">TimeUnit</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">MILLISECONDS</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n     <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token doc-comment comment\\\">/**\\n     * 如果代理类没有实现上面的方法，那么 JVM 将尝试调用该方法\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">premain</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">String</span> agentArgs<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"autoDesc\":true}")
