export const data = JSON.parse("{\"key\":\"v-30d3aaa4\",\"path\":\"/posts/java/CountDownLatch.html\",\"title\":\"CountDownLatch\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"CountDownLatch\",\"author\":\"ztq\",\"tag\":[\"java\"],\"category\":[\"java基础\"],\"date\":\"2021-08-07T13:25:00.000Z\",\"description\":\"1、CountDownLatch简介 ​\\t\\tCountDownLatch是一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待，直到其他线程执行完后再执行。 ​\\t\\t类似的任务可以使用线程的 join() 方法实现：在等待时间点调用其他线程的 join() 方法，当前线程就会等待join线程执行完之后才继续执行，但 CountDownLatch 实现更加简单，并且比 join 的功能更多。 CountDownLatch函数列表 CountDownLatch(int count) 构造一个用给定计数初始化的 CountDownLatch。 // 使当前线程在锁存器倒计数至零之前一直等待，除非线程被中断。 void await() // 使当前线程在锁存器倒计数至零之前一直等待，除非线程被中断或超出了指定的等待时间。 boolean await(long timeout, TimeUnit unit) // 递减锁存器的计数，如果计数到达零，则释放所有等待的线程。 void countDown() // 返回当前计数。 long getCount() // 返回标识此锁存器及其状态的字符串。 String toString()\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://zhengtianqi.gitee.io/blog-vue/posts/java/CountDownLatch.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"郑天祺的博客\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"CountDownLatch\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"1、CountDownLatch简介 ​\\t\\tCountDownLatch是一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待，直到其他线程执行完后再执行。 ​\\t\\t类似的任务可以使用线程的 join() 方法实现：在等待时间点调用其他线程的 join() 方法，当前线程就会等待join线程执行完之后才继续执行，但 CountDownLatch 实现更加简单，并且比 join 的功能更多。 CountDownLatch函数列表 CountDownLatch(int count) 构造一个用给定计数初始化的 CountDownLatch。 // 使当前线程在锁存器倒计数至零之前一直等待，除非线程被中断。 void await() // 使当前线程在锁存器倒计数至零之前一直等待，除非线程被中断或超出了指定的等待时间。 boolean await(long timeout, TimeUnit unit) // 递减锁存器的计数，如果计数到达零，则释放所有等待的线程。 void countDown() // 返回当前计数。 long getCount() // 返回标识此锁存器及其状态的字符串。 String toString()\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-06-10T12:47:14.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"ztq\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"java\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2021-08-07T13:25:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-06-10T12:47:14.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"CountDownLatch\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2021-08-07T13:25:00.000Z\\\",\\\"dateModified\\\":\\\"2023-06-10T12:47:14.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"ztq\\\"}]}\"]]},\"headers\":[],\"git\":{\"createdTime\":1686401234000,\"updatedTime\":1686401234000,\"contributors\":[{\"name\":\"zhengtianqi\",\"email\":\"270490096@qq.com\",\"commits\":1}]},\"readingTime\":{\"minutes\":3.21,\"words\":964},\"filePathRelative\":\"posts/java/CountDownLatch.md\",\"localizedDate\":\"2021年8月7日\",\"excerpt\":\"<h1> 1、CountDownLatch简介</h1>\\n<p>​\\t\\tCountDownLatch是一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待，直到其他线程执行完后再执行。</p>\\n<p>​\\t\\t类似的任务可以使用线程的  join()  方法实现：在等待时间点调用其他线程的  join()  方法，当前线程就会等待join线程执行完之后才继续执行，但 CountDownLatch 实现更加简单，并且比 join 的功能更多。</p>\\n<p>CountDownLatch函数列表</p>\\n<div class=\\\"language-java line-numbers-mode\\\" data-ext=\\\"java\\\"><pre class=\\\"language-java\\\"><code><span class=\\\"token class-name\\\">CountDownLatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> count<span class=\\\"token punctuation\\\">)</span>\\n构造一个用给定计数初始化的 <span class=\\\"token class-name\\\">CountDownLatch</span>。\\n\\n<span class=\\\"token comment\\\">// 使当前线程在锁存器倒计数至零之前一直等待，除非线程被中断。</span>\\n<span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">await</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// 使当前线程在锁存器倒计数至零之前一直等待，除非线程被中断或超出了指定的等待时间。</span>\\n<span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">await</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> timeout<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">TimeUnit</span> unit<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// 递减锁存器的计数，如果计数到达零，则释放所有等待的线程。</span>\\n<span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">countDown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// 返回当前计数。</span>\\n<span class=\\\"token keyword\\\">long</span> <span class=\\\"token function\\\">getCount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// 返回标识此锁存器及其状态的字符串。</span>\\n<span class=\\\"token class-name\\\">String</span> <span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"autoDesc\":true}")
