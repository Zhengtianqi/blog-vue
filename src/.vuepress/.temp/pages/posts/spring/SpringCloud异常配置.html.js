export const data = JSON.parse("{\"key\":\"v-369d2626\",\"path\":\"/posts/spring/SpringCloud%E5%BC%82%E5%B8%B8%E9%85%8D%E7%BD%AE.html\",\"title\":\"SpringCloud异常配置\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"SpringCloud异常配置\",\"tag\":[\"SpringCloud\"],\"category\":[\"spring\"],\"date\":\"2020-12-14T11:34:00.000Z\",\"description\":\"1.【强制】Java 类库中定义的可以通过预检查方式规避的 RuntimeException 异常不应该通过catch 的方式来处理，比如:NullPointerException，IndexOutOfBoundsException 等等。 说明:无法通过预检查的异常除外，比如，在解析字符串形式的数字时，不得不通过 catch NumberFormatException 来实现。 正例:if (obj != null) {...} 反例:try { obj.method(); } catch (NullPointerException e) 2.【强制】异常不要用来做流程控制，条件控制。 说明:异常设计的初衷是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://zhengtianqi.gitee.io/blog-vue/posts/spring/SpringCloud%E5%BC%82%E5%B8%B8%E9%85%8D%E7%BD%AE.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"郑天祺的博客\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"SpringCloud异常配置\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"1.【强制】Java 类库中定义的可以通过预检查方式规避的 RuntimeException 异常不应该通过catch 的方式来处理，比如:NullPointerException，IndexOutOfBoundsException 等等。 说明:无法通过预检查的异常除外，比如，在解析字符串形式的数字时，不得不通过 catch NumberFormatException 来实现。 正例:if (obj != null) {...} 反例:try { obj.method(); } catch (NullPointerException e) 2.【强制】异常不要用来做流程控制，条件控制。 说明:异常设计的初衷是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-06-10T12:47:14.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Mr.郑天祺\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"SpringCloud\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2020-12-14T11:34:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-06-10T12:47:14.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"SpringCloud异常配置\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2020-12-14T11:34:00.000Z\\\",\\\"dateModified\\\":\\\"2023-06-10T12:47:14.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Mr.郑天祺\\\",\\\"url\\\":\\\"https://zhengtianqi.github.io\\\"}]}\"]]},\"headers\":[],\"git\":{\"createdTime\":1686401234000,\"updatedTime\":1686401234000,\"contributors\":[{\"name\":\"zhengtianqi\",\"email\":\"270490096@qq.com\",\"commits\":1}]},\"readingTime\":{\"minutes\":4.29,\"words\":1287},\"filePathRelative\":\"posts/spring/SpringCloud异常配置.md\",\"localizedDate\":\"2020年12月14日\",\"excerpt\":\"<p css-module=\\\".\\\">1.【强制】Java 类库中定义的可以通过预检查方式规避的 RuntimeException 异常不应该通过catch 的方式来处理，比如:NullPointerException，IndexOutOfBoundsException 等等。\\n说明:无法通过预检查的异常除外，比如，在解析字符串形式的数字时，不得不通过 catch NumberFormatException 来实现。\\n正例:if (obj != null) {...}\\n反例:try { obj.method(); } catch (NullPointerException e)</p>\\n<p>2.【强制】异常不要用来做流程控制，条件控制。\\n说明:异常设计的初衷是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。</p>\",\"autoDesc\":true}")
