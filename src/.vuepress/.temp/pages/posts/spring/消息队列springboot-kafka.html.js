export const data = JSON.parse("{\"key\":\"v-6c74d0a8\",\"path\":\"/posts/spring/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97springboot-kafka.html\",\"title\":\"kafka架构设计\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"kafka架构设计\",\"author\":\"ztq\",\"tag\":[\"kafka\"],\"category\":[\"分布式\"],\"date\":\"2022-10-28T17:18:00.000Z\",\"description\":\"1、应用场景 同时为发布和订阅提供高吞吐量、消息持久化、分布式功能、支持数据并行加载到Hadoop中 实际： 1、发布系统通知：如评论、点赞、关注这些事件发生后，可以把这些操作放入到kafka消息队列中，如果用户量一大直接操作数据库，服务器压力顶不住。所以把这些通知先存入kafka中，然后一个个消费掉。 2、一些项目数据同步问题也可以用到。 3、监测数据：分布式应用程序生成的统计数据集中聚合。 4、分布式：假设有系统B、C、D都需要系统A的数据 5、事件采集：其中状态的变化根据时间的顺序记录下来，kafka支持这种非常大的存储日志数据的场景。 如：日志收集、消息系统、活动追踪、运营指标、流式处理、热点点赞、评论、关注、发短信。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://zhengtianqi.gitee.io/blog-vue/posts/spring/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97springboot-kafka.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"郑天祺的博客\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"kafka架构设计\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"1、应用场景 同时为发布和订阅提供高吞吐量、消息持久化、分布式功能、支持数据并行加载到Hadoop中 实际： 1、发布系统通知：如评论、点赞、关注这些事件发生后，可以把这些操作放入到kafka消息队列中，如果用户量一大直接操作数据库，服务器压力顶不住。所以把这些通知先存入kafka中，然后一个个消费掉。 2、一些项目数据同步问题也可以用到。 3、监测数据：分布式应用程序生成的统计数据集中聚合。 4、分布式：假设有系统B、C、D都需要系统A的数据 5、事件采集：其中状态的变化根据时间的顺序记录下来，kafka支持这种非常大的存储日志数据的场景。 如：日志收集、消息系统、活动追踪、运营指标、流式处理、热点点赞、评论、关注、发短信。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-06-10T12:47:14.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"ztq\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"kafka\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2022-10-28T17:18:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-06-10T12:47:14.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"kafka架构设计\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2022-10-28T17:18:00.000Z\\\",\\\"dateModified\\\":\\\"2023-06-10T12:47:14.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"ztq\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"（1）kafka中的主题(Topic)\",\"slug\":\"_1-kafka中的主题-topic\",\"link\":\"#_1-kafka中的主题-topic\",\"children\":[]},{\"level\":2,\"title\":\"（2）kafka中的分区(Partition)\",\"slug\":\"_2-kafka中的分区-partition\",\"link\":\"#_2-kafka中的分区-partition\",\"children\":[]},{\"level\":2,\"title\":\"（3）kafka中的消费组\",\"slug\":\"_3-kafka中的消费组\",\"link\":\"#_3-kafka中的消费组\",\"children\":[]},{\"level\":2,\"title\":\"（4）kafka怎么保证高可用\",\"slug\":\"_4-kafka怎么保证高可用\",\"link\":\"#_4-kafka怎么保证高可用\",\"children\":[]},{\"level\":2,\"title\":\"（5）kafka整体架构\",\"slug\":\"_5-kafka整体架构\",\"link\":\"#_5-kafka整体架构\",\"children\":[]},{\"level\":2,\"title\":\"（1）引入依赖\",\"slug\":\"_1-引入依赖\",\"link\":\"#_1-引入依赖\",\"children\":[]},{\"level\":2,\"title\":\"(2)修改application.yml\",\"slug\":\"_2-修改application-yml\",\"link\":\"#_2-修改application-yml\",\"children\":[]},{\"level\":2,\"title\":\"（3）增加Constant.java\",\"slug\":\"_3-增加constant-java\",\"link\":\"#_3-增加constant-java\",\"children\":[]},{\"level\":2,\"title\":\"(4)增加生产者MessageServiceKafkaImpl.java和MessageService.java\",\"slug\":\"_4-增加生产者messageservicekafkaimpl-java和messageservice-java\",\"link\":\"#_4-增加生产者messageservicekafkaimpl-java和messageservice-java\",\"children\":[]},{\"level\":2,\"title\":\"(5)增加消费者MessageListener.java\",\"slug\":\"_5-增加消费者messagelistener-java\",\"link\":\"#_5-增加消费者messagelistener-java\",\"children\":[]},{\"level\":2,\"title\":\"(6)增加测试类SendMessageTest.java\",\"slug\":\"_6-增加测试类sendmessagetest-java\",\"link\":\"#_6-增加测试类sendmessagetest-java\",\"children\":[]}],\"git\":{\"createdTime\":1686401234000,\"updatedTime\":1686401234000,\"contributors\":[{\"name\":\"zhengtianqi\",\"email\":\"270490096@qq.com\",\"commits\":1}]},\"readingTime\":{\"minutes\":8.5,\"words\":2550},\"filePathRelative\":\"posts/spring/消息队列springboot-kafka.md\",\"localizedDate\":\"2022年10月29日\",\"excerpt\":\"<h1> 1、应用场景</h1>\\n<p>同时为发布和订阅提供高吞吐量、消息持久化、分布式功能、支持数据并行加载到Hadoop中</p>\\n<p>实际：\\n1、发布系统通知：如评论、点赞、关注这些事件发生后，可以把这些操作放入到kafka消息队列中，如果用户量一大直接操作数据库，服务器压力顶不住。所以把这些通知先存入kafka中，然后一个个消费掉。\\n2、一些项目数据同步问题也可以用到。\\n3、监测数据：分布式应用程序生成的统计数据集中聚合。\\n4、分布式：假设有系统B、C、D都需要系统A的数据\\n5、事件采集：其中状态的变化根据时间的顺序记录下来，kafka支持这种非常大的存储日志数据的场景。\\n如：日志收集、消息系统、活动追踪、运营指标、流式处理、热点点赞、评论、关注、发短信。</p>\",\"autoDesc\":true}")
