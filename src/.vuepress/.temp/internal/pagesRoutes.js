export const pagesRoutes = [
  ["v-184f4da6","/intro.html",{"d":1686401234000,"v":"/assets/images/cover3.jpg","e":"<h1> 介绍页</h1>\n<h2> 关于郑天祺</h2>\n<p><strong>郑天祺</strong>\n此站是郑天祺的个人站，记录分享学习平时学习，喜欢编程的小伙伴可以加我共同探讨，一起进步。</p>\n<h2> 微信</h2>\n<figure><img src=\"/assets/images/Wechat.jpg\" alt=\"image-wechat\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-wechat</figcaption></figure>\n","r":{"minutes":0.2,"words":61},"y":"a","t":"介绍页","i":"circle-info"},["/intro","/intro.md"]],
  ["v-8daa1a0e","/",{"y":"h","t":"博客主页","i":"home"},["/index.html","/README.md"]],
  ["v-009e1325","/posts/database/ElasticSearch%E5%AE%A2%E6%88%B7%E7%AB%AF.html",{"a":"郑天祺","d":1594811400000,"l":"2020年7月15日","c":["大数据",""],"g":["es"],"e":"<p>以下为springboot整合elasticsearch</p>\n<p>es版本为7.2.1</p>\n<h1> 1、先引入es的依赖</h1>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token constant\">ES</span>  <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>client<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>elasticsearch<span class=\"token operator\">-</span>rest<span class=\"token operator\">-</span>high<span class=\"token operator\">-</span>level<span class=\"token operator\">-</span>client<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">&gt;</span></span><span class=\"token number\">7.2</span><span class=\"token number\">.1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>elasticsearch<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">&gt;</span></span><span class=\"token number\">7.2</span><span class=\"token number\">.1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>client<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>elasticsearch<span class=\"token operator\">-</span>rest<span class=\"token operator\">-</span>client<span class=\"token operator\">-</span>sniffer<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">&gt;</span></span><span class=\"token number\">7.2</span><span class=\"token number\">.1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.03,"words":610},"y":"a","t":"ElasticSearch客户端"},["/posts/database/ElasticSearch客户端.html","/posts/database/ElasticSearch%E5%AE%A2%E6%88%B7%E7%AB%AF","/posts/database/ElasticSearch客户端.md","/posts/database/ElasticSearch%E5%AE%A2%E6%88%B7%E7%AB%AF.md"]],
  ["v-10802f86","/posts/database/ElasticSearch%E8%BF%91%E5%AE%9E%E6%97%B6%E6%80%A7%E4%BB%8B%E7%BB%8D.html",{"a":"郑天祺","d":1594810260000,"l":"2020年7月15日","c":["大数据"],"g":["es"],"e":"<p>​\t\tElasticsearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java语言开发的，并作为Apache许可条款下的开放源码发布，是一种流行的企业级搜索引擎。</p>\n<p>​\t\tElasticsearch 是一款功能强大的分布式搜索引擎，支持近实时的存储、搜索数据。</p>\n<p>​\t\tElasticsearch和磁盘之间是文件系统缓存，在内存索引缓冲区中的文档  会被写入到一个新的段中 ，但是这里新段会被先写入到文件系统缓存，这一步代价会比较低，稍后再被刷新到磁盘—这一步代价比较高。不过只要文件已经在缓存中， 就可以像其它文件一样被打开和读取了。</p>","r":{"minutes":1.79,"words":536},"y":"a","t":"ElasticSearch近实时性介绍"},["/posts/database/ElasticSearch近实时性介绍.html","/posts/database/ElasticSearch%E8%BF%91%E5%AE%9E%E6%97%B6%E6%80%A7%E4%BB%8B%E7%BB%8D","/posts/database/ElasticSearch近实时性介绍.md","/posts/database/ElasticSearch%E8%BF%91%E5%AE%9E%E6%97%B6%E6%80%A7%E4%BB%8B%E7%BB%8D.md"]],
  ["v-0f311d3e","/posts/database/HDFS-shell%E6%93%8D%E4%BD%9C%EF%BC%881%EF%BC%89.html",{"a":"郑天祺","d":1607255400000,"l":"2020年12月6日","c":["大数据"],"g":["hadoop"],"e":"<h2> 1、创建一个HDFS目录</h2>\n<p>命令：hdfs dfs -mkdir -p /usr/local/hadoop/data/txtdir</p>\n<p>截图：<img src=\"/assets/images/hdfs创建文件夹.png\" alt=\"image-20201206115218466\" loading=\"lazy\"></p>\n<h2> 2、本地文件上传到HDFS</h2>\n<p>本地创建文件a.txt,b.txt,c.txt上传到HDFS /usr/local/hadoop/data/txtdir</p>\n<p>命令：echo “I am student” &gt; a.txt</p>","r":{"minutes":0.79,"words":236},"y":"a","t":"HDFS shell操作（1）"},["/posts/database/HDFS-shell操作（1）.html","/posts/database/HDFS-shell%E6%93%8D%E4%BD%9C%EF%BC%881%EF%BC%89","/posts/database/HDFS-shell操作（1）.md","/posts/database/HDFS-shell%E6%93%8D%E4%BD%9C%EF%BC%881%EF%BC%89.md"]],
  ["v-690c877f","/posts/database/HDFS-shell%E6%93%8D%E4%BD%9C%EF%BC%882%EF%BC%89.html",{"a":"郑天祺","d":1607256120000,"l":"2020年12月6日","c":["大数据"],"g":["hadoop"],"e":"<p>a.创建学生成绩表，结果如下。</p>\n<p>Rowkey：id</p>\n<p>列族：info和course，course包括3个版本数据</p>\n<p>b.插入数据</p>\n<p>数据包括</p>\n<table>\n<thead>\n<tr>\n<th>学生学号</th>\n<th>Info</th>\n<th>course</th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>name</td>\n<td>age</td>\n<td>sex</td>\n<td>address</td>\n<td>Chinese</td>\n<td>math</td>\n<td>english</td>\n</tr>\n<tr>\n<td>95001</td>\n<td>Jom</td>\n<td>20</td>\n<td>男</td>\n<td>山东省济南市</td>\n<td>80</td>\n<td>85</td>\n<td>89</td>\n</tr>\n<tr>\n<td>95002</td>\n<td>Tom</td>\n<td>19</td>\n<td>男</td>\n<td>山东省济南市</td>\n<td>55，60</td>\n<td>80</td>\n<td>71</td>\n</tr>\n<tr>\n<td>95003</td>\n<td>Lily</td>\n<td>20</td>\n<td>女</td>\n<td>北京市</td>\n<td></td>\n<td>65</td>\n<td></td>\n</tr>\n</tbody>\n</table>","r":{"minutes":1.7,"words":511},"y":"a","t":"HBASE shell操作（2）"},["/posts/database/HDFS-shell操作（2）.html","/posts/database/HDFS-shell%E6%93%8D%E4%BD%9C%EF%BC%882%EF%BC%89","/posts/database/HDFS-shell操作（2）.md","/posts/database/HDFS-shell%E6%93%8D%E4%BD%9C%EF%BC%882%EF%BC%89.md"]],
  ["v-6129c42d","/posts/database/HDFS%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.html",{"a":"郑天祺","d":1576511220000,"l":"2019年12月16日","c":["大数据"],"g":["HDFS","HADOOP"],"e":"<h1> 一、读文件</h1>\n<p>​\tHDFS有一个文件系统实例，客户端通过调用这个实例的open()方法就可以打开系统中希望读取的文件。</p>\n<p>​\tHDFS通过RPC调用NameNode获取文件块的位置信息，对于文件的每一个块，NameNode会返回该块副本DataNode的节点地址。</p>\n<p>​\t另外，客户端还会根据网络拓扑来确定它与每一个DataNode的位置信息，从离它最近的那个DataNode获取数据块的副本，最理想的情况是数据块就储存在客户端所在的节点上。</p>\n<p>​\t具体过程：</p>\n<p>​\t<img src=\"/assets/images/hdfs-read-file.png\" alt=\"image-20191216155358635\" loading=\"lazy\"></p>","r":{"minutes":4.13,"words":1239},"y":"a","t":"HDFS文件操作"},["/posts/database/HDFS文件操作.html","/posts/database/HDFS%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C","/posts/database/HDFS文件操作.md","/posts/database/HDFS%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.md"]],
  ["v-518e86aa","/posts/database/HDFS%E6%A6%82%E8%BF%B0.html",{"a":"郑天祺","d":1576491000000,"l":"2019年12月16日","c":["大数据"],"g":["HDFS","HADOOP"],"e":"<p>本文权威指南读书笔记</p>\n<h1> 一、HDFS的设计前提和目标</h1>\n<p>​\t（1）存储大文件：HDFS支持GB级别大小的文件；</p>\n<p>​\t（2）流式数据访问：保证高吞吐量</p>\n<p>​\t（3）容错性：完善的冗余备份机制；</p>\n<p>​\t（4）简单的一致性模型：一次写入多次读取；</p>\n<p>​\t（5）移动计算优于移动数据：HDFS使应用计算移动到离他最近数据位置的接口；</p>\n<p>​\t（6）兼容各种硬件和软件平台。</p>\n<p>​\tHDFS不适合的场景：</p>\n<p>​\t（1）大量小文件：文件的元数据存储在NameNode内容中，大量小文件意味着元数据增加，会占用大量内存；</p>","r":{"minutes":4.94,"words":1483},"y":"a","t":"HDFS概述"},["/posts/database/HDFS概述.html","/posts/database/HDFS%E6%A6%82%E8%BF%B0","/posts/database/HDFS概述.md","/posts/database/HDFS%E6%A6%82%E8%BF%B0.md"]],
  ["v-d0b2db80","/posts/database/HiveQL%E8%A7%86%E5%9B%BE.html",{"a":"郑天祺","d":1579537620000,"l":"2020年1月21日","c":["大数据"],"g":["hive"],"e":"<p>​\t\t视图可以允许保存一个查询（并）像对待表一样对这个查询进行操作。（这是一个逻辑结构，因为它不像一个表会存储数据。</p>\n<h1> 一、使用视图来降低查询复杂度</h1>\n<p>​\t当查询长且复杂，通过使用视图将这个查询语句分割成多个小的、更可控的片段可以降低这种复杂度。</p>\n<p>例如：</p>\n<p>改进前：Hive 查询语句中含有多层嵌套</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token function\">FROM</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token constant\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token constant\">FROM</span> people <span class=\"token constant\">JOIN</span> cart <span class=\"token constant\">ON</span> <span class=\"token punctuation\">(</span>cart<span class=\"token punctuation\">.</span>people_id<span class=\"token operator\">=</span>people<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token class-name\">WHERE</span> firstname<span class=\"token operator\">=</span><span class=\"token char\">'john'</span>\n<span class=\"token punctuation\">)</span> a <span class=\"token constant\">SELECT</span> a<span class=\"token punctuation\">.</span>lastname <span class=\"token constant\">WHERE</span> a<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.8,"words":539},"y":"a","t":"HiveQL视图"},["/posts/database/HiveQL视图.html","/posts/database/HiveQL%E8%A7%86%E5%9B%BE","/posts/database/HiveQL视图.md","/posts/database/HiveQL%E8%A7%86%E5%9B%BE.md"]],
  ["v-3a9c347f","/posts/database/Hive%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89.html",{"a":"郑天祺","d":1579270680000,"l":"2020年1月17日","c":["大数据"],"g":["hive"],"e":"<h1> 一、Hive 与 Mysql不同</h1>\n<p>​\t\tHive不支持行级插入操作、更新操作和删除操作，</p>\n<p>​\t\tHive不支持事务。</p>\n<h1> 二、Hive中的数据库</h1>\n<p>Hive 中数据库的概念本质上仅仅是表的一个目录或者命名空间。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// 1、数据库目录为：</span>\nhive<span class=\"token punctuation\">.</span>metastore<span class=\"token punctuation\">.</span>warehouse<span class=\"token punctuation\">.</span>dir\n\n<span class=\"token comment\">// 2、创建数据库 ：</span>\n<span class=\"token constant\">CREATE</span> <span class=\"token class-name\">DATABASE</span> financials<span class=\"token punctuation\">;</span>    \n\n<span class=\"token comment\">// 3、已经存在则： </span>\n<span class=\"token constant\">CREATE</span> <span class=\"token constant\">DATABASE</span> <span class=\"token constant\">IF</span> <span class=\"token constant\">NOT</span> <span class=\"token class-name\">EXISTS</span> financials<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 4、查看数据库：</span>\n<span class=\"token class-name\">SHOW</span> <span class=\"token constant\">DATABASES</span><span class=\"token punctuation\">;</span>    <span class=\"token constant\">SHOW</span> <span class=\"token constant\">DATABASES</span> <span class=\"token constant\">LIKE</span> <span class=\"token char\">'f.*'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 5、修改默数据库位置：</span>\n<span class=\"token constant\">CREATE</span> <span class=\"token constant\">DATABASE</span> financials <span class=\"token constant\">LOCATION</span> '<span class=\"token operator\">/</span>my<span class=\"token operator\">/</span>preferred<span class=\"token operator\">/</span>directory'<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 6、切换工作数据库：</span>\n<span class=\"token class-name\">USE</span> financials<span class=\"token punctuation\">;</span>\n\n <span class=\"token punctuation\">(</span><span class=\"token class-name\">Hive</span> v0<span class=\"token punctuation\">.</span><span class=\"token number\">8.0</span>，可以修改当前工作数据库为默认数据库，set hive<span class=\"token punctuation\">.</span>cli<span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>db<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 7、删除数据库：</span>\n<span class=\"token constant\">DROP</span> <span class=\"token constant\">DATABASE</span> <span class=\"token constant\">IF</span> <span class=\"token class-name\">EXISTS</span> financials<span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.6,"words":780},"y":"a","t":"Hive数据定义"},["/posts/database/Hive数据定义.html","/posts/database/Hive%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89","/posts/database/Hive数据定义.md","/posts/database/Hive%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89.md"]],
  ["v-4eefe5a0","/posts/database/Hive%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C.html",{"a":"郑天祺","d":1579277460000,"l":"2020年1月18日","c":["大数据"],"g":["hive"],"e":"<h1> 一、加载数据</h1>\n<p>Hive 没有行级别的数据插入、数据更新和删除操作，那么网表中装载数据的唯一途径就是使用一种 “ 大量 ” 的数据装载操作。或者通过其他方式仅仅将文件写入到正确的目录下。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// OVERWRITE关键字换成INTO关键字的话，Hive将会以追加的方式写入数据而不会覆盖之前已经存在的内容</span>\n<span class=\"token constant\">LOAD</span> <span class=\"token constant\">DATA</span> <span class=\"token constant\">LOCAL</span> <span class=\"token constant\">INPATH</span> '$<span class=\"token punctuation\">{</span>env<span class=\"token operator\">:</span><span class=\"token constant\">HOME</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>california<span class=\"token operator\">-</span>employees'  \n<span class=\"token constant\">OVERWRITE</span> <span class=\"token constant\">INTO</span> <span class=\"token constant\">TABLE</span> employees\n<span class=\"token comment\">// 非分区表省略此行</span>\n<span class=\"token constant\">PARTITION</span> <span class=\"token punctuation\">(</span>country <span class=\"token operator\">=</span> <span class=\"token char\">'US'</span><span class=\"token punctuation\">,</span> state <span class=\"token operator\">=</span> <span class=\"token char\">'CA'</span><span class=\"token punctuation\">)</span>  \n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":4.01,"words":1203},"y":"a","t":"Hive数据操作（1）"},["/posts/database/Hive数据操作.html","/posts/database/Hive%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C","/posts/database/Hive数据操作.md","/posts/database/Hive%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C.md"]],
  ["v-0f9a80e9","/posts/database/Hive%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%EF%BC%882%EF%BC%89.html",{"a":"郑天祺","d":1579449000000,"l":"2020年1月19日","c":["大数据"],"g":["hive"],"e":"<p>Hive 中 SQL  JOIN 语句，只支持等值连接</p>\n<h1> 一、INNER JOIN</h1>\n<p>​\t内连接（INNER JOIN）中，只有进行连接的两个表中都存在于连接标准相匹配的数据才会被保留下来。不支持 &gt;= 等不相等匹配、ON子句中谓词之间不能使用OR。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// 苹果公司股价 AAPL   IBM股价IBM</span>\n<span class=\"token comment\">// ON子句指定了两个表间数据进行连接的条件</span>\n<span class=\"token comment\">// WHERE子句限制了左边表是AAPL的记录，右边表是IBM的记录</span>\n\nhive<span class=\"token operator\">&gt;</span> <span class=\"token constant\">SELECT</span> a<span class=\"token punctuation\">.</span>ymd<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>price_close<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>price_close\n\t<span class=\"token operator\">&gt;</span><span class=\"token constant\">FROM</span> stocks a <span class=\"token constant\">JOIN</span> stocks b <span class=\"token constant\">ON</span> a<span class=\"token punctuation\">.</span>ymd <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>ymd \n\t<span class=\"token operator\">&gt;</span><span class=\"token constant\">WHERE</span> a<span class=\"token punctuation\">.</span>symbol <span class=\"token operator\">=</span> <span class=\"token char\">'AAPL'</span> <span class=\"token constant\">AND</span> b<span class=\"token punctuation\">.</span>symbol <span class=\"token operator\">=</span> <span class=\"token char\">'IBM'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">2010</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">04</span>  <span class=\"token number\">214.01</span>  <span class=\"token number\">132.45</span>\n<span class=\"token number\">2010</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">05</span>  <span class=\"token number\">214.38</span>  <span class=\"token number\">130.85</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":4.89,"words":1468},"y":"a","t":"Hive数据操作（2）"},["/posts/database/Hive数据操作（2）.html","/posts/database/Hive%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%EF%BC%882%EF%BC%89","/posts/database/Hive数据操作（2）.md","/posts/database/Hive%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%EF%BC%882%EF%BC%89.md"]],
  ["v-6975eb2a","/posts/database/Hive%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%EF%BC%883%EF%BC%89.html",{"a":"郑天祺","d":1579530420000,"l":"2020年1月20日","c":["大数据"],"g":["hive"],"e":"<h1> 一、类型转换</h1>\n<p>​\t\t（1）cast() 函数，可以使用这个函数对指定的值进行显式的类型转换。</p>\n<p>例如：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// 当salary字段的值是不合法的浮点数字符串的话，Hive会返回NULL</span>\n<span class=\"token class-name\">SELECT</span> name<span class=\"token punctuation\">,</span> salary <span class=\"token constant\">FROM</span> employees <span class=\"token class-name\">WHERE</span> <span class=\"token function\">cast</span><span class=\"token punctuation\">(</span>salary <span class=\"token class-name\">AS</span> <span class=\"token constant\">FLOAT</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">100000.0</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.01,"words":602},"y":"a","t":"Hive数据操作（3）"},["/posts/database/Hive数据操作（3）.html","/posts/database/Hive%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%EF%BC%883%EF%BC%89","/posts/database/Hive数据操作（3）.md","/posts/database/Hive%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%EF%BC%883%EF%BC%89.md"]],
  ["v-3f344948","/posts/database/Hive%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F.html",{"a":"郑天祺","d":1579268460000,"l":"2020年1月17日","c":["大数据"],"g":["hive"],"e":"<h1> 一、基本数据类型</h1>\n<figure><img src=\"/assets/images/hive数据结构.png\" alt=\"image-20200117105348449\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20200117105348449</figcaption></figure>\n<figure><img src=\"/assets/images/hive数据结构1.png\" alt=\"image-20200117105505918\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20200117105505918</figcaption></figure>","r":{"minutes":1.98,"words":595},"y":"a","t":"Hive数据类型和文件格式"},["/posts/database/Hive数据类型和文件格式.html","/posts/database/Hive%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F","/posts/database/Hive数据类型和文件格式.md","/posts/database/Hive%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F.md"]],
  ["v-6148d7ca","/posts/database/Hive%E6%A8%A1%E5%BC%8F%E8%AE%BE%E8%AE%A1.html",{"a":"郑天祺","d":1579615740000,"l":"2020年1月21日","c":["大数据"],"g":["hive"],"e":"<h1> 一、分区</h1>\n<p>Hive 中分区的功能是非常有用的。因为通常要对输入进行全盘扫描，来满足查询条件。</p>\n<p>如：存储日志，log_2020_01_01、log_2020_01_02等</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code>hive<span class=\"token operator\">&gt;</span> <span class=\"token constant\">CREATE</span> <span class=\"token constant\">TABLE</span> \n\nhive<span class=\"token operator\">&gt;</span> <span class=\"token constant\">CREATE</span> <span class=\"token class-name\">TABLE</span> log_2020_01_01 <span class=\"token punctuation\">(</span>id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> part string<span class=\"token punctuation\">,</span> quantity <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhive<span class=\"token operator\">&gt;</span> <span class=\"token constant\">CREATE</span> <span class=\"token class-name\">TABLE</span> log_2020_01_02 <span class=\"token punctuation\">(</span>id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> part string<span class=\"token punctuation\">,</span> quantity <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhive<span class=\"token operator\">&gt;</span> <span class=\"token constant\">CREATE</span> <span class=\"token class-name\">TABLE</span> log_2020_01_04 <span class=\"token punctuation\">(</span>id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> part string<span class=\"token punctuation\">,</span> quantity <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nhive<span class=\"token operator\">&gt;</span> <span class=\"token class-name\">SELECT</span> part<span class=\"token punctuation\">,</span>quantity log_2020_01_01\n    <span class=\"token operator\">&gt;</span> <span class=\"token constant\">UNION</span> <span class=\"token constant\">ALL</span>\n    <span class=\"token operator\">&gt;</span> <span class=\"token class-name\">SELECT</span> part<span class=\"token punctuation\">,</span>quantity from log_2020_01_04\n    <span class=\"token operator\">&gt;</span> <span class=\"token constant\">WHERE</span> quantity <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.3,"words":989},"y":"a","t":"Hive模式设计"},["/posts/database/Hive模式设计.html","/posts/database/Hive%E6%A8%A1%E5%BC%8F%E8%AE%BE%E8%AE%A1","/posts/database/Hive模式设计.md","/posts/database/Hive%E6%A8%A1%E5%BC%8F%E8%AE%BE%E8%AE%A1.md"]],
  ["v-a21f62e0","/posts/database/Hive%E7%B4%A2%E5%BC%95.html",{"a":"郑天祺","d":1579604340000,"l":"2020年1月21日","c":["大数据"],"g":["hive"],"e":"<p>​\t\tHive没有键的概念，可以对一些字段建立索引来加速某些操作，一张表的索引储存在另外一张表中。EXPLAIN命令可以查看某个查询语句是否用到了索引。</p>\n<h1> 一、建索引语法</h1>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// 定义表</span>\n<span class=\"token constant\">CREATE</span> <span class=\"token class-name\">TABLE</span> <span class=\"token function\">employees</span><span class=\"token punctuation\">(</span>\nname <span class=\"token constant\">STRING</span><span class=\"token punctuation\">,</span>\nsalary <span class=\"token constant\">FLOAT</span><span class=\"token punctuation\">,</span>\nsubordinates <span class=\"token constant\">ARRAY</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>STRING<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span>\ndeductions <span class=\"token constant\">MAP</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>STRING<span class=\"token punctuation\">,</span> FLOAT<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span>\naddress <span class=\"token constant\">STRUCT</span><span class=\"token operator\">&lt;</span>street<span class=\"token operator\">:</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">,</span> city<span class=\"token operator\">:</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">,</span> state<span class=\"token operator\">:</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">,</span> zip<span class=\"token operator\">:</span><span class=\"token constant\">INT</span><span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">PARTITIONED</span> <span class=\"token constant\">BY</span> <span class=\"token punctuation\">(</span>country <span class=\"token constant\">STRING</span><span class=\"token punctuation\">,</span> state <span class=\"token constant\">STRING</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 分区：hdfs://xxx/2020/02/20/xx</span>\n\n<span class=\"token comment\">// 建立索引,仅对字段country建立索引 </span>\n<span class=\"token constant\">CREATE</span> <span class=\"token constant\">INDEX</span> employees_index\n<span class=\"token constant\">ON</span> <span class=\"token class-name\">TABLE</span> <span class=\"token function\">employees</span><span class=\"token punctuation\">(</span>country<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// AS ... 指定索引处理器</span>\n<span class=\"token constant\">AS</span> '<span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>hive<span class=\"token punctuation\">.</span>ql<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">.</span>compact<span class=\"token punctuation\">.</span></span>CompactIndexHandler</span>'\n<span class=\"token constant\">WITH</span> <span class=\"token constant\">DEFERRED</span> <span class=\"token class-name\">REBUILD</span>\n<span class=\"token function\">IDXPROPERTIES</span><span class=\"token punctuation\">(</span>'creator<span class=\"token char\">' = '</span>me<span class=\"token char\">', '</span>created_at<span class=\"token char\">' = '</span>some_time'<span class=\"token punctuation\">)</span>\n<span class=\"token constant\">IN</span> <span class=\"token constant\">TABLE</span> employees_index_table\n<span class=\"token class-name\">PARTITIONED</span> <span class=\"token constant\">BY</span> <span class=\"token punctuation\">(</span>country<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token constant\">COMMENT</span> '<span class=\"token class-name\">Employees</span> indexed by country and name<span class=\"token punctuation\">.</span>'\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.19,"words":357},"y":"a","t":"Hive索引"},["/posts/database/Hive索引.html","/posts/database/Hive%E7%B4%A2%E5%BC%95","/posts/database/Hive索引.md","/posts/database/Hive%E7%B4%A2%E5%BC%95.md"]],
  ["v-12693d7d","/posts/database/Hive%E8%B0%83%E4%BC%98.html",{"a":"郑天祺","d":1579625280000,"l":"2020年1月22日","c":["大数据"],"g":["hive"],"e":"<h1> 一、使用EXPLAIN</h1>\n<p>​\t\t查看逻辑，更多用 EXPLAIN EXTENDED</p>\n<h1> 二、限制调整LIMIT</h1>\n<h1> 三、JOIN优化</h1>\n<p>​\t\t表足够小用map-side JOIN</p>\n<h1> 四、本地模式</h1>\n<p>​\t对于小数据集，单机或单线程执行时间比较短</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code>hive<span class=\"token operator\">&gt;</span> set oldjobtracker<span class=\"token operator\">=</span>$<span class=\"token punctuation\">{</span>hiveconf<span class=\"token punctuation\">.</span>mapred<span class=\"token punctuation\">.</span>job<span class=\"token punctuation\">.</span>tracker<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nhive<span class=\"token operator\">&gt;</span> set mapred<span class=\"token punctuation\">.</span>job<span class=\"token punctuation\">.</span>tracker<span class=\"token operator\">=</span>local<span class=\"token punctuation\">;</span>\nhive<span class=\"token operator\">&gt;</span> set mapred<span class=\"token punctuation\">.</span>tmp<span class=\"token punctuation\">.</span>dir<span class=\"token operator\">=</span><span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>edward<span class=\"token operator\">/</span>tmp\nhive<span class=\"token operator\">&gt;</span> <span class=\"token constant\">SELECT</span> <span class=\"token operator\">*</span> from people <span class=\"token class-name\">WHERE</span> firstname<span class=\"token operator\">=</span>bob<span class=\"token punctuation\">;</span>\nhive<span class=\"token operator\">&gt;</span> set mapred<span class=\"token punctuation\">.</span>job<span class=\"token punctuation\">.</span>tracker<span class=\"token operator\">=</span>$<span class=\"token punctuation\">{</span>oldjobtracker<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.61,"words":182},"y":"a","t":"Hive调优"},["/posts/database/Hive调优.html","/posts/database/Hive%E8%B0%83%E4%BC%98","/posts/database/Hive调优.md","/posts/database/Hive%E8%B0%83%E4%BC%98.md"]],
  ["v-3a09eea1","/posts/database/MapReduce%E5%B9%B3%E5%9D%87%E6%95%B0%E8%AE%A1%E7%AE%97.html",{"a":"郑天祺","d":1607256840000,"l":"2020年12月6日","c":["大数据"],"g":["hadoop"],"e":"<h2> 1、建立三个文档</h2>\n<figure><img src=\"/assets/images/image-20201206121627187.png\" alt=\"image-20201206121627187\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20201206121627187</figcaption></figure>\n<figure><img src=\"/assets/images/image-20201206121650739.png\" alt=\"image-20201206121650739\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20201206121650739</figcaption></figure>","r":{"minutes":0.93,"words":279},"y":"a","t":"MapReduce平均数计算"},["/posts/database/MapReduce平均数计算.html","/posts/database/MapReduce%E5%B9%B3%E5%9D%87%E6%95%B0%E8%AE%A1%E7%AE%97","/posts/database/MapReduce平均数计算.md","/posts/database/MapReduce%E5%B9%B3%E5%9D%87%E6%95%B0%E8%AE%A1%E7%AE%97.md"]],
  ["v-7eedf06f","/posts/database/MapReduce%E6%A6%82%E8%BF%B0.html",{"a":"郑天祺","d":1576516380000,"l":"2019年12月17日","c":["大数据"],"g":["HADOOP"],"e":"<h1> 一、基本模型</h1>\n<p>​\tMapReduce采取了分而治之的基本思想，将一个大的作业分解成若干小的任务，提交给集群的多台计算机处理，这样就大大提高了完成作业的效率。</p>\n<p>​\t在Hadoop平台上，MapReduce框架负责处理并行编程中分布式存储、工作调度、负载均衡、容错及网络通信等复杂工作，把处理过程高度抽象为两个函数：Map 和 Reduce。</p>\n<p>​\tMap负责把作业分解成多个任务，Reduce负责把分解后多任务处理的结果汇总起来。</p>\n<p>其中：</p>\n<p>​\t执行MapReduce作业的机器角色由两个：JobTracker 和 TaskTracker</p>","r":{"minutes":3.37,"words":1011},"y":"a","t":"MapReduce概述"},["/posts/database/MapReduce概述.html","/posts/database/MapReduce%E6%A6%82%E8%BF%B0","/posts/database/MapReduce概述.md","/posts/database/MapReduce%E6%A6%82%E8%BF%B0.md"]],
  ["v-8e71288c","/posts/database/Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E4%BB%A5%E5%9B%BE%E6%90%9C%E5%9B%BE.html",{"a":"ztq","d":1667917680000,"l":"2022年11月8日","c":["数据库"],"g":["向量数据库","Milvus"],"e":"<h1> 一、介绍</h1>\n<p>Milvus 创建于 2019 年，其目标只有一个：存储、索引和管理由深度神经网络和其他机器学习 （ML） 模型生成的大量嵌入向量。\n作为专门设计用于处理对输入向量的查询的数据库，它能够以万亿级对向量进行索引。与现有关系数据库主要按照预定义模式处理结构化数据不同，Milvus 是自下而上设计的，用于处理从非结构化数据转换的嵌入向量。</p>\n<p>随着互联网的发展和发展，非结构化数据变得越来越普遍，包括电子邮件、论文、物联网传感器数据、Facebook 照片、蛋白质结构等等。为了使计算机理解和处理非结构化数据，使用嵌入技术将这些数据转换为向量。Milvus 存储并索引这些向量。Milvus 能够通过计算两个向量的相似距离来分析它们之间的相关性。如果两个嵌入向量非常相似，则意味着原始数据源也相似。\n<img src=\"/assets/images/milvus1.png\" alt=\"img\" loading=\"lazy\">\n来源：\n<a href=\"https://milvus.io/docs/v2.1.x/overview.md\" target=\"_blank\" rel=\"noopener noreferrer\">https://milvus.io/docs/v2.1.x/overview.md</a></p>","r":{"minutes":6.52,"words":1955},"y":"a","t":"Milvus向量数据库之以图搜图"},["/posts/database/Milvus向量数据库之以图搜图.html","/posts/database/Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E4%BB%A5%E5%9B%BE%E6%90%9C%E5%9B%BE","/posts/database/Milvus向量数据库之以图搜图.md","/posts/database/Milvus%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E4%BB%A5%E5%9B%BE%E6%90%9C%E5%9B%BE.md"]],
  ["v-2b508b84","/posts/database/MinIO%E5%8D%95%E6%9C%BA%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8.html",{"a":"ztq","d":1647986100000,"l":"2022年3月23日","c":["数据库"],"g":["分布式存储"],"e":"<p>一、简介</p>\n<p>​\t\tMinIO 是在 GNU Affero 通用公共许可证 v3.0 下发布的高性能对象存储。它与 Amazon S3 云存储服务 API 兼容。使用 MinIO 为机器学习、分析和应用程序数据工作负载构建高性能基础架构。</p>\n<p>相关文档：</p>\n<p>官方文档：<a href=\"https://docs.min.io/docs/minio-quickstart-guide.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.min.io/docs/minio-quickstart-guide.html</a></p>","r":{"minutes":3.94,"words":1181},"y":"a","t":"MinIO单机安装以及使用"},["/posts/database/MinIO单机安装以及使用.html","/posts/database/MinIO%E5%8D%95%E6%9C%BA%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8","/posts/database/MinIO单机安装以及使用.md","/posts/database/MinIO%E5%8D%95%E6%9C%BA%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8.md"]],
  ["v-0e578957","/posts/database/mybatis-plus%E6%8F%92%E4%BB%B6%E7%BB%9F%E4%B8%80%E5%A4%84%E7%90%86createTime%EF%BC%8CcreateBy%EF%BC%8CupdateBy.html",{"a":"ztq","d":1681723680000,"l":"2023年4月17日","c":["数据库"],"g":["mybatis"],"e":"<p>一、添加注解\n先添加注解，有四种方式：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">FieldFill</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">INSERT</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">UPDATE</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">INSERT_UPDATE</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.29,"words":386},"y":"a","t":"mybatis-plus插件统一处理createTime，createBy，updateBy"},["/posts/database/mybatis-plus插件统一处理createTime，createBy，updateBy.html","/posts/database/mybatis-plus%E6%8F%92%E4%BB%B6%E7%BB%9F%E4%B8%80%E5%A4%84%E7%90%86createTime%EF%BC%8CcreateBy%EF%BC%8CupdateBy","/posts/database/mybatis-plus插件统一处理createTime，createBy，updateBy.md","/posts/database/mybatis-plus%E6%8F%92%E4%BB%B6%E7%BB%9F%E4%B8%80%E5%A4%84%E7%90%86createTime%EF%BC%8CcreateBy%EF%BC%8CupdateBy.md"]],
  ["v-0554738e","/posts/database/mysql%E4%BA%8B%E5%8A%A1.html",{"a":"郑天祺","d":1595324520000,"l":"2020年7月21日","c":["数据库"],"g":["mysql"],"e":"<h1> 1、介绍</h1>\n<p>​\t\t一个数据库事务通常包含对数据库进行读或写的一个操作序列：</p>\n<p>​\t\t（1）为数据库操作提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持一致性的方法。\n​\t\t（2）当多个应用程序在并发访问数据库时，可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰。</p>\n<p>​\t\t并非任意的对数据库的操作序列都是数据库事务。事务应该具有4个属性：原子性、一致性、隔离性、持久性。这四个属性通常称为ACID特性。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code>原子性（<span class=\"token class-name\">Atomicity</span>）：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。\n一致性（<span class=\"token class-name\">Consistency</span>）：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应满足完整性约束。\n隔离性（<span class=\"token class-name\">Isolation</span>）：多个事务并发执行时，一个事务的执行不应影响其他事务的执行。\n持久性（<span class=\"token class-name\">Durability</span>）：一个事务一旦提交，他对数据库的修改应该永久保存在数据库中。\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":5.59,"words":1678},"y":"a","t":"mysql事务"},["/posts/database/mysql事务.html","/posts/database/mysql%E4%BA%8B%E5%8A%A1","/posts/database/mysql事务.md","/posts/database/mysql%E4%BA%8B%E5%8A%A1.md"]],
  ["v-369ebcf4","/posts/database/mysql%E6%8E%92%E5%BA%8F.html",{"a":"郑天祺","d":1574282100000,"l":"2019年11月21日","c":["数据库"],"g":["mysql"],"e":"<h1> 1、正常的数字排序</h1>\n<figure><img src=\"/assets/images/mysql排序1.png\" alt=\"image-20191120204232822\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20191120204232822</figcaption></figure>\n<h1> 2、排序中文时</h1>\n<p>，就是出现问题</p>\n<figure><img src=\"/assets/images/mysql排序2.png\" alt=\"image-20191120204352223\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20191120204352223</figcaption></figure>","r":{"minutes":1.32,"words":396},"y":"a","t":"mysql排序"},["/posts/database/mysql排序.html","/posts/database/mysql%E6%8E%92%E5%BA%8F","/posts/database/mysql排序.md","/posts/database/mysql%E6%8E%92%E5%BA%8F.md"]],
  ["v-68529b50","/posts/database/mysql%E7%AA%81%E7%84%B6%E5%8F%98%E6%85%A2%E6%8E%92%E6%9F%A5.html",{"a":"ztq","d":1634382120000,"l":"2021年10月16日","c":["数据库"],"g":["mysql"],"e":"<h1> 一、查看当前Mysql所有的进程</h1>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code>show full processlist<span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h1> 二、查看Mysql的最大缓存</h1>","r":{"minutes":4.67,"words":1401},"y":"a","t":"mysql突然变慢排查"},["/posts/database/mysql突然变慢排查.html","/posts/database/mysql%E7%AA%81%E7%84%B6%E5%8F%98%E6%85%A2%E6%8E%92%E6%9F%A5","/posts/database/mysql突然变慢排查.md","/posts/database/mysql%E7%AA%81%E7%84%B6%E5%8F%98%E6%85%A2%E6%8E%92%E6%9F%A5.md"]],
  ["v-44cd2c90","/posts/database/mysql%E7%AE%80%E5%8D%95%E4%B8%BB%E4%BB%8E%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B.html",{"a":"ztq","d":1649719920000,"l":"2022年4月12日","c":["数据库"],"g":["mysql"],"e":"<h1> 一、mysql集群介绍</h1>\n<p><a href=\"https://juejin.cn/post/6985187754493607966\" target=\"_blank\" rel=\"noopener noreferrer\">MySql集群简介-告诉你为什么要用集群部署 - 掘金 (juejin.cn)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/102798762\" target=\"_blank\" rel=\"noopener noreferrer\">MySQL高可用集群方案 - 知乎 (zhihu.com)</a></p>\n","r":{"minutes":1.41,"words":424},"y":"a","t":"mysql简单主从搭建过程"},["/posts/database/mysql简单主从搭建过程.html","/posts/database/mysql%E7%AE%80%E5%8D%95%E4%B8%BB%E4%BB%8E%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B","/posts/database/mysql简单主从搭建过程.md","/posts/database/mysql%E7%AE%80%E5%8D%95%E4%B8%BB%E4%BB%8E%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B.md"]],
  ["v-56c522dd","/posts/database/mysql%E8%A1%A8%E8%AE%BE%E8%AE%A1%E5%8F%8A%E4%BC%98%E5%8C%96.html",{"a":"郑天祺","d":1567265280000,"l":"2019年8月31日","c":["数据库"],"g":["mysql"],"e":"<h2> 一、一些建议</h2>\n<p>建议来自《MYSQL 王者晋级之路》，本文做些笔记</p>\n<p>1）在创建业务表时，库名、表名、字段名必须使用小写字母，采用 “_” 分割。</p>\n<p>2）MySQL数据库中，通过lower_case_table_names参数来区别表名的大小写，默认为0，代表大小写敏感。如果是1，代表大小写不敏感，以小写存储。为字段选取数据类型时，要秉承着简单、够用的原则。表中的字段和索引数量都不宜过多，要保证SQL语句查询的高效性，快速执行完，避免出现堵塞、排队现象。</p>\n<p>3）表的存储引擎一定要选择使用InnoDB。MySQL 5.7基本已经废弃 MyISAM，8.0后彻底废弃。</p>","r":{"minutes":18.22,"words":5467},"y":"a","t":"mysql表设计及优化"},["/posts/database/mysql表设计及优化.html","/posts/database/mysql%E8%A1%A8%E8%AE%BE%E8%AE%A1%E5%8F%8A%E4%BC%98%E5%8C%96","/posts/database/mysql表设计及优化.md","/posts/database/mysql%E8%A1%A8%E8%AE%BE%E8%AE%A1%E5%8F%8A%E4%BC%98%E5%8C%96.md"]],
  ["v-44ec5644","/posts/database/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%80%EF%BC%89-%E9%93%BE%E8%A1%A8.html",{"a":"ztq","d":1642954680000,"l":"2022年1月24日","c":["数据库"],"g":["redis"],"e":"<p>链表提供了高效的节点重排能力，以及顺序性的节点访问方式，并且可以通过增删节点来灵活地调整链表的长度。</p>\n<p>作为一种常用数据结构，链表内置在很多高级的编程语言里面，因为 Redis 使用的 C 语言并没有内置这种数据结构，所以 Redis 构建了自己的链表实现。</p>\n<p>链表在 Redis 中的应用非常广泛，比如列表键的底层实现之一就是链表：当一个列表键包含了数量比较多的元素，又或者列表中包含的元素都是比较长的字符串时，Redis 就会使用链表作为列表键的底层实现。</p>\n<p>举个例子，以下展示的 <code>integers</code> 列表键包含了从 <code>1</code> 到 <code>1024</code> 共一千零二十四个整数：</p>","r":{"minutes":4.18,"words":1254},"y":"a","t":"Redis数据结构与对象（二）-链表"},["/posts/database/Redis数据结构与对象（一）-链表.html","/posts/database/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%80%EF%BC%89-%E9%93%BE%E8%A1%A8","/posts/database/Redis数据结构与对象（一）-链表.md","/posts/database/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%80%EF%BC%89-%E9%93%BE%E8%A1%A8.md"]],
  ["v-4c7466b4","/posts/database/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%89%EF%BC%89-%E5%AD%97%E5%85%B8.html",{"a":"ztq","d":1643126280000,"l":"2022年1月25日","c":["数据库"],"g":["redis"],"e":"<h2> 字典的实现</h2>\n<p>Redis 的字典使用哈希表作为底层实现，一个哈希表里面可以有多个哈希表节点，而每个哈希表节点就保存了字典中的一个键值对。</p>\n<p>接下来的三个小节将分别介绍 Redis 的哈希表、哈希表节点、以及字典的实现。</p>\n<h2> 哈希表</h2>\n<p>Redis 字典所使用的哈希表由 <code>dict.h/dictht</code> 结构定义：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code>typedef struct dictht <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 哈希表数组</span>\n    dictEntry <span class=\"token operator\">*</span><span class=\"token operator\">*</span>table<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 哈希表大小</span>\n    unsigned <span class=\"token keyword\">long</span> size<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 哈希表大小掩码，用于计算索引值</span>\n    <span class=\"token comment\">// 总是等于 size - 1</span>\n    unsigned <span class=\"token keyword\">long</span> sizemask<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 该哈希表已有节点的数量</span>\n    unsigned <span class=\"token keyword\">long</span> used<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> dictht<span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":4.82,"words":1445},"y":"a","t":"Redis数据结构与对象（三）-字典"},["/posts/database/Redis数据结构与对象（三）-字典.html","/posts/database/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%89%EF%BC%89-%E5%AD%97%E5%85%B8","/posts/database/Redis数据结构与对象（三）-字典.md","/posts/database/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%89%EF%BC%89-%E5%AD%97%E5%85%B8.md"]],
  ["v-c29db88e","/posts/database/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E6%A6%82%E5%BF%B5%E7%AF%87.html",{"a":"ztq","d":1662399360000,"l":"2022年9月6日","c":["数据库"],"g":["分库分表"],"e":"<h1> 一、分库分表来历</h1>\n<p>当硬件达到瓶颈无法提升，通过把数据分散到不同的数据库中，使得单一数据库的数据量变小来缓解单一数据库的性能问题，从而达到提升数据库性能的目的。\n比如：将电商数据库拆分为若干独立的数据库，并且对于大表来说也拆分为若干小表，通过这种数据库拆分的方法来解决数据库的性能问题。\n分库分表的目的就是为了解决由于数据量过而导致数据库性能降低的问题，将原来独立的数据库拆分为若干数据库组成，将数据大表拆分成若干数据表，使得单一数据库、单一数据表的数据量变小，从而达到提升数据库性能的目的。</p>\n<h1> 二、 方式</h1>\n<p>分库分表的方式在生产中通常包括：垂直分库、垂直分表、水平分库和水平分表四种。</p>","r":{"minutes":6.09,"words":1827},"y":"a","t":"分库分表概念篇"},["/posts/database/分库分表概念篇.html","/posts/database/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E6%A6%82%E5%BF%B5%E7%AF%87","/posts/database/分库分表概念篇.md","/posts/database/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E6%A6%82%E5%BF%B5%E7%AF%87.md"]],
  ["v-7824978a","/posts/database/%E5%88%9D%E8%AF%86redis%EF%BC%881%EF%BC%89.html",{"a":"ztq","d":1627735740000,"l":"2021年7月31日","c":["数据库"],"g":["redis"],"e":"<h1> 1、Redis数据结构介绍</h1>\n<p>（1）STRING</p>\n<p>​\t\tvalue：可以是字符串、整数或者浮点数</p>\n<p>​\t\toperate：对整个字符串或者字符串的其中一部分执行操作；对整数和浮点数执行自增（increment）或者自减(decrement)操作</p>\n<p>（2）LIST</p>\n<p>​\t\tvalue：一个链表，链表上的每个节点都包含了—个字符串</p>\n<p>​\t\toperate：从链表的两端推入或者弹出元素;根据偏移量对链表进行修剪(trim)；读取单个或者多个元素;根据值查找或者移除元素</p>\n<p>（3）SET</p>\n<p>​\t\tvalue：包含字符串的无序收集器( unordered collection)，并且被包含的每个字符串都是独一无二、各不相同的</p>","r":{"minutes":7.63,"words":2289},"y":"a","t":"初识redis（1）-数据结构"},["/posts/database/初识redis（1）.html","/posts/database/%E5%88%9D%E8%AF%86redis%EF%BC%881%EF%BC%89","/posts/database/初识redis（1）.md","/posts/database/%E5%88%9D%E8%AF%86redis%EF%BC%881%EF%BC%89.md"]],
  ["v-5bfffc6a","/posts/database/%E5%88%9D%E8%AF%86redis%EF%BC%882%EF%BC%89.html",{"a":"ztq","d":1627855680000,"l":"2021年8月2日","c":["数据库"],"g":["redis"],"e":"<h1> 1、排序</h1>\n<p>​\t\tRedis 的排序操作和其他编程语言的排序操作一样，都可以根据某种比较规则对一系列元素进行有序的排列。负责执行排序操作的SORT命令可以根据字符串、列表、集合、有序集合、散列这5种键里面存储着的数据，对列表、集合以及有序集合进行排序。如果读者之前曾经使用过关系数据库的话，那么可以将SORT命令看作是SQL语言里的order by子句。</p>\n<p>SORT source-key [BY pattern] [LIMIT offset count] [GET pattern [GETpattern ...] ] [ASC|DESC] [ALPHA] [STORE dest-key] 根据给定的选项，对输入列表、集合或者有序集合进行排序，然后返回或者存储排序的结果</p>","r":{"minutes":2.94,"words":881},"y":"a","t":"初识redis（2）-基本特性"},["/posts/database/初识redis（2）.html","/posts/database/%E5%88%9D%E8%AF%86redis%EF%BC%882%EF%BC%89","/posts/database/初识redis（2）.md","/posts/database/%E5%88%9D%E8%AF%86redis%EF%BC%882%EF%BC%89.md"]],
  ["v-2c13bb28","/posts/database/%E5%88%9D%E8%AF%86redis%EF%BC%883%EF%BC%89-%E6%8C%81%E4%B9%85%E5%8C%96.html",{"a":"ztq","d":1627857780000,"l":"2021年8月2日","c":["数据库"],"g":["redis"],"e":"<h1> 1、Redis 数据持久化概念</h1>\n<p>Redis 的数据持久化，即：将内存中的数据存储到硬盘（本文中亦称之为 “落地”）。Redis 提供了 RDB 和 AOF 两种持久化的方法：\n•\tRDB：基于特定的时间间隔将数据 “全量快照”，生成 RDB 文件并落地\n•\tAOF (Append Only File)：将 Redis 接收到命令以 “增量追加” 的方式，写入 AOF 文件\nRedis 允许使用任意一种持久化方法，亦允许同时使用或同时不使用。以下将阐述两者涉及的配置选项、命令以及优缺点。</p>\n<h1> 2、RDB 与 AOF 优缺点和选择</h1>\n<p>RDB\n•\t非常适合于备份以及灾难恢复的场景\n•\t能够最大化 Redis 性能\n•\t相对于 AOF，RDB 文件在 Redis 启动时能够更快加载\n•\t若期望将数据丢失的可能性最小化，RDB 并不适用\nAOF\n•\t基于 “追加” 和 “文件同步” 的特性，AOF 具有更佳的 “持久化” 表现\n•\t对于相同的数据，AOF 文件大小通常将超过 RDB\n综合而言，如果能够承担一定程度的数据丢失风险，仅启用 RDB 持久化即可。但并不建议只启用 AOF 持久化，毕竟 RDB 文件更适合于数据备份。\n若 RDB 持久化和 AOF 持久化同时启用，Redis 启动时，将加载 AOF 文件，毕竟 AOF 具有更佳的 “持久化” 表现。</p>","r":{"minutes":4.45,"words":1335},"y":"a","t":"初识redis（3）-持久化"},["/posts/database/初识redis（3）-持久化.html","/posts/database/%E5%88%9D%E8%AF%86redis%EF%BC%883%EF%BC%89-%E6%8C%81%E4%B9%85%E5%8C%96","/posts/database/初识redis（3）-持久化.md","/posts/database/%E5%88%9D%E8%AF%86redis%EF%BC%883%EF%BC%89-%E6%8C%81%E4%B9%85%E5%8C%96.md"]],
  ["v-997da1a6","/posts/database/%E5%88%9D%E8%AF%86redis%EF%BC%884%EF%BC%89-%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84.html",{"a":"ztq","d":1627863180000,"l":"2021年8月2日","c":["数据库"],"g":["redis"],"e":"<h1> 1、Redis “主 - 从” 机制</h1>\n<p>Redis 提供 “主 - 从” 的数据复制：“从” Redis 即作为 “主” Redis 的数据副本。“从” Redis，既能够用于读性能的扩展，亦能够作为数据备份的一种手段。</p>\n<p>同时，Redis 支持 <a href=\"https://redis.io/topics/sentinel\" target=\"_blank\" rel=\"noopener noreferrer\">Redis Sentinel</a>，实现 “主 - 从” 监控、故障迁移，限于篇幅，本文不予以展开。</p>\n<h1> 2、工作机制</h1>\n","r":{"minutes":2.47,"words":741},"y":"a","t":"初识redis（4）-主从架构"},["/posts/database/初识redis（4）-主从架构.html","/posts/database/%E5%88%9D%E8%AF%86redis%EF%BC%884%EF%BC%89-%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84","/posts/database/初识redis（4）-主从架构.md","/posts/database/%E5%88%9D%E8%AF%86redis%EF%BC%884%EF%BC%89-%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84.md"]],
  ["v-61cafd0d","/posts/database/%E5%88%9D%E8%AF%86redis%EF%BC%885%EF%BC%89-%E5%86%85%E5%AD%98%E8%B0%83%E4%BC%98.html",{"a":"ztq","d":1627863240000,"l":"2021年8月2日","c":["数据库"],"g":["redis"],"e":"<h1> 1、优化 Redis 内存使用</h1>\n<p>合理的 Redis 实例，内存的占有量不应当超过 60%，当内存使用率过高时，应该予以清理及优化。</p>\n<h1> 2、使用 ziplist &amp; intset</h1>\n<h2> ziplist 优化机制</h2>\n<p>ziplist 实现了 “紧凑” 的数据结构，通过尽可能减少非数据节点的占用，以提供内存密度。</p>\n<figure><img src=\"/assets/images/image-20210802000308665.png\" alt=\"image-20210802000308665\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20210802000308665</figcaption></figure>","r":{"minutes":4.25,"words":1275},"y":"a","t":"初识redis（5）-内存调优"},["/posts/database/初识redis（5）-内存调优.html","/posts/database/%E5%88%9D%E8%AF%86redis%EF%BC%885%EF%BC%89-%E5%86%85%E5%AD%98%E8%B0%83%E4%BC%98","/posts/database/初识redis（5）-内存调优.md","/posts/database/%E5%88%9D%E8%AF%86redis%EF%BC%885%EF%BC%89-%E5%86%85%E5%AD%98%E8%B0%83%E4%BC%98.md"]],
  ["v-ff5aa5a6","/posts/DevOps/DNS.html",{"a":"郑天祺","d":1595347020000,"l":"2020年7月21日","c":["网络"],"g":["DNS"],"e":"<h1> 1、介绍</h1>\n<p>​\t\t在互联网中是用IP来标识一台服务器的。IP地址虽然能够代表一台设备，但是由于记忆起来比较困难，所以将其替换成一个能够理解和识别的名字，这个名字我们称作为域名。</p>\n<p>​\t\t在域名后面会定义一个IP地址用来指向网站服务器。DNS负责域名到IP地址的对应。</p>\n<p>​\t\tDNS 是域名系统(Domain Name System，缩写：DNS)是互联网的一项服务。它将域名和IP地址相互映射的一个分布式数据库，在数据库中保存域名与IP的对照关系，从而使人更方便地访问互联网。</p>\n<p>​\t\tDNS解析是分布式存储的，从结构上来说最顶层是，根域名服务器(ROOT DNS Server)，存储260个顶级域名服务器的IP地址。对于Ipv4来说全球有13个根域名服务器，它储存了每个域(<a href=\"http://xn--bvs.com\" target=\"_blank\" rel=\"noopener noreferrer\">如.com</a> .net .cn)的解析和域名服务器的地址信息。简单的说，根域名服务器就是存放顶级域名服务器地址的。</p>","r":{"minutes":5.43,"words":1628},"y":"a","t":"DNS"},["/posts/DevOps/DNS","/posts/DevOps/DNS.md"]],
  ["v-6ac2d27a","/posts/DevOps/docker20-10-7%E6%9C%AC%E6%9C%BA%E5%BC%80%E5%90%AF2375%E9%85%8D%E7%BD%AE.html",{"a":"ztq","d":1626635880000,"l":"2021年7月19日","c":["CICD"],"g":["docker"],"e":"<h1> 1、安装docker</h1>\n<h2> （1）安装Gcc</h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code>yum <span class=\"token operator\">-</span>y install gcc\nyum <span class=\"token operator\">-</span>y install gcc<span class=\"token operator\">-</span>c<span class=\"token operator\">++</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.67,"words":500},"y":"a","t":"docker本机打镜像"},["/posts/DevOps/docker20-10-7本机开启2375配置.html","/posts/DevOps/docker20-10-7%E6%9C%AC%E6%9C%BA%E5%BC%80%E5%90%AF2375%E9%85%8D%E7%BD%AE","/posts/DevOps/docker20-10-7本机开启2375配置.md","/posts/DevOps/docker20-10-7%E6%9C%AC%E6%9C%BA%E5%BC%80%E5%90%AF2375%E9%85%8D%E7%BD%AE.md"]],
  ["v-074faff6","/posts/DevOps/Docker%E5%85%A5%E9%97%A8.html",{"a":"郑天祺","d":1607951580000,"l":"2020年12月14日","c":["CICD"],"g":["docker"],"e":"<h2> docker概念</h2>\n<p>​\t\tdocker和虚拟机VM结构非常相似，但是docker并非虚拟机技术，容器除了运行其中的应用之外，基本不消耗额外的系统资源，虚拟机需要单独分配 独占内存、磁盘等资源；\n​\t\tdocker最初的设计优势，正是它比虚拟机更节省内存，启动更快。Docker不停地给大家宣传，”虚拟机需要数分钟启动，而Docker容器只需要50毫秒”。</p>\n<figure><img src=\"/assets/images/image-20201214131527522.png\" alt=\"image-20201214131527522\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20201214131527522</figcaption></figure>","r":{"minutes":4.66,"words":1399},"y":"a","t":"Docker入门"},["/posts/DevOps/Docker入门.html","/posts/DevOps/Docker%E5%85%A5%E9%97%A8","/posts/DevOps/Docker入门.md","/posts/DevOps/Docker%E5%85%A5%E9%97%A8.md"]],
  ["v-439970e4","/posts/DevOps/Docker%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.html",{"a":"ztq","d":1662038760000,"l":"2022年9月1日","c":["CICD"],"g":["docker"],"e":"<p>Docker虚拟化技术底层是基于LXC+Cgroups+AUFS（Overlay）技术实现，而我们有熟知Cgroups是Linux内核提供的一种可以限制、记录、隔离进程组（Process Groups）所使用的物理资源的机制。\nDocker虚拟化的产物是Docker容器，基于Docker Engine启动容器时，默认会给容器指定和分配各种子系统：CPU子系统、Memory子系统、IO子系统、NET子系统等。\n启动一个容器，会分配Network Namespace（子系统）提供了一份独立的网络环境，包括网卡、路由、Iptables规则等，容器跟其他容器的Network Namespace是相互隔离的。\n通过Docker run创建Docker容器时，可以使用–net选项指定Docker容器的网络模式，Docker默认有四种网络模式：</p>","r":{"minutes":7.36,"words":2209},"y":"a","t":"Docker网络模型"},["/posts/DevOps/Docker网络模型.html","/posts/DevOps/Docker%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B","/posts/DevOps/Docker网络模型.md","/posts/DevOps/Docker%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.md"]],
  ["v-5a6aceaf","/posts/DevOps/docker%E9%95%9C%E5%83%8F%E9%83%A8%E7%BD%B2%E5%88%B0k8s%E9%9B%86%E7%BE%A4.html",{"a":"ztq","d":1649712000000,"l":"2022年4月12日","c":["CICD"],"g":["k8s","docker"],"e":"<h1> 一、搭建docker私有仓库</h1>\n<p>本文使用阿里云私有仓库（个人免费版），阿里云---&gt;容器镜像服务</p>\n<figure><img src=\"/assets/images/image-20220411212506831.png\" alt=\"image-20220411212506831\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20220411212506831</figcaption></figure>\n<h1> 二、docker打包</h1>\n<p>1、程序目录</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code>ll\n    \n<span class=\"token operator\">-</span>rw<span class=\"token operator\">-</span>r<span class=\"token operator\">--</span>r<span class=\"token operator\">--</span> <span class=\"token number\">1</span> root root      <span class=\"token number\">872</span> <span class=\"token number\">4</span>月  <span class=\"token number\">11</span> <span class=\"token number\">22</span><span class=\"token operator\">:</span><span class=\"token number\">03</span> dockerfile\n<span class=\"token operator\">-</span>rw<span class=\"token operator\">-</span>r<span class=\"token operator\">--</span>r<span class=\"token operator\">--</span> <span class=\"token number\">1</span> root root     <span class=\"token number\">8678</span> <span class=\"token number\">4</span>月  <span class=\"token number\">11</span> <span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">53</span> jdk<span class=\"token operator\">-</span><span class=\"token number\">8</span>u251<span class=\"token operator\">-</span>linux<span class=\"token operator\">-</span>x64<span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">.</span>gz\n<span class=\"token operator\">-</span>rw<span class=\"token operator\">-</span>r<span class=\"token operator\">--</span>r<span class=\"token operator\">--</span> <span class=\"token number\">1</span> root root <span class=\"token number\">75306958</span> <span class=\"token number\">4</span>月  <span class=\"token number\">11</span> <span class=\"token number\">21</span><span class=\"token operator\">:</span><span class=\"token number\">47</span> ruoyi<span class=\"token punctuation\">.</span>jar\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":5.05,"words":1516},"y":"a","t":"docker镜像部署到k8s集群"},["/posts/DevOps/docker镜像部署到k8s集群.html","/posts/DevOps/docker%E9%95%9C%E5%83%8F%E9%83%A8%E7%BD%B2%E5%88%B0k8s%E9%9B%86%E7%BE%A4","/posts/DevOps/docker镜像部署到k8s集群.md","/posts/DevOps/docker%E9%95%9C%E5%83%8F%E9%83%A8%E7%BD%B2%E5%88%B0k8s%E9%9B%86%E7%BE%A4.md"]],
  ["v-059090ba","/posts/DevOps/k8s%E6%9E%84%E5%BB%BAELK%E6%97%A5%E5%BF%97%E5%B9%B3%E5%8F%B0.html",{"a":"ztq","d":1618324800000,"l":"2021年4月13日","c":["CICD",""],"g":["k8s","elk"],"e":"<h1> k8s构建ELK日志平台</h1>\n<h2> Pod中附加专用日志收集的容器</h2>\n<h1> 一、概述</h1>\n<p>目前主流日志收集系统为：Filebeat + ELK，本文尝试使用该系统对k8s里部署的Pod进行日志收集并加以图形可视化展示；</p>\n<p>日志收集方案设计图</p>\n<figure><img src=\"/assets/images/70db7f87.jpg\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>\n<h1> 二、优缺点</h1>\n<p>每个预应用程序的Pod中增加一个日志收集容器，使用emptyDir共享日志目录，让日志收集程序能够读取到。</p>","r":{"minutes":5.07,"words":1521},"y":"a","t":"k8s构建ELK日志平台"},["/posts/DevOps/k8s构建ELK日志平台.html","/posts/DevOps/k8s%E6%9E%84%E5%BB%BAELK%E6%97%A5%E5%BF%97%E5%B9%B3%E5%8F%B0","/posts/DevOps/k8s构建ELK日志平台.md","/posts/DevOps/k8s%E6%9E%84%E5%BB%BAELK%E6%97%A5%E5%BF%97%E5%B9%B3%E5%8F%B0.md"]],
  ["v-37b39ec5","/posts/DevOps/k8s%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA.html",{"a":"ztq","d":1649108520000,"l":"2022年4月5日","c":["CICD"],"g":["k8s"],"e":"<h2> 1. 安装要求</h2>\n<p>在开始之前，部署Kubernetes集群机器需要满足以下几个条件：</p>\n<ul>\n<li>一台或多台机器，操作系统 CentOS7.x-86_x64</li>\n<li>硬件配置：2GB或更多RAM，2个CPU或更多CPU，硬盘30GB或更多</li>\n<li>可以访问外网，需要拉取镜像，如果服务器不能上网，需要提前下载镜像并导入节点</li>\n<li>禁止swap分区</li>\n<li>docker和k8s保持官网一致的版本，否则有报错</li>\n</ul>\n<h2> 2. 准备环境</h2>\n<table>\n<thead>\n<tr>\n<th>角色</th>\n<th>IP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>master</td>\n<td>192.168.2.145</td>\n</tr>\n<tr>\n<td>node1</td>\n<td>192.168.2.146</td>\n</tr>\n<tr>\n<td>node2</td>\n<td>192.168.2.147</td>\n</tr>\n</tbody>\n</table>","r":{"minutes":2.54,"words":761},"y":"a","t":"k8s集群搭建"},["/posts/DevOps/k8s集群搭建.html","/posts/DevOps/k8s%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA","/posts/DevOps/k8s集群搭建.md","/posts/DevOps/k8s%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA.md"]],
  ["v-ae9e19a4","/posts/DevOps/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8F%8A%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B2-%E4%B8%89.html",{"a":"ztq","d":1668594960000,"l":"2022年11月16日","c":["CICD"],"g":["运维"],"e":"<p>本文介绍了MYSQL安装</p>\n<h1> 一、卸载mariadb</h1>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code># 查看 mariadb 的安装包\nrpm <span class=\"token operator\">-</span>qa <span class=\"token operator\">|</span> grep mariadb\n# 卸载 mariadb 的安装包\nrpm <span class=\"token operator\">-</span>e mariadb<span class=\"token operator\">-</span>libs<span class=\"token operator\">-</span><span class=\"token number\">5.5</span><span class=\"token number\">.68</span><span class=\"token operator\">-</span><span class=\"token number\">1.</span>el7<span class=\"token punctuation\">.</span>x86_64 <span class=\"token operator\">--</span>nodeps\n# 再次查看\nrpm <span class=\"token operator\">-</span>qa <span class=\"token operator\">|</span> grep mariadb\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":7.25,"words":2176},"y":"a","t":"软件安装及高可用部署(三)"},["/posts/DevOps/软件安装及高可用部署-三.html","/posts/DevOps/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8F%8A%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B2-%E4%B8%89","/posts/DevOps/软件安装及高可用部署-三.md","/posts/DevOps/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8F%8A%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B2-%E4%B8%89.md"]],
  ["v-1fad5f26","/posts/DevOps/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8F%8A%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B2-%E4%BA%8C.html",{"a":"ztq","d":1668591660000,"l":"2022年11月16日","c":["CICD"],"g":["运维"],"e":"<p>本文介绍了Nginx安装</p>\n<h1> 一、修改主机名</h1>\n<p>以 nginx-master 为例，修改所有服务器的对应的主机名。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code>vim <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>hostname\n# 删除所有的内容，修改为要修改的主机名\nnginx01\nvim <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span>hosts\n#在第一行最后追加主机名，有<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>内容的这行\n<span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span> localhost localhost<span class=\"token punctuation\">.</span>localdomain localhost4 localhost4<span class=\"token punctuation\">.</span>localdomain4\nnginx01\n# 重启服务器\nreboot\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.74,"words":823},"y":"a","t":"软件安装及高可用部署(二)"},["/posts/DevOps/软件安装及高可用部署-二.html","/posts/DevOps/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8F%8A%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B2-%E4%BA%8C","/posts/DevOps/软件安装及高可用部署-二.md","/posts/DevOps/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8F%8A%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B2-%E4%BA%8C.md"]],
  ["v-28bbcd58","/posts/DevOps/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8F%8A%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B2-%E5%9B%9B.html",{"a":"ztq","d":1668595020000,"l":"2022年11月16日","c":["CICD"],"g":["运维"],"e":"<p>本文介绍了redis安装</p>\n<h1> 一、下载</h1>\n<p>官网下载需要安装版本redis，下载地址\n<a href=\"https://redis.io/download\" target=\"_blank\" rel=\"noopener noreferrer\">https://redis.io/download</a>\n<a href=\"http://download.redis.io/releases/\" target=\"_blank\" rel=\"noopener noreferrer\">http://download.redis.io/releases/</a>  (所有版本)</p>","r":{"minutes":4.81,"words":1442},"y":"a","t":"软件安装及高可用部署(四)"},["/posts/DevOps/软件安装及高可用部署-四.html","/posts/DevOps/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8F%8A%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B2-%E5%9B%9B","/posts/DevOps/软件安装及高可用部署-四.md","/posts/DevOps/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8F%8A%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B2-%E5%9B%9B.md"]],
  ["v-a75e0f00","/posts/DevOps/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8F%8A%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B2.html",{"a":"ztq","d":1668165900000,"l":"2022年11月11日","c":["CICD"],"g":["运维"],"e":"<p>本文介绍了磁盘挂载、JDK安装、Keepalived安装</p>\n<h1> 一、硬盘挂载</h1>\n<h2> （1）查看设备的挂载情况</h2>\n<p>lsblk或lsblk –f或者fdisk -l\n<img src=\"/assets/images/bushu1.png\" alt=\"img\" loading=\"lazy\">\n<img src=\"/assets/images/bushu2.png\" alt=\"img\" loading=\"lazy\"></p>\n<h2> （2）分区</h2>\n<p>fdisk /dev/vdb   其中/dev/vdb表示上图未挂载的硬盘\n分区步骤如下图，下图以/dev/sdb为例\n<img src=\"/assets/images/bushu3.png\" alt=\"img\" loading=\"lazy\">\n<img src=\"/assets/images/bushu4.png\" alt=\"img\" loading=\"lazy\">\n<img src=\"/assets/images/bushu5.png\" alt=\"img\" loading=\"lazy\"></p>","r":{"minutes":1.52,"words":456},"y":"a","t":"软件安装及高可用部署(一)"},["/posts/DevOps/软件安装及高可用部署.html","/posts/DevOps/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8F%8A%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B2","/posts/DevOps/软件安装及高可用部署.md","/posts/DevOps/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8F%8A%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B2.md"]],
  ["v-1fd5a678","/posts/distributed/%E5%88%86%E5%B8%83%E5%BC%8FCAP%E6%A6%82%E5%BF%B5.html",{"a":"郑天祺","d":1607953620000,"l":"2020年12月14日","c":["分布式"],"g":["CAP"],"e":"<p>​\t\t2000年7月，加州大学伯克利分校的Eric Brewer教授ACM PODC会议上提出CAP猜想。两年后，麻省理工学院的seth Gilbert和Nancy Lynch从理论上证明了CAP。之后，CAP理论正式成为分布式计算领域的公认理论。(理论是有时间期限的，没有绝对意义上的公理，是相对于目前计算机科学水平)；</p>\n<h2> CAP原理概述</h2>\n<p>​      一个分布式系统最多只能同时满足一致性(consistency)、可用性(Availability)、分区容错性(Partition tolerance)的两个</p>\n<figure><img src=\"/assets/images/image-20201214134902337.png\" alt=\"image-20201214134902337\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20201214134902337</figcaption></figure>","r":{"minutes":10.92,"words":3276},"y":"a","t":"分布式CAP概念"},["/posts/distributed/分布式CAP概念.html","/posts/distributed/%E5%88%86%E5%B8%83%E5%BC%8FCAP%E6%A6%82%E5%BF%B5","/posts/distributed/分布式CAP概念.md","/posts/distributed/%E5%88%86%E5%B8%83%E5%BC%8FCAP%E6%A6%82%E5%BF%B5.md"]],
  ["v-046c70dc","/posts/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%A8%E5%B1%80%E5%94%AF%E4%B8%80ID%E7%94%9F%E6%88%90%E7%AD%96%E7%95%A5.html",{"a":"郑天祺","d":1570622400000,"l":"2019年10月9日","c":["分布式"],"g":["分布式"],"e":"<h1> 一、需求</h1>\n<p>在复杂分布式系统中，往往需要对大量的数据和消息进行唯一标识。</p>\n<p>当需要将节点之间在不同时间的交互做唯一标识，数据日渐增长，</p>\n<p>对数据库的分库分表后需要有一个唯一ID来标识一条数据或消息，数据库的自增ID显然不能满足需求。</p>\n<p>此时一个能够生成全局唯一ID的系统是非常必要的。</p>\n<h1> 二、ID生成的原则：</h1>\n<p>1、全局唯一性：不能出现重复的ID（最基本的要求）</p>\n<p>2、高性能，低延迟。（不要太繁杂的算法）</p>\n<p>3、易于存储，（占用较低的空间）</p>\n<h1> 三、相对应的算法：</h1>","r":{"minutes":5.43,"words":1630},"y":"a","t":"分布式全局唯一ID生成策略"},["/posts/distributed/分布式全局唯一ID生成策略.html","/posts/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%A8%E5%B1%80%E5%94%AF%E4%B8%80ID%E7%94%9F%E6%88%90%E7%AD%96%E7%95%A5","/posts/distributed/分布式全局唯一ID生成策略.md","/posts/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%A8%E5%B1%80%E5%94%AF%E4%B8%80ID%E7%94%9F%E6%88%90%E7%AD%96%E7%95%A5.md"]],
  ["v-89fe1148","/posts/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html",{"a":"ztq","d":1618750800000,"l":"2021年4月18日","c":["分布式"],"g":["分布式锁"],"e":"<h1> 1、什么是分布式锁？</h1>\n<p>​\t\t当多个进程在同一个系统中，用分布式锁控制多个进程对资源的访问。传统的单体应用单机部署情况下，可以使用java并发处理相关的API进行互斥控制。分布式系统后由于多线程，多进程分布在不同机器上，使单机部署情况下的并发控制锁策略失效，为了解决跨JVM互斥机制来控制共享资源的访问，这就是分布式锁的来源；分布式锁应用场景大都是高并发、大流量场景。</p>\n<h1> 2、分布式锁实现</h1>\n<h2> （1）、redis分布式锁的实现</h2>\n<ol>\n<li>\n<p>加锁机制：根据hash节点选择一个客户端执行lua脚本</p>\n</li>\n<li>\n<p>锁互斥机制：再来一个客户端执行同样的lua脚本会提示已经存在锁，然后进入循环一直尝试加锁</p>\n</li>\n<li>\n<p>可重入机制</p>\n</li>\n<li>\n<p>watch dog自动延期机制</p>\n</li>\n<li>\n<p>释放锁机制</p>\n</li>\n</ol>","r":{"minutes":18.74,"words":5622},"y":"a","t":"分布式锁"},["/posts/distributed/分布式锁.html","/posts/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81","/posts/distributed/分布式锁.md","/posts/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.md"]],
  ["v-377c8284","/posts/java/AtomicInteger.html",{"a":"郑天祺","d":1595605920000,"l":"2020年7月24日","c":["面试"],"g":["java基础"],"e":"<h1> 1、介绍</h1>\n<p>AtomicInteger属于JUC并发包下的原子类，继承关系如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AtomicInteger</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Number</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","r":{"minutes":6.23,"words":1870},"y":"a","t":"AtomicInteger"},["/posts/java/AtomicInteger","/posts/java/AtomicInteger.md"]],
  ["v-e024eca0","/posts/java/BigDecimal.html",{"a":"ztq","d":1670426340000,"l":"2022年12月7日","c":["java基础"],"g":["BigDecimal"],"e":"<h1> 1、介绍</h1>\n<p>Java在java.math包中提供的API类BigDecimal，用来对超过16位有效位的数进行精确的运算。双精度浮点型变量double可以处理16位有效数，但在实际应用中，可能需要对更大或者更小的数进行运算和处理。\n一般情况下，对于那些不需要准确计算精度的数字，我们可以直接使用Float和Double处理，但是Double.valueOf(String) 和Float.valueOf(String)会丢失精度。所以开发中，如果我们需要精确计算的结果，则必须使用BigDecimal类来操作。\nBigDecimal所创建的是对象，故我们不能使用传统的+、-、*、/等算术运算符直接对其对象进行数学运算，而必须调用其相对应的方法。方法中的参数也必须是BigDecimal的对象。构造器是类的特殊方法，专门用来创建对象，特别是带有参数的对象。</p>","r":{"minutes":4.97,"words":1491},"y":"a","t":"BigDecimal"},["/posts/java/BigDecimal","/posts/java/BigDecimal.md"]],
  ["v-30d3aaa4","/posts/java/CountDownLatch.html",{"a":"ztq","d":1628342700000,"l":"2021年8月7日","c":["java基础"],"g":["java"],"e":"<h1> 1、CountDownLatch简介</h1>\n<p>​\t\tCountDownLatch是一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待，直到其他线程执行完后再执行。</p>\n<p>​\t\t类似的任务可以使用线程的  join()  方法实现：在等待时间点调用其他线程的  join()  方法，当前线程就会等待join线程执行完之后才继续执行，但 CountDownLatch 实现更加简单，并且比 join 的功能更多。</p>\n<p>CountDownLatch函数列表</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span>\n构造一个用给定计数初始化的 <span class=\"token class-name\">CountDownLatch</span>。\n\n<span class=\"token comment\">// 使当前线程在锁存器倒计数至零之前一直等待，除非线程被中断。</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 使当前线程在锁存器倒计数至零之前一直等待，除非线程被中断或超出了指定的等待时间。</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 递减锁存器的计数，如果计数到达零，则释放所有等待的线程。</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 返回当前计数。</span>\n<span class=\"token keyword\">long</span> <span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 返回标识此锁存器及其状态的字符串。</span>\n<span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.21,"words":964},"y":"a","t":"CountDownLatch"},["/posts/java/CountDownLatch","/posts/java/CountDownLatch.md"]],
  ["v-fa81f68e","/posts/java/Disruptor.html",{"a":"ztq","d":1618323420000,"l":"2021年4月13日","c":["分布式"],"g":["Disruptor"],"e":"<h1> <a href=\"https://github.com/LMAX-Exchange/disruptor\" target=\"_blank\" rel=\"noopener noreferrer\">disruptor</a></h1>\n<p>------高性能的线程间消息传递框架</p>\n<h2> 介绍：</h2>\n<p>Disruptor类似于java的BlockingQueue。与队列一样，Disruptor的目的是在同一进程内的线程之间传递数据。</p>\n<p>但是，Disruptor提供了与队列不同的关键功能：</p>\n<p>1、同一个“事件”可以有多个消费者，消费者之间既可以并行处理，也可以相互依赖形成处理的先后次序(形成一个依赖图)</p>","r":{"minutes":9.4,"words":2820},"y":"a","t":"Disruptor"},["/posts/java/Disruptor","/posts/java/Disruptor.md"]],
  ["v-74c989ca","/posts/java/Disruptor%E4%B8%AD%E5%8F%91%E5%B8%83%E4%BA%8B%E4%BB%B6%E7%9B%B8%E5%85%B3%E7%B1%BB.html",{"a":"ztq","d":1618324020000,"l":"2021年4月13日","c":["分布式"],"g":["Disruptor"],"e":"<h3> Disruptor中发布事件相关类</h3>\n<h4> RingBuffer、EventFactory</h4>\n<p>EventFactory：提供给RingBuffer做事件预填充</p>\n<p>Event事件：</p>\n<p>1、从生产者到消费者过程中所处理的数据单元；</p>\n<p>2、在Disruptor框架中没有类表示Event，因为它完全是由用户定义的，在Disruptor框架中是用泛型表示的；</p>\n<h3> Disruptor中的等待策略</h3>\n<h4> WaitStrategy</h4>\n<p>等待策略的接口</p>\n<h4> BlockingWaitStrategy</h4>","r":{"minutes":7.13,"words":2139},"y":"a","t":"Disruptor中发布事件相关类"},["/posts/java/Disruptor中发布事件相关类.html","/posts/java/Disruptor%E4%B8%AD%E5%8F%91%E5%B8%83%E4%BA%8B%E4%BB%B6%E7%9B%B8%E5%85%B3%E7%B1%BB","/posts/java/Disruptor中发布事件相关类.md","/posts/java/Disruptor%E4%B8%AD%E5%8F%91%E5%B8%83%E4%BA%8B%E4%BB%B6%E7%9B%B8%E5%85%B3%E7%B1%BB.md"]],
  ["v-7fc656df","/posts/java/GET%E4%B8%8EPOST%E5%8C%BA%E5%88%AB.html",{"a":"郑天祺","d":1595320140000,"l":"2020年7月21日","c":["网络"],"g":["GET/POST"],"e":"<h1> 1、介绍</h1>\n<p>​\t\t最常用的利用GET和POST请求后端数据。GET和POST是HTTP与服务器交互的方式，交互方式还有DELETE、PUT、HEAD、OPTIONS、CONNECT等。</p>\n<p>​\t先看看GET和POST的样貌：</p>\n<h2> GET请求</h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token constant\">GET</span> <span class=\"token operator\">/</span>empty_project<span class=\"token operator\">/</span>inde<span class=\"token punctuation\">.</span>jsp <span class=\"token constant\">HTTP</span><span class=\"token operator\">/</span><span class=\"token number\">1.1</span>\n  <span class=\"token class-name\">Host</span><span class=\"token operator\">:</span> localhost<span class=\"token operator\">:</span><span class=\"token number\">8088</span>\n  <span class=\"token class-name\">Connection</span><span class=\"token operator\">:</span> keep<span class=\"token operator\">-</span>alive\n  <span class=\"token class-name\">Upgrade</span><span class=\"token operator\">-</span><span class=\"token class-name\">Insecure</span><span class=\"token operator\">-</span><span class=\"token class-name\">Requests</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token class-name\">User</span><span class=\"token operator\">-</span><span class=\"token class-name\">Agent</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Mozilla</span><span class=\"token operator\">/</span><span class=\"token number\">5.0</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Windows</span> <span class=\"token constant\">NT</span> <span class=\"token number\">6.1</span><span class=\"token punctuation\">;</span> <span class=\"token constant\">WOW64</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">AppleWebKit</span><span class=\"token operator\">/</span><span class=\"token number\">537.36</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">KHTML</span><span class=\"token punctuation\">,</span> like <span class=\"token class-name\">Gecko</span><span class=\"token punctuation\">)</span>       <span class=\"token class-name\">Chrome</span><span class=\"token operator\">/</span><span class=\"token number\">55.0</span><span class=\"token number\">.2883</span><span class=\"token number\">.87</span> <span class=\"token class-name\">Safari</span><span class=\"token operator\">/</span><span class=\"token number\">537.36</span>\n  <span class=\"token class-name\">Accept</span><span class=\"token operator\">:</span> text<span class=\"token operator\">/</span>html<span class=\"token punctuation\">,</span>application<span class=\"token operator\">/</span>xhtml<span class=\"token operator\">+</span>xml<span class=\"token punctuation\">,</span>application<span class=\"token operator\">/</span>xml<span class=\"token punctuation\">;</span>q<span class=\"token operator\">=</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span>image<span class=\"token operator\">/</span>webp<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span><span class=\"token comment\">/*;q=0.8\n  Accept-Encoding: gzip, deflate, sdch, br\n  Accept-Language: zh-CN,zh;q=0.8\n  Cookie: pgv_pvi=4403687424\n</span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.98,"words":1194},"y":"a","t":"GET与POST区别"},["/posts/java/GET与POST区别.html","/posts/java/GET%E4%B8%8EPOST%E5%8C%BA%E5%88%AB","/posts/java/GET与POST区别.md","/posts/java/GET%E4%B8%8EPOST%E5%8C%BA%E5%88%AB.md"]],
  ["v-216ba257","/posts/java/Git%E6%A2%B3%E7%90%86.html",{"a":"郑天祺","d":1567074480000,"l":"2019年8月29日","c":["软件管理"],"g":["git"],"e":"<h2> 1、Git介绍：</h2>\n<pre><code>Git是目前世界上最先进的分布式版本控制系统。gitlab是公司搭建的代码版本控制平台，使用方法与github类似，项目负责人在gitlab上新建一个项目，并分享URL给开发人员。开发人员在负责人的gitlab项目页面上点\n\n击“fork”按钮，将此项目fork到自己的gitlab上，这相当于是从负责人那拷贝了一份项目副本，无论开发人员如何修改代码都不会影响负责人那master分支上的代码。然后开发人员可以根据自己的项目分工，像对待普通项\n\n目一样做clone、add、commit、push等操作。如果开发人员人为一个小模块做好了，可以点击“pull request”按钮，向负责人发送代码合并请求，要合并的代码文件也会以列表的形式同时发送给负责人，此时负责人会看到\n</code></pre>","r":{"minutes":8.45,"words":2535},"y":"a","t":"Git梳理"},["/posts/java/Git梳理.html","/posts/java/Git%E6%A2%B3%E7%90%86","/posts/java/Git梳理.md","/posts/java/Git%E6%A2%B3%E7%90%86.md"]],
  ["v-1c6d7040","/posts/java/Hash%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81%E7%9A%84%E6%96%B9%E6%B3%95.html",{"a":"郑天祺","d":1600434120000,"l":"2020年9月18日","c":["面试"],"g":["哈希表"],"e":"<h1> 1、什么是hash表</h1>\n<p>​\t\t散列表（hash table，也叫哈希表），是根据关键码值（key value）而直接进行访问的数据结构。</p>\n<p>​\t\t也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫 散列函数，存放记录的数组叫做散列表。</p>\n<p>​\t\t给定表M，存在函数f（key），对于任意给定的关键字值 key，代入函数后若能得到包含改关键字的记录在表中的地址，则称表M为哈希（hash）表，函数 f（key）为哈希（hash）函数。</p>\n<h1> 2、hash冲突</h1>\n<p>​\t\t对应不同的关键字可能获得相同的 hash 地址，即 key1 ≠ key2，但是f（key1） = f（key2）。这种现象就是冲突，而且这种冲突只能尽可能的减少，不能完全避免。</p>","r":{"minutes":2.76,"words":827},"y":"a","t":"Hash解决冲突的方法"},["/posts/java/Hash解决冲突的方法.html","/posts/java/Hash%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81%E7%9A%84%E6%96%B9%E6%B3%95","/posts/java/Hash解决冲突的方法.md","/posts/java/Hash%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81%E7%9A%84%E6%96%B9%E6%B3%95.md"]],
  ["v-1d4d0eae","/posts/java/HttpClient.html",{"a":"郑天祺","d":1594833120000,"l":"2020年7月16日","c":["网络"],"g":["httpclient"],"e":"<h1> 1、HttpClient介绍</h1>\n<p>​\t\tHTTP 协议可能是现在 Internet 上使用得最多、最重要的协议了，越来越多的 Java 应用程序需要直接通过 HTTP 协议来访问网络资源。</p>\n<p>​\t\t虽然在 JDK 的 java net包中已经提供了访问 HTTP 协议的基本功能，但是对于大部分应用程序来说，JDK 库本身提供的功能还不够丰富和灵活。</p>\n<p>​\t\tHttpClient 是Apache HttpComponents 下的子项目，用来提供高效的、最新的、功能丰富的支持 HTTP 协议的客户端编程工具包，并且它支持 HTTP 协议最新的版本和建议。HttpClient已经应用在很多的项目中，并支持HTTPS协议。</p>","r":{"minutes":5.72,"words":1716},"y":"a","t":"HttpClient"},["/posts/java/HttpClient","/posts/java/HttpClient.md"]],
  ["v-69273b25","/posts/java/Http%E5%92%8CHttps%E7%9A%84%E5%8C%BA%E5%88%AB.html",{"a":"郑天祺","d":1599822660000,"l":"2020年9月11日","c":["网络"],"g":["https"],"e":"<h1> 一、基本概念</h1>\n<h2> 1、HTTP</h2>\n<p>​    HyperText Transfer Protocol：超文本传输协议，是一种用于分布式、协作式和超媒体信息系统的应用层协议。 简单来说就是一种发布和接收 HTML 页面的方法，被用于在 Web 浏览器和网站服务器之间传递信息。</p>\n<p>​    HTTP 默认工作在 TCP 协议 80 端口，用户访问网站 http:// 打头的都是标准 HTTP 服务。</p>\n<p>​    HTTP 协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，HTTP协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。</p>","r":{"minutes":4.41,"words":1323},"y":"a","t":"Http和Https的区别"},["/posts/java/Http和Https的区别.html","/posts/java/Http%E5%92%8CHttps%E7%9A%84%E5%8C%BA%E5%88%AB","/posts/java/Http和Https的区别.md","/posts/java/Http%E5%92%8CHttps%E7%9A%84%E5%8C%BA%E5%88%AB.md"]],
  ["v-7e41bf2e","/posts/java/IOC%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8F%8D%E5%B0%84%E6%AD%A5%E9%AA%A4.html",{"a":"郑天祺","d":1599988920000,"l":"2020年9月13日","c":["spring"],"g":["spring"],"e":"<h1> 1、controller</h1>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>bjut<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>bjut<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>bjut<span class=\"token punctuation\">.</span>base<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserService</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserService</span> userService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserService</span> <span class=\"token function\">getUserService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> userService<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUserService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserService</span> userService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userService <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.63,"words":190},"y":"a","t":"IOC中的基本反射步骤"},["/posts/java/IOC中的基本反射步骤.html","/posts/java/IOC%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8F%8D%E5%B0%84%E6%AD%A5%E9%AA%A4","/posts/java/IOC中的基本反射步骤.md","/posts/java/IOC%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8F%8D%E5%B0%84%E6%AD%A5%E9%AA%A4.md"]],
  ["v-e815bbd8","/posts/java/ip%E5%9C%B0%E5%9D%80%E4%B8%8E%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81%E6%8D%A2%E7%AE%97%E5%85%AC%E5%BC%8F.html",{"a":"ztq","d":1651749120000,"l":"2022年5月5日","c":["网络"],"g":["ip","子网掩码"],"e":"<p>​\t\t熟练的掌握ip地址可以减少项目中出错的概率与提升工作的效率</p>\n<h1> 一、首先要明确一些概念</h1>\n<h2> 类范围</h2>\n<p>IP地址常采用点分十进制表示方法X.Y.Y.Y，在这里</p>\n<p>X=1~126时称为A类地址，</p>\n<p>X=128~191时称为B类地址，</p>\n<p>X=192~223时称为C类地址。</p>\n<p>如10.202.52.130 因为X=10在1~126范围内所以称为A类地址</p>\n<h2> 类默认子网掩</h2>\n<p>A类为255.0.0.0</p>\n<p>B类为255.255.0.0</p>\n<p>C类为255.255.255.0</p>","r":{"minutes":7.17,"words":2150},"y":"a","t":"ip地址与子网掩码换算公式"},["/posts/java/ip地址与子网掩码换算公式.html","/posts/java/ip%E5%9C%B0%E5%9D%80%E4%B8%8E%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81%E6%8D%A2%E7%AE%97%E5%85%AC%E5%BC%8F","/posts/java/ip地址与子网掩码换算公式.md","/posts/java/ip%E5%9C%B0%E5%9D%80%E4%B8%8E%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81%E6%8D%A2%E7%AE%97%E5%85%AC%E5%BC%8F.md"]],
  ["v-4c8eb189","/posts/java/java8%E6%96%B0%E7%89%B9%E6%80%A7.html",{"a":"郑天祺","d":1573741080000,"l":"2019年11月14日","c":["java基础"],"g":["JDK1.8新特性"],"e":"<p>​\t都9102年了，JAVA出到了13.0.1。现在预习一下JAVA8新特性应该还来得及；用代码说话：</p>\n<h1> 一、Stream（流）</h1>\n<p>Stream（流）是一个来自数据源的元素队列并支持聚合操作</p>\n<p>数据源是流的来源。 数据源可以是集合，数组，I/O channel等</p>\n<p>优点：</p>\n<ul>\n<li>内部迭代：通过访问者模式(Visitor)实现</li>\n<li>Pipelining：中间操作都会返回流对象本身</li>\n<li>聚合操作：类似SQL语句一样的操作， 比如 filter, map, reduce, find, match, sorted 等</li>\n</ul>","r":{"minutes":3.94,"words":1181},"y":"a","t":"java8新特性"},["/posts/java/java8新特性.html","/posts/java/java8%E6%96%B0%E7%89%B9%E6%80%A7","/posts/java/java8新特性.md","/posts/java/java8%E6%96%B0%E7%89%B9%E6%80%A7.md"]],
  ["v-2af9d8a0","/posts/java/java%E4%B8%AD%E7%9A%84Queue%E9%98%9F%E5%88%97.html",{"a":"郑天祺","d":1607951040000,"l":"2020年12月14日","c":["java基础"],"g":["java"],"e":"<h1> 1、介绍</h1>\n<p>​        Queue： 基本上，一个队列就是一个先入先出（FIFO）的数据结构\n​        Queue接口与List、Set同一级别，都是继承了Collection接口。LinkedList实现了Deque接 口。</p>\n<h1> 2、Queue的实现：</h1>\n<p>一个是以ConcurrentLinkedQueue为代表的高性能队列；\n一个是以BlockingQueue接口为代表的阻塞队列；</p>\n<h2> （1）没有实现的阻塞接口队列</h2>\n<p>​\t\t没有实现的阻塞接口的LinkedList： 实现了java.util.Queue接口和java.util.AbstractQueue接口\n　　内置的两个不阻塞队列： PriorityQueue 和 ConcurrentLinkedQueue</p>","r":{"minutes":4.99,"words":1498},"y":"a","t":"java中的Queue队列"},["/posts/java/java中的Queue队列.html","/posts/java/java%E4%B8%AD%E7%9A%84Queue%E9%98%9F%E5%88%97","/posts/java/java中的Queue队列.md","/posts/java/java%E4%B8%AD%E7%9A%84Queue%E9%98%9F%E5%88%97.md"]],
  ["v-6039ae94","/posts/java/java%E6%93%8D%E4%BD%9Ctxt%E6%96%87%E4%BB%B6%E6%80%BB%E7%BB%93.html",{"a":"ztq","d":1663149180000,"l":"2022年9月14日","c":["java基础"],"g":["java","文件"],"e":"<h1> 1、介绍</h1>\n<h2> （1）Java.io包</h2>\n<h3> File类</h3>\n<p>这是Java中一个内置的包，专门用于文件读写的一个操作的类\n在程序中使用 文件或者流的操作就要导入import <a href=\"http://java.io\" target=\"_blank\" rel=\"noopener noreferrer\">java.io</a>.*;</p>\n<p>File类可以表示一个文件，还可以表示一个目录（Directory），所以我们可以在程序中用File 类的对象可以表示一个文件 或者 目录\n当创建了 File 对象之后，我们可以利用该对象来对文件或者目录进行书属性修改：例如：文件的名称，修改日期的日期等等\nFile 类的对象 还不能直接对文件进行读写操作，只能修改文件的属性</p>","r":{"minutes":5.68,"words":1703},"y":"a","t":"java操作txt文件总结"},["/posts/java/java操作txt文件总结.html","/posts/java/java%E6%93%8D%E4%BD%9Ctxt%E6%96%87%E4%BB%B6%E6%80%BB%E7%BB%93","/posts/java/java操作txt文件总结.md","/posts/java/java%E6%93%8D%E4%BD%9Ctxt%E6%96%87%E4%BB%B6%E6%80%BB%E7%BB%93.md"]],
  ["v-4818b76e","/posts/java/JAVA%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",{"a":"郑天祺","d":1578321000000,"l":"2020年1月6日","c":["java基础"],"g":["java"],"e":"<p>1、整型</p>\n<p>​\t\t在 Java 中 ， 整型的范围与运行 Java 代码的机器无关 。</p>\n<p>​\t<img src=\"/assets/images/inttype.png\" alt=\"image-20200106143552647\" loading=\"lazy\"></p>\n<p>​\t\t在通常情况下， int类型最常用。 但如果表示星球上的居住人数 ，就需要使用 long 类型了。byte 和 short 类型主要用于特定的应用场合 ，例如 ，底层的文件处理或者需要控制占用存储空间量的大数组 。</p>\n<p>​\t\t长整型数值有一个后缀 L 或 1 ( 如 4000000000 L ) 。</p>","r":{"minutes":3.34,"words":1003},"y":"a","t":"JAVA数据类型易混概念"},["/posts/java/JAVA数据类型.html","/posts/java/JAVA%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B","/posts/java/JAVA数据类型.md","/posts/java/JAVA%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.md"]],
  ["v-90c01520","/posts/java/JDK%E5%B9%B6%E5%8F%91%E5%8C%85%E5%B8%B8%E7%94%A8%E7%B1%BB.html",{"a":"ztq","d":1649455500000,"l":"2022年4月9日","c":["java基础"],"g":["java"],"e":"<h1> 1、工具类</h1>\n<p>提供并发控制手段: CountDownLatch、CyclicBarrier、Semaphore</p>\n<p>线程间数据交换: Exchanger</p>\n<h2> CountDownLatch：</h2>\n<p>允许一个或多个线程等待其他线程完成操作。</p>\n<p>CountDownLatch的构造函数接受一个int类型的参数作为计数器，你想等待n个点完成，就传入n。</p>\n<p>两个重要的方法:</p>\n<p>countDown()：调用时，n会减1。</p>\n<p>await()：调用会阻塞当前线程，直到n变成0。</p>\n<p>await(long time,TimeUnit unit)：等待特定时间后，就不会继续阻塞当前线程。</p>","r":{"minutes":3.05,"words":916},"y":"a","t":"JDK并发包常用类"},["/posts/java/JDK并发包常用类.html","/posts/java/JDK%E5%B9%B6%E5%8F%91%E5%8C%85%E5%B8%B8%E7%94%A8%E7%B1%BB","/posts/java/JDK并发包常用类.md","/posts/java/JDK%E5%B9%B6%E5%8F%91%E5%8C%85%E5%B8%B8%E7%94%A8%E7%B1%BB.md"]],
  ["v-16b85c84","/posts/java/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84.html",{"a":"郑天祺","d":1601207700000,"l":"2020年9月27日","c":["面试"],"g":["JVM"],"e":"<figure><img src=\"/assets/images/JVMMemory.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<h1> 1、方法区</h1>\n<p>用于存储虚拟机加载的 类信息，常量，静态变量等数据。</p>\n<h1> 2、堆</h1>\n<p>存放对象实例，所有的对象和数组都要在堆上分配，是 JVM 所管理的内存最大的一块区域。</p>\n<h1> 3、栈</h1>\n<p>Java 方法执行的内存模型：存储局部变量表、操作数栈、动态链接、方法出口灯信息。</p>\n<p>生命周期与线程相同。</p>","r":{"minutes":0.81,"words":242},"y":"a","t":"JVM内存结构"},["/posts/java/JVM内存结构.html","/posts/java/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84","/posts/java/JVM内存结构.md","/posts/java/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84.md"]],
  ["v-462bb9bf","/posts/java/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95.html",{"a":"郑天祺","d":1600420680000,"l":"2020年9月18日","c":["面试"],"g":["JVM"],"e":"<h1> 1、标记 - 清除 算法</h1>\n<p>​\t标记无用对象，然后进行清除回收。</p>\n<p>​\t缺点：效率不高，无法清除垃圾碎片。</p>\n<figure><img src=\"/assets/images/jvm1.png\" alt=\"image-20200918092639589\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20200918092639589</figcaption></figure>\n<h1> 2、复制 - 清除 算法</h1>\n<p>​\t按照容量划分二个大小相等的内存区域，每次使用其中的一块。当这一块的内存使用完后，就将还存活的对象复制到另一块去，然后再把使用的空间一次清理掉。这样就使每次的内存回收都是对内存区间的一半进行回收。</p>","r":{"minutes":1.31,"words":394},"y":"a","t":"JVM垃圾回收算法"},["/posts/java/JVM垃圾回收算法.html","/posts/java/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95","/posts/java/JVM垃圾回收算法.md","/posts/java/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95.md"]],
  ["v-66cd05be","/posts/java/JVM%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%95%B4%E7%90%86.html",{"a":"郑天祺","d":1605626040000,"l":"2020年11月17日","c":["面试"],"g":[],"e":"<p>1、类加载过程</p>\n<p>​\t\tJava语言是一种具有动态性的解释型语言，类(Class)只有被加载到JVM后才能运行。当运行指定程序时，JVM会将编译生成的.class文件按照需求和一定的规则加载到内存中，并组织成为一个完整的Java应用程序。</p>\n<p>​\t\t这个加载过程是由类加载器完成，具体来说，就是由ClassLoader和它的子类来实现的。类加载器本身也是一个类，其实质是把类文件从硬盘读取到内存中。</p>\n<p>​\t\t类的加载方式分为隐式加载和显示加载。隐式加载指的是程序在使用new等方式创建对象时，会隐式地调用类的加载器把对应的类加载到JVM中。显示加载指的是通过直接调用class.forName()方法来把所需的类加载到JVM中。</p>","r":{"minutes":6.03,"words":1810},"y":"a","t":"JVM性能优化整理"},["/posts/java/JVM性能优化整理.html","/posts/java/JVM%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%95%B4%E7%90%86","/posts/java/JVM性能优化整理.md","/posts/java/JVM%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%95%B4%E7%90%86.md"]],
  ["v-2409ceb4","/posts/java/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B.html",{"a":"郑天祺","d":1601204880000,"l":"2020年9月27日","c":["面试"],"g":["JVM"],"e":"<h1> 0、图解</h1>\n<figure><img src=\"/assets/images/JVM类加载过程.png\" alt=\"image-20200927113941669\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20200927113941669</figcaption></figure>\n<figure><img src=\"/assets/images/image-20210807123832574.png\" alt=\"image-20210807123832574\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20210807123832574</figcaption></figure>","r":{"minutes":3.8,"words":1141},"y":"a","t":"JVM类加载过程"},["/posts/java/JVM类加载过程.html","/posts/java/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B","/posts/java/JVM类加载过程.md","/posts/java/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B.md"]],
  ["v-343cfb76","/posts/java/Kafka%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html",{"a":"郑天祺","d":1607950740000,"l":"2020年12月14日","c":["spring",""],"g":["SpringCloud"],"e":"<h1> 1、安装kafka</h1>\n<p><a href=\"http://kafka.apache.org/quickstart\" target=\"_blank\" rel=\"noopener noreferrer\">http://kafka.apache.org/quickstart</a>  （linux版）</p>\n<p>windows版：\n首先cmd到kafka的bin下\n其中启动内置的zk用：zookeeper-server-start.bat D:\\environment\\kafka_2.12-2.3.0\\config\\zookeeper.properties\n启动Kafka用：kafka-server-start.bat D:\\environment\\kafka_2.12-2.3.0\\config\\server.properties</p>","r":{"minutes":2.13,"words":638},"y":"a","t":"Kafka的简单使用"},["/posts/java/Kafka的简单使用.html","/posts/java/Kafka%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8","/posts/java/Kafka的简单使用.md","/posts/java/Kafka%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.md"]],
  ["v-328c165e","/posts/java/maven%E6%A2%B3%E7%90%86.html",{"a":"郑天祺","d":1567011660000,"l":"2019年8月29日","c":["软件管理"],"g":["maven"],"e":"<h1> Maven使用</h1>\n<h2> maven的命令：</h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code>maven常用命令\n\n创建maven项目：mvn archetype<span class=\"token operator\">:</span>create\n指定 group： <span class=\"token operator\">-</span><span class=\"token class-name\">DgroupId</span><span class=\"token operator\">=</span>packageName\n指定 artifact：<span class=\"token operator\">-</span><span class=\"token class-name\">DartifactId</span><span class=\"token operator\">=</span>projectName\n创建web项目：<span class=\"token operator\">-</span><span class=\"token class-name\">DarchetypeArtifactId</span><span class=\"token operator\">=</span>maven<span class=\"token operator\">-</span>archetype<span class=\"token operator\">-</span>webapp \n创建maven项目：mvn archetype<span class=\"token operator\">:</span>generate\n验证项目是否正确：mvn validate\nmaven 打包：mvn <span class=\"token keyword\">package</span>\n只打jar包：mvn jar<span class=\"token operator\">:</span>jar\n生成源码jar包：mvn source<span class=\"token operator\">:</span>jar\n产生应用需要的任何额外的源代码：mvn generate<span class=\"token operator\">-</span>sources\n编译源代码： mvn compile\n编译测试代码：mvn test<span class=\"token operator\">-</span>compile\n运行测试：mvn test\n运行检查：mvn verify\n清理maven项目：mvn clean  该操作会清空当前目录的target文件夹\n生成eclipse项目：mvn eclipse<span class=\"token operator\">:</span>eclipse\n清理eclipse配置：mvn eclipse<span class=\"token operator\">:</span>clean\n生成idea项目：mvn idea<span class=\"token operator\">:</span>idea\n安装项目到本地仓库：mvn install\n发布项目到远程仓库：mvn<span class=\"token operator\">:</span>deploy\n在集成测试可以运行的环境中处理和发布包：mvn integration<span class=\"token operator\">-</span>test\n显示maven依赖树：mvn dependency<span class=\"token operator\">:</span>tree\n显示maven依赖列表：mvn dependency<span class=\"token operator\">:</span>list\n下载依赖包的源码：mvn dependency<span class=\"token operator\">:</span>sources\n安装本地jar到本地仓库：mvn install<span class=\"token operator\">:</span>install<span class=\"token operator\">-</span>file <span class=\"token operator\">-</span><span class=\"token class-name\">DgroupId</span><span class=\"token operator\">=</span>packageName <span class=\"token operator\">-</span><span class=\"token class-name\">DartifactId</span><span class=\"token operator\">=</span>projectName <span class=\"token operator\">-</span><span class=\"token class-name\">Dversion</span><span class=\"token operator\">=</span>version <span class=\"token operator\">-</span><span class=\"token class-name\">Dpackaging</span><span class=\"token operator\">=</span>jar <span class=\"token operator\">-</span><span class=\"token class-name\">Dfile</span><span class=\"token operator\">=</span>path\n    <span class=\"token constant\">WEB</span>\n启动tomcat：mvn tomcat<span class=\"token operator\">:</span>run\n启动jetty：mvn jetty<span class=\"token operator\">:</span>run\n运行打包部署：mvn tomcat<span class=\"token operator\">:</span>deploy\n撤销部署：mvn tomcat<span class=\"token operator\">:</span>undeploy\n启动web应用：mvn tomcat<span class=\"token operator\">:</span>start\n停止web应用：mvn tomcat<span class=\"token operator\">:</span>stop\n重新部署：mvn tomcat<span class=\"token operator\">:</span>redeploy\n部署展开的war文件：mvn war<span class=\"token operator\">:</span>exploded tomcat<span class=\"token operator\">:</span>exploded\n    maven 命令的格式为 mvn <span class=\"token punctuation\">[</span>plugin<span class=\"token operator\">-</span>name<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>goal<span class=\"token operator\">-</span>name<span class=\"token punctuation\">]</span>，可以接受的参数如下。\n<span class=\"token operator\">-</span><span class=\"token class-name\">D</span> 指定参数，如 <span class=\"token operator\">-</span><span class=\"token class-name\">Dmaven</span><span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>skip<span class=\"token operator\">=</span><span class=\"token boolean\">true</span> 跳过单元测试；\n<span class=\"token operator\">-</span><span class=\"token class-name\">P</span> 指定 <span class=\"token class-name\">Profile</span> 配置，可以用于区分环境；\n<span class=\"token operator\">-</span>e 显示maven运行出错的信息；\n<span class=\"token operator\">-</span>o 离线执行命令<span class=\"token punctuation\">,</span>即不去远程仓库更新包；\n<span class=\"token operator\">-</span><span class=\"token class-name\">X</span> 显示maven允许的debug信息；\n<span class=\"token operator\">-</span><span class=\"token class-name\">U</span> 强制去远程更新snapshot的插件或依赖，默认每天只更新一次。\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":9.44,"words":2831},"y":"a","t":"maven梳理"},["/posts/java/maven梳理.html","/posts/java/maven%E6%A2%B3%E7%90%86","/posts/java/maven梳理.md","/posts/java/maven%E6%A2%B3%E7%90%86.md"]],
  ["v-41734538","/posts/java/Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BD%BF%E7%94%A8.html",{"a":"郑天祺","d":1574699880000,"l":"2019年11月26日","c":["spring",""],"g":["SpringCloud","nacos-config"],"e":"<h1> 一、启动Nacos Server</h1>\n<p>1、启动方式可见 <a href=\"https://nacos.io/zh-cn/docs/quick-start.html\" target=\"_blank\" rel=\"noopener noreferrer\">Nacos 官网</a></p>\n<p>2、在配置列表里配置自己的配置，按照规范填写各项。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code>user<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>zhengtianqi\nuser<span class=\"token punctuation\">.</span>password<span class=\"token operator\">=</span><span class=\"token number\">123456</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.62,"words":785},"y":"a","t":"Nacos配置中心使用"},["/posts/java/Nacos配置中心使用.html","/posts/java/Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BD%BF%E7%94%A8","/posts/java/Nacos配置中心使用.md","/posts/java/Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BD%BF%E7%94%A8.md"]],
  ["v-ce2e1062","/posts/java/Netty.html",{"a":"ztq","d":1662559920000,"l":"2022年9月7日","c":["java基础"],"g":["Netty"],"e":"<h1> 一、介绍</h1>\n<h2> 简介</h2>\n<p>netty是一个异步、基于事件驱动的网络应用框架，用以快速开发高性能、高可用的网络IO程序\nnetty主要针对在TCP协议下，面向Clients端的高并发应用，或者peer-to-peer场景下的大量数据持续性传输的应用\nnetty本质是一个NIO框架，适用于服务器通讯相关的多种场景。\nNetty是一个提供异步事件驱动的网络应用框架，用以快速开发高性能、高可靠性的网络服务器和客户端程序。\nNetty是一个NIO框架，使用它可以简单快速地开发网络应用程序，比如客户端和服务端的协议。Netty大大简化了网络程序的开发过程比如TCP和UDP的 Socket的开发。</p>","r":{"minutes":5.32,"words":1595},"y":"a","t":"Netty介绍及简单示例"},["/posts/java/Netty","/posts/java/Netty.md"]],
  ["v-62fd7ae6","/posts/java/nginx%E9%85%8D%E7%BD%AE.html",{"a":"ztq","d":1663156080000,"l":"2022年9月14日","c":["CICD"],"g":["nginx"],"e":"<h1> 一、负载均衡策略</h1>\n<p>负载均衡用于从“upstream”模块定义的后端服务器列表中选取一台服务器接受用户的请求。一个最基本的upstream模块是这样的，模块内的server是服务器列表：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code>#动态服务器组\nupstream dynamic_zuoyu <span class=\"token punctuation\">{</span>\n    server localhost<span class=\"token operator\">:</span><span class=\"token number\">8080</span><span class=\"token punctuation\">;</span>  #tomcat1\n    server localhost<span class=\"token operator\">:</span><span class=\"token number\">8081</span><span class=\"token punctuation\">;</span>  #tomcat2\n    server localhost<span class=\"token operator\">:</span><span class=\"token number\">8082</span><span class=\"token punctuation\">;</span>  #tomcat3\n    server localhost<span class=\"token operator\">:</span><span class=\"token number\">8083</span><span class=\"token punctuation\">;</span>  #tomcat4\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":12.42,"words":3727},"y":"a","t":"nginx配置"},["/posts/java/nginx配置.html","/posts/java/nginx%E9%85%8D%E7%BD%AE","/posts/java/nginx配置.md","/posts/java/nginx%E9%85%8D%E7%BD%AE.md"]],
  ["v-79b413ba","/posts/java/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.html",{"a":"ztq","d":1642854840000,"l":"2022年1月22日","c":["数据库"],"g":["redis"],"e":"<h1> 数据结构与对象</h1>\n<h2> 简单动态字符串</h2>\n<h3> SDS的定义</h3>\n<p>每个 <code>sds.h/sdshdr</code> 结构表示一个 SDS 值：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code>struct sdshdr <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 记录 buf 数组中已使用字节的数量</span>\n    <span class=\"token comment\">// 等于 SDS 所保存字符串的长度</span>\n    <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 记录 buf 数组中未使用字节的数量</span>\n    <span class=\"token keyword\">int</span> free<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 字节数组，用于保存字符串</span>\n    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":15.38,"words":4613},"y":"a","t":"Redis数据结构与对象（一）-简单动态字符串"},["/posts/java/Redis设计与实现.html","/posts/java/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0","/posts/java/Redis设计与实现.md","/posts/java/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.md"]],
  ["v-22792c59","/posts/java/SimpleDateFormat%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98.html",{"a":"郑天祺","d":1570905720000,"l":"2019年10月13日","c":["java基础"],"g":["并发","线程安全"],"e":"<h1> 一、问题产生</h1>\n<p>​\t在写java程序时，有时间戳转换的操作。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ParseException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleDateFormat</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n * <span class=\"token keyword\">@author</span> zhengtianqi\n * <span class=\"token keyword\">@date</span> 2019/10/12\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DateTrans</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// 将2019-10-12 18:50:30 改成 2019年10月12日</span>\n        <span class=\"token class-name\">String</span> inDate <span class=\"token operator\">=</span> <span class=\"token string\">\"2019-10-12 18:50:30\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">SimpleDateFormat</span> inPut <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">SimpleDateFormat</span> outPut <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy年MM月dd日\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Date</span> temp <span class=\"token operator\">=</span> inPut<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>inDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> outDate <span class=\"token operator\">=</span> outPut<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>outDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ParseException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"时间转换出错，出错信息为 ={}\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.25,"words":676},"y":"a","t":"SimpleDateFormat引发的线程安全问题"},["/posts/java/SimpleDateFormat引发的线程安全问题.html","/posts/java/SimpleDateFormat%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98","/posts/java/SimpleDateFormat引发的线程安全问题.md","/posts/java/SimpleDateFormat%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98.md"]],
  ["v-4b15bec8","/posts/java/Spark%E7%9B%B8%E5%85%B3%E6%A6%82%E8%BF%B0.html",{"a":"郑天祺","d":1576676460000,"l":"2019年12月18日","c":["大数据"],"g":["Spark"],"e":"<h1> 一、Spark的核心组件是：</h1>\n<p>​\t\t\t\t集群资源管理服务（Cluster Manager）</p>\n<p>​\t\t\t\t运行作业任务的节点（WorkerNode），</p>\n<p>​\t\t\t\t每个应用的任务控制节点 Driver 和 每个机器节点上有具有任务的执行进程（Executor）</p>\n<figure><img src=\"/assets/images/Spark.png\" alt=\"image-20191218134210879\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20191218134210879</figcaption></figure>","r":{"minutes":1.41,"words":424},"y":"a","t":"Spark相关概述"},["/posts/java/Spark相关概述.html","/posts/java/Spark%E7%9B%B8%E5%85%B3%E6%A6%82%E8%BF%B0","/posts/java/Spark相关概述.md","/posts/java/Spark%E7%9B%B8%E5%85%B3%E6%A6%82%E8%BF%B0.md"]],
  ["v-0c5c8a22","/posts/java/String%E3%80%81-StringBuilder%E3%80%81StringBuffer%E5%8C%BA%E5%88%AB.html",{"a":"郑天祺","d":1595346180000,"l":"2020年7月21日","c":["java基础"],"g":["String","StringBuilder","StringBuffer"],"e":"<h1> 1、介绍</h1>\n<h2> （1）运行速度</h2>\n<p>​\t\tStringBuilder &gt; StringBuffer &gt; String\n​\t\tString为字符串常量，而StringBuilder和StringBuffer均为字符串变量，即String对象一旦创建之后该对象是不可更改的，但后两者的对象是变量，是可以更改的。</p>\n<p>​\t\t因为String修改其实是new了一个新对象，原来的String被JVM的垃圾回收机制（GC）给回收掉了。</p>\n<figure><img src=\"/assets/images/StringUpdate.png\" alt=\"image-20200721154908228\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20200721154908228</figcaption></figure>","r":{"minutes":0.75,"words":226},"y":"a","t":"String、 StringBuilder、StringBuffer区别"},["/posts/java/String、-StringBuilder、StringBuffer区别.html","/posts/java/String%E3%80%81-StringBuilder%E3%80%81StringBuffer%E5%8C%BA%E5%88%AB","/posts/java/String、-StringBuilder、StringBuffer区别.md","/posts/java/String%E3%80%81-StringBuilder%E3%80%81StringBuffer%E5%8C%BA%E5%88%AB.md"]],
  ["v-299bf5aa","/posts/java/TCP-IP%E5%9B%9B%E5%B1%82%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.html",{"a":"郑天祺","d":1567177920000,"l":"2019年8月30日","c":["网络"],"g":["TCP/IP"],"e":"<h2> 1、用户发送请求</h2>\n<figure><img src=\"/assets/images/TCPIP用户发送请求.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<h2> 2、服务器接收请求</h2>\n<figure><img src=\"/assets/images/TCPIP服务器接收请求.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<h2> 3、网络连接模型</h2>\n<p>（《网络是怎么连接的》课本翻译）</p>","r":{"minutes":0.96,"words":289},"y":"a","t":"TCP IP四层网络模型"},["/posts/java/TCP-IP四层网络模型.html","/posts/java/TCP-IP%E5%9B%9B%E5%B1%82%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B","/posts/java/TCP-IP四层网络模型.md","/posts/java/TCP-IP%E5%9B%9B%E5%B1%82%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.md"]],
  ["v-6a29a8e0","/posts/java/TCP%E4%B8%8EUDP%E7%9A%84%E5%8C%BA%E5%88%AB.html",{"a":"郑天祺","d":1595318400000,"l":"2020年7月21日","c":["网络"],"g":["TCP/IP","UDP"],"e":"<h1> 引言</h1>\n<p>​\t\t网络协议中，TCP/IP有两个具有代表性的传输层协议，分别是TCP和UDP。</p>\n<h1> 1、TCP/IP网络模型</h1>\n<p>​\t\t计算机与网络设备要相互通信，双方就必须基于相同的方法和规则。而我们就把这种规则称为协议（protocol）</p>\n<p>​\t\tTCP/IP 是互联网相关的各类协议族的总称，比如：TCP，UDP，IP，FTP，HTTP，ICMP，SMTP 等都属于 TCP/IP 族内的协议。</p>\n<figure><img src=\"/assets/images/TCPIP模型.png\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>","r":{"minutes":4.16,"words":1249},"y":"a","t":"TCP与UDP的区别"},["/posts/java/TCP与UDP的区别.html","/posts/java/TCP%E4%B8%8EUDP%E7%9A%84%E5%8C%BA%E5%88%AB","/posts/java/TCP与UDP的区别.md","/posts/java/TCP%E4%B8%8EUDP%E7%9A%84%E5%8C%BA%E5%88%AB.md"]],
  ["v-5e484e54","/posts/java/TCP%E6%8F%A1%E6%89%8B%E3%80%81%E6%8C%A5%E6%89%8B%E5%8D%8F%E8%AE%AE.html",{"a":"郑天祺","d":1567180680000,"l":"2019年8月30日","c":["网络"],"g":["TCP/IP"],"e":"<h2> 1、TCP三次握手协议（打开连接）</h2>\n<figure><img src=\"/assets/images/三次握手协议1.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<p>第一次： A城发信，B城收到了------&gt; 此时B城就会明白 ：A城的发信能力和自己的收信能力是没问题的</p>\n<p>第二次：B城发信，A城收到了-----&gt; 此时A城就会明白 ：A城的发信能力和收信能力都是没问题的，B城的发信能力和收信能力都是没问题的。但是B不知道自己发信能力如何，所以要进行第三次握手</p>","r":{"minutes":3.12,"words":935},"y":"a","t":"TCP握手、挥手协议"},["/posts/java/TCP握手、挥手协议.html","/posts/java/TCP%E6%8F%A1%E6%89%8B%E3%80%81%E6%8C%A5%E6%89%8B%E5%8D%8F%E8%AE%AE","/posts/java/TCP握手、挥手协议.md","/posts/java/TCP%E6%8F%A1%E6%89%8B%E3%80%81%E6%8C%A5%E6%89%8B%E5%8D%8F%E8%AE%AE.md"]],
  ["v-465e1e90","/posts/java/ThreadLocal.html",{"a":"郑天祺","d":1585389540000,"l":"2020年3月28日","c":["java基础"],"g":["java"],"e":"<p>引言：本博客《SimpleDateFormat引发的线程安全问题》中提到，可以利用 ThreadLocal 来解决SimpleDateFormat的线程安全问题。之后看到阿里巴巴开发规范中也有提到，SimpleDateFormat禁止使用static进行修饰。</p>\n<figure><img src=\"/assets/images/simpleDateFormat-alibaba.png\" alt=\"image-20200331153816952\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20200331153816952</figcaption></figure>","r":{"minutes":3.05,"words":915},"y":"a","t":"ThreadLocal"},["/posts/java/ThreadLocal","/posts/java/ThreadLocal.md"]],
  ["v-4a5dcb0b","/posts/java/Tomcat%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%95%B4%E7%90%86.html",{"a":"郑天祺","d":1605616440000,"l":"2020年11月17日","c":["面试"],"g":["tomcat"],"e":"<h1> 1、JVM参数调优</h1>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token operator\">-</span><span class=\"token class-name\">Xms</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>size<span class=\"token punctuation\">&gt;</span></span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","r":{"minutes":5.26,"words":1577},"y":"a","t":"Tomcat性能优化整理"},["/posts/java/Tomcat性能优化整理.html","/posts/java/Tomcat%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%95%B4%E7%90%86","/posts/java/Tomcat性能优化整理.md","/posts/java/Tomcat%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%95%B4%E7%90%86.md"]],
  ["v-749e3436","/posts/java/WordCount%E7%AE%80%E6%9E%90.html",{"a":"郑天祺","d":1576670220000,"l":"2019年12月18日","c":["大数据"],"g":["HADOOP"],"e":"<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>examples</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringTokenizer</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>fs<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Path</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IntWritable</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>mapreduce<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Job</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>mapreduce<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Mapper</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>mapreduce<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Reducer</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>mapreduce<span class=\"token punctuation\">.</span>lib<span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileInputFormat</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>mapreduce<span class=\"token punctuation\">.</span>lib<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileOutputFormat</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GenericOptionsParser</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WordCount</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token doc-comment comment\">/**\n     * map 阶段\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n     * Object 此处为文本数据的起始位置的偏移量;可以直接使用 Long 类型，源码此处使用Object做了泛化\n     * Text 输入&lt; key, value &gt;对的 value 值，此处为一段具体的文本数据\n     * Text 输出&lt; key, value &gt;对的 key 值，此处为一个单词\n     * IntWritable：输出&lt; key, value &gt;对的 value 值，此处固定为 1\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TokenizerMapper</span>\n            <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Mapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IntWritable</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// IntWritable 是 Hadoop 对 Integer 的进一步封装，使其可以进行序列化。</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">IntWritable</span> one <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntWritable</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// map 端的任务是对输入数据按照单词进行切分，每个单词为 Text 类型。</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Text</span> word <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token doc-comment comment\">/**\n         * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">key</span>     输入数据在原数据中的偏移量\n         * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">value</span>   具体的数据数据，此处为一段字符串\n         * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">context</span> 用于暂时存储 map() 处理后的结果\n         * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">IOException</span></span>          IO异常\n         * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">InterruptedException</span></span> 中断异常\n         */</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Text</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Context</span> context\n        <span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 字符串分割，也可以用 apache.common.lang3的 StringUtils.split</span>\n            <span class=\"token class-name\">StringTokenizer</span> itr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringTokenizer</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// map 输出的 key value</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>itr<span class=\"token punctuation\">.</span><span class=\"token function\">hasMoreTokens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                word<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>itr<span class=\"token punctuation\">.</span><span class=\"token function\">nextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                context<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> one<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * reduce阶段，map的输出是reduce的输入\n     * Text：输入&lt; key, value &gt;对的key值，此处为一个单词\n     * IntWritable：输入&lt; key, value &gt;对的value值\n     * Text：输出&lt; key, value &gt;对的key值，此处为一个单词\n     * IntWritable：输出&lt; key, value &gt;对，此处为相同单词词频累加之后的值。实际上就是一个数字\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IntSumReducer</span>\n            <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Reducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IntWritable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IntWritable</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">IntWritable</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntWritable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token doc-comment comment\">/**\n         * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">key</span>     输入&lt; key, value &gt;对的key值，也就是一个单词\n         * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">values</span>  一系列的key值相同的序列化结构\n         * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">context</span> 临时存储reduce端产生的结果\n         * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">IOException</span></span>          IO异常\n         * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">InterruptedException</span></span> 中断异常\n         */</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Text</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IntWritable</span><span class=\"token punctuation\">&gt;</span></span> values<span class=\"token punctuation\">,</span>\n                           <span class=\"token class-name\">Context</span> context\n        <span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 将相同的key进行合并，value累加</span>\n            <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IntWritable</span> val <span class=\"token operator\">:</span> values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                sum <span class=\"token operator\">+=</span> val<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 单词和它的数目</span>\n            context<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Configuration</span> conf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> otherArgs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericOptionsParser</span><span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRemainingArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>otherArgs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Usage: wordcount &lt;in&gt; [&lt;in&gt;...] &lt;out&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// main函数调用Job类及逆行MapReduce 作业的初始化</span>\n        <span class=\"token class-name\">Job</span> job <span class=\"token operator\">=</span> <span class=\"token class-name\">Job</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"word count\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        job<span class=\"token punctuation\">.</span><span class=\"token function\">setJarByClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WordCount</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 设置 job 的 map 阶段的执行类</span>\n        job<span class=\"token punctuation\">.</span><span class=\"token function\">setMapperClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TokenizerMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 设置 job 的 combine 阶段的执行类</span>\n        job<span class=\"token punctuation\">.</span><span class=\"token function\">setCombinerClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntSumReducer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 设置 job 的 reduce 阶段的执行类</span>\n        job<span class=\"token punctuation\">.</span><span class=\"token function\">setReducerClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntSumReducer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// map的输出 key、value 映射</span>\n        job<span class=\"token punctuation\">.</span><span class=\"token function\">setOutputKeyClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Text</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 设置程序的输出的value值的类型</span>\n        job<span class=\"token punctuation\">.</span><span class=\"token function\">setOutputValueClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntWritable</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 调用 addInputFormat 设置输入路径</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> otherArgs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Path 是绝对路径</span>\n            <span class=\"token class-name\">FileInputFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">addInputPath</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Path</span><span class=\"token punctuation\">(</span>otherArgs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 输入文件 和 输出文件的路径</span>\n        <span class=\"token class-name\">FileOutputFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">setOutputPath</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Path</span><span class=\"token punctuation\">(</span>otherArgs<span class=\"token punctuation\">[</span>otherArgs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 等待任务完成，任务完成之后退出程序</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">.</span><span class=\"token function\">waitForCompletion</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.43,"words":730},"y":"a","t":"WordCount简析"},["/posts/java/WordCount简析.html","/posts/java/WordCount%E7%AE%80%E6%9E%90","/posts/java/WordCount简析.md","/posts/java/WordCount%E7%AE%80%E6%9E%90.md"]],
  ["v-98e8f354","/posts/java/Yarn%E6%A6%82%E8%BF%B0.html",{"a":"郑天祺","d":1576660320000,"l":"2019年12月18日","c":["大数据"],"g":["HADOOP"],"e":"<h1> 一、组件介绍</h1>\n<p>​\tYarn的基本思想是将 JobTracker 的资源管理和作业的调度/监控两大主要职能拆分为两个独立的进程：</p>\n<p>​\t\ta. 一个全局的 Resource Manager</p>\n<p>​\t\tb. 每个应用对应的 Application Master（AM）</p>\n<p>​\tResource Manager 和每个节点上的 Node Manager（NM）组成了全新的通用操作系统，以分布式的方式管理应用程序。</p>\n<p>​\tResource Manager拥有为系统中所有应用分配资源的决定权。与之相关的是应用程序的Application Master，负责与Resource Manager协商资源，并与Node Manager协同工作来执行和监控任务。</p>","r":{"minutes":2.09,"words":628},"y":"a","t":"Yarn概述"},["/posts/java/Yarn概述.html","/posts/java/Yarn%E6%A6%82%E8%BF%B0","/posts/java/Yarn概述.md","/posts/java/Yarn%E6%A6%82%E8%BF%B0.md"]],
  ["v-a5c5d70e","/posts/java/%E4%BA%92%E6%96%A5%E9%94%81.html",{"a":"郑天祺","d":1567257180000,"l":"2019年8月31日","c":["java基础"],"g":["锁"],"e":"<h2> 1、关于“互斥”和“同步”的概念</h2>\n<p>互斥 : 就是线程A访问了一组数据，线程BCD就不能同时访问这些数据，直到A停止访问了\n同步 : 就是ABCD这些线程要约定一个执行的协调顺序，比如D要执行，B和C必须都得做完，而B和C要开始，A必须先得做完。</p>\n<p>互斥 ：就是不同线程通过竞争进入临界区（共享的数据和硬件资源），为了防止访问冲突，在有限的时间内只允许其中之一独占性的使用共享资源。如不允许同时写</p>\n<p>同步 ：关系则是多个线程彼此合作，通过一定的逻辑关系来共同完成一个任务。一般来说，同步关系中往往包含互斥，同时对临界区的资源会按照某种逻辑顺序进行访问。如先生产后使用</p>","r":{"minutes":1.82,"words":547},"y":"a","t":"互斥锁"},["/posts/java/互斥锁.html","/posts/java/%E4%BA%92%E6%96%A5%E9%94%81","/posts/java/互斥锁.md","/posts/java/%E4%BA%92%E6%96%A5%E9%94%81.md"]],
  ["v-5d4e5aa2","/posts/java/%E4%BC%AA%E5%85%B1%E4%BA%AB.html",{"a":"郑天祺","d":1607952840000,"l":"2020年12月14日","c":["操作系统"],"g":["伪共享"],"e":"<h1> 1、CPU缓存介绍</h1>\n<p>​\t\t以近代CPU的视角来说，它们的作用都是作为CPU与主内存之间的高速数据缓冲区，L1最靠近CPU核心；L2其次；L3再次。</p>\n<p>​\t\t图具有3级缓存的处理器</p>\n<figure><img src=\"/assets/images/image-20201214133601256.png\" alt=\"image-20201214133601256\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20201214133601256</figcaption></figure>\n<figure><img src=\"/assets/images/image-20201214133612299.png\" alt=\"image-20201214133612299\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20201214133612299</figcaption></figure>","r":{"minutes":4.58,"words":1374},"y":"a","t":"伪共享"},["/posts/java/伪共享.html","/posts/java/%E4%BC%AA%E5%85%B1%E4%BA%AB","/posts/java/伪共享.md","/posts/java/%E4%BC%AA%E5%85%B1%E4%BA%AB.md"]],
  ["v-7f0726f4","/posts/java/%E5%81%8F%E5%90%91%E9%94%81.html",{"a":"郑天祺","d":1567257720000,"l":"2019年8月31日","c":["java基础"],"g":["锁"],"e":"<h2> 0、从偏向锁到重量锁</h2>\n<p>​    在java同步代码快中，synchronized的使用方式无非有两个 :</p>\n<p>​    1）通过对一个对象进行加锁来实现同步</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>lockObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">//代码</span>\n <span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.74,"words":1122},"y":"a","t":"偏向锁"},["/posts/java/偏向锁.html","/posts/java/%E5%81%8F%E5%90%91%E9%94%81","/posts/java/偏向锁.md","/posts/java/%E5%81%8F%E5%90%91%E9%94%81.md"]],
  ["v-4ae6cd47","/posts/java/%E5%85%AC%E5%B9%B3%E9%94%81%E3%80%81%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81.html",{"a":"郑天祺","d":1567257660000,"l":"2019年8月31日","c":["java基础"],"g":["锁"],"e":"<p>1、概念：</p>\n<p>​        公平锁：加锁前先查看是否有排队等待的线程，有的话优先处理排在前面的线程，先来先得。\n​        公平所：线程加锁时直接尝试获取锁，获取不到就自动到队尾等待。</p>\n<p>​        更多的是直接使用非公平锁：非公平锁比公平锁性能高5-10倍，因为公平锁需要在多核情况下维护一个队列，如果当前线程不是队列的第一个无法获取锁，增加了线程切换次数。</p>\n<p>​        原理 ： <a href=\"https://www.cnblogs.com/little-fly/p/10365109.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cnblogs.com/little-fly/p/10365109.html</a></p>","r":{"minutes":0.76,"words":228},"y":"a","t":"公平锁、非公平锁"},["/posts/java/公平锁、非公平锁.html","/posts/java/%E5%85%AC%E5%B9%B3%E9%94%81%E3%80%81%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81","/posts/java/公平锁、非公平锁.md","/posts/java/%E5%85%AC%E5%B9%B3%E9%94%81%E3%80%81%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81.md"]],
  ["v-60883b58","/posts/java/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86.html",{"a":"郑天祺","d":1567431420000,"l":"2019年9月2日","c":["可信"],"g":["可信","密码学"],"e":"<h1> 1、组成</h1>\n<p>（1）明文：未加密的消息m；</p>\n<p>（2）密文：加密后的消息ct；</p>\n<p>（3）加解密算法：把明文变成密文，密文变成明文的转换函数；</p>\n<p>（4）加密密钥：明文 加密成 密文 需要的参数；</p>\n<p>（5）解密密钥：密文变成 明文 需要的参数</p>\n<h1> 2、分类</h1>\n<h2> （1）对称加密算法</h2>\n<p>对称加密算法 ： 加密密钥 = 解密密钥</p>\n<figure><img src=\"/assets/images/对称加密算法.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>","r":{"minutes":1.56,"words":468},"y":"a","t":"加密解密"},["/posts/java/加密解密.html","/posts/java/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86","/posts/java/加密解密.md","/posts/java/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86.md"]],
  ["v-ebea36d0","/posts/java/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html",{"a":"郑天祺","d":1578068640000,"l":"2020年1月4日","c":["设计模式"],"g":["设计模式"],"e":"<p>继之前的单例模式（<a href=\"https://blog.csdn.net/qq_23034755/article/details/90547215%EF%BC%89%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%EF%BC%8C%E8%B6%8A%E7%9C%8B%E8%B6%8A%E5%AE%B9%E6%98%93%E4%B8%8D%E6%98%8E%E7%99%BD%E4%BA%86%5B%E5%93%AD%E5%93%AD%5D%EF%BC%9A\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/qq_23034755/article/details/90547215）深入学习，越看越容易不明白了[哭哭]：</a></p>","r":{"minutes":1.93,"words":578},"y":"a","t":"单例模式"},["/posts/java/单例模式.html","/posts/java/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F","/posts/java/单例模式.md","/posts/java/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.md"]],
  ["v-25b1d899","/posts/java/%E5%8F%AF%E4%BF%A1%E4%B8%8E%E5%8F%AF%E4%BF%A1%E8%AE%A1%E7%AE%97.html",{"a":"郑天祺","d":1569689700000,"l":"2019年9月29日","c":["可信"],"g":["可信计算"],"e":"<p>一、“可信”有比较多的定义</p>\n<p>（1）TCG用实体行为的预期性来定义 “可信” ：如果一个实体的行为是预期的方式符合预期的目标，则该实体是可信的。</p>\n<p>（2）ISO/IEC 15408标准定义“可信”为：参与计算的组件、操作或过程在任意条件下是可预测的，并能够抵御病毒和物理干扰。</p>\n<p>（3）IEEE CS可信计算技术委员会（IEEE ComputerSocietyTechnical Committeeon Dependable Computing）所谓 “可信” 是指计算机系统所提供的服务是可以论证其是可信赖的，即不仅计算机系统所提供的服务是可信赖的，而且这种可信赖还是可论证的。这种可信依赖更多地指系统的可靠性、可用性和可维护性。</p>","r":{"minutes":3.55,"words":1065},"y":"a","t":"可信与可信计算"},["/posts/java/可信与可信计算.html","/posts/java/%E5%8F%AF%E4%BF%A1%E4%B8%8E%E5%8F%AF%E4%BF%A1%E8%AE%A1%E7%AE%97","/posts/java/可信与可信计算.md","/posts/java/%E5%8F%AF%E4%BF%A1%E4%B8%8E%E5%8F%AF%E4%BF%A1%E8%AE%A1%E7%AE%97.md"]],
  ["v-28cfa8bd","/posts/java/%E5%8F%AF%E4%BF%A1%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html",{"a":"郑天祺","d":1567349160000,"l":"2019年9月1日","c":["可信"],"g":["可信"],"e":"<p>可信的基本思想是在计算机系统中首先建立一个信任根，在计算机系统启动和运行过程中再建立一条信任链，实现对计算机系统局部或全局的可信验证，从而发现不可信实体，及时恢复或阻断运行，从而确保系统安全。</p>\n<p>后来由产生可信操作系统、可信应用、可信网络到可信浏览器等等等等整套可信的体系。</p>\n<h1> 1、可信历史：</h1>\n<h2> （1）可信1.0（软件容错）</h2>\n<p>​\t可信计算技术的发展最早可追溯到２０世纪８０年代，以世界容错组织为代表，通过纯软件实现的容错、故障诊断等机制，验证计算机部件的运行状态，从而实现计算机部件的冗余备份和故障切换。但是众所周知，纯软件实现的安全机制极易被攻击，所以说软件容错是有弊端的。</p>","r":{"minutes":3.07,"words":922},"y":"a","t":"可信基本概念"},["/posts/java/可信基本概念.html","/posts/java/%E5%8F%AF%E4%BF%A1%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5","/posts/java/可信基本概念.md","/posts/java/%E5%8F%AF%E4%BF%A1%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.md"]],
  ["v-a3c1aec8","/posts/java/%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81.html",{"a":"郑天祺","d":1567256700000,"l":"2019年8月31日","c":["java基础"],"g":["锁"],"e":"<h2> 1、可重入锁：</h2>\n<p>​\t也叫做递归锁，指的是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响。\n​\t\"独占\"，就是在同一时刻只能有一个线程获取到锁，而其它获取锁的线程只能处于同步队列中等待，只有获取锁的线程释放了锁，后继的线程才能够获取锁。</p>\n<p>​\t“可重入“，就是支持重进入的锁，它表示该锁能够支持一个线程对资源的重复加锁。</p>\n<p>​\t在JAVA环境下 ReentrantLock 和synchronized 都是可重入锁。</p>\n<h2> 2、Synchronized和ReentrantLock</h2>\n<p><strong>1）性能区别：</strong></p>","r":{"minutes":2.67,"words":800},"y":"a","t":"可重入锁"},["/posts/java/可重入锁.html","/posts/java/%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81","/posts/java/可重入锁.md","/posts/java/%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81.md"]],
  ["v-de5f48ca","/posts/java/%E5%8F%AF%E9%9D%A0%E6%80%A7%E5%92%8C%E5%AE%B9%E9%94%99%E6%8A%80%E6%9C%AF.html",{"a":"郑天祺","d":1570023540000,"l":"2019年10月2日","c":["可信"],"g":["可靠","容错"],"e":"<p>​\t为了提高计算机系统的可靠性，人们通过长期的研究总结出了两种技术：避错技术和容错技术。</p>\n<p>一、避免技术</p>\n<p>​\t避错技术试图构造一个不包含故障的完美系统，其手段是采用精确的设计和质量控制方法尽量避免把故障引入系统。避错系统对元器件的制造工艺、精确的阈值有很高的要求。实际上做到这点是不可能的，因此避错技术对系统的可靠性的提高受到很大的限制。</p>\n<p>二、容错技术</p>\n<p>​\t容错是指当出现某些指定的硬件故障或软件故障时，系统仍能执行规定的一组程序，或者说程序不会因为系统故障而中止或被修改，并且执行结果也不包含系统故障引起的差错。容错的思想是在系统体系结构上精心设计，利用外加资源的冗余技术掩蔽故障带来的影响，从而自动恢复系统或达到安全停机的目的。</p>","r":{"minutes":2.34,"words":702},"y":"a","t":"可靠性和容错技术"},["/posts/java/可靠性和容错技术.html","/posts/java/%E5%8F%AF%E9%9D%A0%E6%80%A7%E5%92%8C%E5%AE%B9%E9%94%99%E6%8A%80%E6%9C%AF","/posts/java/可靠性和容错技术.md","/posts/java/%E5%8F%AF%E9%9D%A0%E6%80%A7%E5%92%8C%E5%AE%B9%E9%94%99%E6%8A%80%E6%9C%AF.md"]],
  ["v-26f8708b","/posts/java/%E5%9B%BE%E8%A7%A3%E5%85%AC%E9%92%A5%E4%B8%8E%E7%A7%81%E9%92%A5.html",{"a":"郑天祺","d":1569360720000,"l":"2019年9月25日","c":["可信"],"g":["可信","密码学"],"e":"<p>1、鲍勃有两把钥匙，一把是公钥，另一把是私钥。</p>\n<figure><img src=\"/assets/images/公钥私钥1.png\" alt=\"1569332117257\" tabindex=\"0\" loading=\"lazy\"><figcaption>1569332117257</figcaption></figure>\n<p>2、鲍勃把公钥送给他的朋友们----帕蒂、道格、苏珊----每人一把。</p>\n<figure><img src=\"/assets/images/公钥私钥2.png\" alt=\"1569332140572\" tabindex=\"0\" loading=\"lazy\"><figcaption>1569332140572</figcaption></figure>","r":{"minutes":3.13,"words":939},"y":"a","t":"图解公钥私钥"},["/posts/java/图解公钥与私钥.html","/posts/java/%E5%9B%BE%E8%A7%A3%E5%85%AC%E9%92%A5%E4%B8%8E%E7%A7%81%E9%92%A5","/posts/java/图解公钥与私钥.md","/posts/java/%E5%9B%BE%E8%A7%A3%E5%85%AC%E9%92%A5%E4%B8%8E%E7%A7%81%E9%92%A5.md"]],
  ["v-24dd8c92","/posts/java/%E5%9F%BA%E4%BA%8EJavaAgent%E7%9A%84%E5%85%A8%E9%93%BE%E8%B7%AF%E7%9B%91%E6%8E%A7%EF%BC%881%EF%BC%89.html",{"a":"郑天祺","d":1594991460000,"l":"2020年7月17日","c":["java基础"],"g":["javaagent"],"e":"<h1> 《手写一个最简单的javaagent》</h1>\n<h1> 1、javaagent介绍</h1>\n<p>​\t\t在使用skywalking时，使用到了Javaagent技术作为节点的探针，使用Javaagent做字节码植入，无侵入式的收集，并通过HTTP或者gRPC方式发送数据到Skywalking Collector。</p>\n<p>​\t\t后来查阅资料发现javaagent用途还是很广的，有JRebel，各种线上诊断工具（Btrace, Greys），还有阿里开源的 Arthas，在此记录一下javaagent的学习历程。</p>\n<p>​\t\t其实 Java Agent 一点都不神秘，也是一个 Jar 包，只是启动方式和普通 Jar 包有所不同，对于普通的Jar包，通过指定类的 main 函数进行启动，但是 Java Agent 并不能单独启动，必须依附在一个 Java 应用程序运行。</p>","r":{"minutes":3.58,"words":1073},"y":"a","t":"基于JavaAgent的全链路监控（1）"},["/posts/java/基于JavaAgent的全链路监控（1）.html","/posts/java/%E5%9F%BA%E4%BA%8EJavaAgent%E7%9A%84%E5%85%A8%E9%93%BE%E8%B7%AF%E7%9B%91%E6%8E%A7%EF%BC%881%EF%BC%89","/posts/java/基于JavaAgent的全链路监控（1）.md","/posts/java/%E5%9F%BA%E4%BA%8EJavaAgent%E7%9A%84%E5%85%A8%E9%93%BE%E8%B7%AF%E7%9B%91%E6%8E%A7%EF%BC%881%EF%BC%89.md"]],
  ["v-7eb8f6d3","/posts/java/%E5%9F%BA%E4%BA%8EJavaAgent%E7%9A%84%E5%85%A8%E9%93%BE%E8%B7%AF%E7%9B%91%E6%8E%A7%EF%BC%882%EF%BC%89.html",{"a":"郑天祺","d":1595177640000,"l":"2020年7月20日","c":["java基础"],"g":["javaagent"],"e":"<h1> 《利用javaagent进行方法耗时的监控》</h1>\n<h2> 1、介绍</h2>\n<p>​\t\t方法耗时利用前人轮子字节码操作工具ByteBuddy：Byte Buddy是一个代码生成和操作库，用于在Java应用程序运行时创建和修改Java类，而无需编译器的帮助。 除了Java类库附带的代码生成实用程序外，Byte Buddy还允许创建任意类，并且不限于实现用于创建运行时代理的接口。 此外，Byte Buddy提供了一个方便的API，可以使用Java代理或在构建过程中手动更改类。</p>\n<h2> 2、pom.xml</h2>\n<p>引入ByteBuddy并打入到Agent包中</p>","r":{"minutes":2.51,"words":752},"y":"a","t":"基于JavaAgent的全链路监控（2）"},["/posts/java/基于JavaAgent的全链路监控（2）.html","/posts/java/%E5%9F%BA%E4%BA%8EJavaAgent%E7%9A%84%E5%85%A8%E9%93%BE%E8%B7%AF%E7%9B%91%E6%8E%A7%EF%BC%882%EF%BC%89","/posts/java/基于JavaAgent的全链路监控（2）.md","/posts/java/%E5%9F%BA%E4%BA%8EJavaAgent%E7%9A%84%E5%85%A8%E9%93%BE%E8%B7%AF%E7%9B%91%E6%8E%A7%EF%BC%882%EF%BC%89.md"]],
  ["v-4ed73dd8","/posts/java/%E5%9F%BA%E4%BA%8EJavaAgent%E7%9A%84%E5%85%A8%E9%93%BE%E8%B7%AF%E7%9B%91%E6%8E%A7%EF%BC%883%EF%BC%89.html",{"a":"郑天祺","d":1595179500000,"l":"2020年7月20日","c":["java基础"],"g":["javaagent"],"e":"<h1> 《利用javaagent进行 JVM内存与GC信息的采集》</h1>\n<h1> 1、介绍</h1>\n<p>​\t\t除了监控java方法的执行耗时，我们还需要获取应用实例的jvm内存与gc信息，以实时把控我们的服务器性能是否在安全范围。监控jvm内存与gc信息是非常重要的，尤其是在大促以及微博火热爆点的时候，我们需要根据监控信息进行扩容，以保证系统稳定。</p>\n<h1> 2、编码</h1>\n<p>在---\ntitle: 基于JavaAgent的全链路监控（2）的基础上增加</p>\n<h2> （1）MyAgent.java</h2>\n<p>​</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>bjut<span class=\"token punctuation\">.</span>agent</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ThreadFactoryBuilder</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n * <span class=\"token keyword\">@author</span> zhengtianqi\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAgent</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * JVM 首先尝试在代理类上调用以下方法\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">premain</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> agentArgs<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Instrumentation</span> inst<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 使用ScheduledExecutorService创建定时任务</span>\n        <span class=\"token class-name\">ScheduledExecutorService</span> schedule <span class=\"token operator\">=</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">ScheduledThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setNameFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"scheduled-%d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建并执行在给定延迟后启用的一次性操作</span>\n        schedule<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleAtFixedRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span>\n\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 此方法为打印jvm信息喝gc信息</span>\n            <span class=\"token class-name\">JvmStack</span><span class=\"token punctuation\">.</span><span class=\"token function\">printMemoryMetric</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">JvmStack</span><span class=\"token punctuation\">.</span><span class=\"token function\">printGcMetric</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * 如果代理类没有实现上面的方法，那么 JVM 将尝试调用该方法\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">premain</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> agentArgs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.02,"words":307},"y":"a","t":"基于JavaAgent的全链路监控（3）"},["/posts/java/基于JavaAgent的全链路监控（3）.html","/posts/java/%E5%9F%BA%E4%BA%8EJavaAgent%E7%9A%84%E5%85%A8%E9%93%BE%E8%B7%AF%E7%9B%91%E6%8E%A7%EF%BC%883%EF%BC%89","/posts/java/基于JavaAgent的全链路监控（3）.md","/posts/java/%E5%9F%BA%E4%BA%8EJavaAgent%E7%9A%84%E5%85%A8%E9%93%BE%E8%B7%AF%E7%9B%91%E6%8E%A7%EF%BC%883%EF%BC%89.md"]],
  ["v-1ca902f2","/posts/java/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E4%B8%8E%E6%8C%87%E9%92%88%E5%8E%8B%E7%BC%A9.html",{"a":"郑天祺","d":1574279400000,"l":"2019年11月21日","c":["java基础"],"g":["内存模型"],"e":"<p>​\t我们知道在Java中基本数据类型的大小，例如int类型占4个字节、long类型占8个字节，那么Integer对象和Long对象会占用多少内存呢？</p>\n<p>​\t一、对象存储：</p>\n<p>​\t一个Java对象在内存中包括对象头、实例数据和补齐填充3个部分：</p>\n<figure><img src=\"/assets/images/对象存储1.png\" alt=\"image-20191120195326698\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20191120195326698</figcaption></figure>","r":{"minutes":4.2,"words":1261},"y":"a","t":"对象存储与指针压缩"},["/posts/java/对象存储与指针压缩.html","/posts/java/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E4%B8%8E%E6%8C%87%E9%92%88%E5%8E%8B%E7%BC%A9","/posts/java/对象存储与指针压缩.md","/posts/java/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E4%B8%8E%E6%8C%87%E9%92%88%E5%8E%8B%E7%BC%A9.md"]],
  ["v-758cf1ca","/posts/java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%80%BB%E7%BB%93.html",{"a":"郑天祺","d":1605632220000,"l":"2020年11月18日","c":["面试"],"g":["java"],"e":"<p>1、Synchronized</p>\n<p>​\t\tSynchronized是由JVM实现的一种实现互斥同步的一种方式，如果你查看被Synchronized修饰过的程序块编译后的字节码，会发现，被Synchronized修饰过的程序块，在编译前后被编译器生成了monitor enter和monitor exit两个字节码指令。</p>\n<p>​\t\t这两个指令是什么意思呢?在虚拟机执行到monitor enter指令时，首先要尝试获取对象的锁︰如果这个对象没有锁定，或者当前线程已经拥有了这个对象的锁，把锁的计数器+1;当执行monitorexit指令时将锁计数器-1﹔当计数器为O时，锁就被释放了。如果获取对象失败了，那当前线程就要阻塞等待，直到对象锁被另外一个线程释放为止。</p>","r":{"minutes":4.91,"words":1472},"y":"a","t":"并发编程总结"},["/posts/java/并发编程总结.html","/posts/java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%80%BB%E7%BB%93","/posts/java/并发编程总结.md","/posts/java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%80%BB%E7%BB%93.md"]],
  ["v-32837462","/posts/java/%E6%82%B2%E8%A7%82%E9%94%81%E3%80%81%E4%B9%90%E8%A7%82%E9%94%81.html",{"a":"郑天祺","d":1567257360000,"l":"2019年8月31日","c":["数据库"],"g":["锁","mysql"],"e":"<h2> 1、悲观锁</h2>\n<p>假设会发生并发冲突，屏蔽一切可能违反数据完整性的操作（具有强烈的独占和排他性）</p>\n<p>​           依赖数据库的锁机制实现，以保证操作最大程度的独占性。</p>\n<p>​     百度百科：正如其名，它指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度，因此，在整个数据处理过程中，将数据处于锁定状态。悲观锁的实现，往往依靠数据库提供的锁机制（也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据）。</p>\n<h2> 2、缺点</h2>","r":{"minutes":3.84,"words":1153},"y":"a","t":"悲观锁、乐观锁"},["/posts/java/悲观锁、乐观锁.html","/posts/java/%E6%82%B2%E8%A7%82%E9%94%81%E3%80%81%E4%B9%90%E8%A7%82%E9%94%81","/posts/java/悲观锁、乐观锁.md","/posts/java/%E6%82%B2%E8%A7%82%E9%94%81%E3%80%81%E4%B9%90%E8%A7%82%E9%94%81.md"]],
  ["v-6b4aae5b","/posts/java/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95Autowired.html",{"a":"郑天祺","d":1599821340000,"l":"2020年9月11日","c":["spring"],"g":["spring"],"e":"<h1> 1、按照惯例</h1>\n<p>首先写一个controller和service</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>bjut<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>bjut<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>bjut<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserService</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserService</span> userService<span class=\"token punctuation\">;</span>\n    \n<span class=\"token punctuation\">}</span>\n\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.66,"words":199},"y":"a","t":"手写一个简单Autowired"},["/posts/java/手写一个简单Autowired.html","/posts/java/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95Autowired","/posts/java/手写一个简单Autowired.md","/posts/java/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95Autowired.md"]],
  ["v-1ee555de","/posts/java/%E6%8E%92%E5%BA%8F%E4%B9%8B%E6%AF%94%E8%BE%83%E5%99%A8.html",{"a":"郑天祺","d":1577960820000,"l":"2020年1月2日","c":["java基础"],"g":["java","数据结构",""],"e":"<h1> 一、Comparable比较器的使用</h1>\n<pre><code>\tJAVA中可以通过实现 Comparable接口的方式让对象进行排序。使用方法：\n\n\t\t1、实体继承Comparable\n\n\t\t2、实现compareTo方法，根据需求进行比较\n</code></pre>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>bjut<span class=\"token punctuation\">.</span>fight<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>comparable</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 1表示大于，-1表示小于，0表示等于</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">&gt;=</span> o<span class=\"token punctuation\">.</span>age <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.55,"words":464},"y":"a","t":"排序之比较器Comparable<T>"},["/posts/java/排序之比较器.html","/posts/java/%E6%8E%92%E5%BA%8F%E4%B9%8B%E6%AF%94%E8%BE%83%E5%99%A8","/posts/java/排序之比较器.md","/posts/java/%E6%8E%92%E5%BA%8F%E4%B9%8B%E6%AF%94%E8%BE%83%E5%99%A8.md"]],
  ["v-18d1297e","/posts/java/%E6%8E%92%E5%BA%8F%E4%B9%8B%E6%AF%94%E8%BE%83%E5%99%A8Comparator-T.html",{"a":"郑天祺","d":1577964840000,"l":"2020年1月2日","c":["java基础"],"g":["java"],"e":"<h1> 一、Comparator和Comparable区别</h1>\n<p>​\t\tComparator，又名比较器，是为了比较两个对象的大小而抽象出的一个接口，使用比较多。在java.util下。比较功能，对一些对象的集合施加了一个整体排序 。 可以将比较器传递给排序方法（如Collections.sort或Arrays.sort ），以便对排序顺序进行精确控制。</p>\n<p>​\t\tComparable，这个接口往往是可比较类实现的。在 java.lang 包下。Comparable接口对实现它的每个类的对象强加一个整体排序。 这个排序被称为类的自然排序。该接口有且只有一个方法int compareTo(T o)所以继承此接口需要实现该方法。compareTo返回值-1、0、1。  Collections.sort （和Arrays.sort ）可以自动对实现此接口的对象进行列表（和数组）排序。</p>","r":{"minutes":1.34,"words":402},"y":"a","t":"排序之比较器Comparator<T>"},["/posts/java/排序之比较器Comparator-T.html","/posts/java/%E6%8E%92%E5%BA%8F%E4%B9%8B%E6%AF%94%E8%BE%83%E5%99%A8Comparator-T","/posts/java/排序之比较器Comparator-T.md","/posts/java/%E6%8E%92%E5%BA%8F%E4%B9%8B%E6%AF%94%E8%BE%83%E5%99%A8Comparator-T.md"]],
  ["v-5da32946","/posts/java/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D.html",{"a":"郑天祺","d":1567369380000,"l":"2019年9月2日","c":["可信"],"g":["可信","加密算法"],"e":"<h1> 一、数字签名概念</h1>\n<p>​\t数字签名技术是消息传递进行加密获得的签名。如HTTP请求时将请求体加密。数字签名可以用于证实数字内容的完整性和来源。常见的数字签名算法：<strong>椭圆曲线数字签名算法</strong>。。。</p>\n<h1> 二、数字签名的流程</h1>\n<h2> （1）椭圆曲线数字签名算法:</h2>\n<h3> 生成数字签名</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code>获取消息m的数字摘要<span class=\"token class-name\">Hm</span> 即 <span class=\"token class-name\">Hm</span> <span class=\"token operator\">=</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n使用<span class=\"token constant\">RFC6979</span>协议，通过私钥pk和m生成确定随机数k<span class=\"token punctuation\">;</span>\n计算<span class=\"token class-name\">R</span> <span class=\"token operator\">=</span> k <span class=\"token operator\">*</span> <span class=\"token class-name\">G</span>，其中<span class=\"token class-name\">R</span>为曲线上的一点，取其横坐标r作为数字签名的一部分，然后计算s，即s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Hm</span> <span class=\"token operator\">+</span> r <span class=\"token operator\">*</span> pk<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> k<span class=\"token punctuation\">;</span>\n得到消息m的数字签名为<span class=\"token class-name\">Sig</span> <span class=\"token operator\">=</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>r<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">&gt;</span></span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.7,"words":509},"y":"a","t":"数字签名"},["/posts/java/数字签名.html","/posts/java/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D","/posts/java/数字签名.md","/posts/java/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D.md"]],
  ["v-ead4e8d4","/posts/java/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.html",{"a":"郑天祺","d":1567268100000,"l":"2019年9月1日","c":["java基础"],"g":["文件上传"],"e":"<h2> 1、Content-Type介绍</h2>\n<p><strong>Content-Type</strong>是指http/https发送信息至服务器时的内容编码类型，contentType用于表明发送数据流的类型，服务器根据编码类型使用特定的解析方式，获取数据流中的数据。</p>\n<p>在网络请求中，常见的Content-Type有：</p>\n<h3> 1.1、常见的页面资源类型</h3>\n<p>​\ttext/html，text/plain，text/css，text/javascript，image/jpeg，image/png，image/gif等；</p>\n<p>​\t常见的页面提交或上传文件类型</p>","r":{"minutes":1.58,"words":475},"y":"a","t":"文件上传之Content-Type"},["/posts/java/文件上传.html","/posts/java/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0","/posts/java/文件上传.md","/posts/java/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.md"]],
  ["v-e6bf3f22","/posts/java/%E6%B1%A0%E5%8C%96%E4%B9%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0.html",{"a":"郑天祺","d":1567332840000,"l":"2019年9月1日","c":["java基础"],"g":["java","多线程"],"e":"<p>java中池化技术是提前保存大量的资源，以备不时之需以及重复使用。</p>\n<h2> 1、池化技术</h2>\n<p>Tips：不是深度学习中的卷积和赤化</p>\n<p>在实际应用当做，分配内存、创建进程、线程都会设计到一些系统调用，系统调用需要导致程序从用户态切换到内核态，是非常耗时的操作。因此，当程序中需要频繁的进行内存申请释放，进程、线程创建销毁等操作时，通常会使用内存池、进程池、线程池技术来提升程序的性能。</p>\n<p>进程池、线程池：先启动若干数量的线程，并让这些线程都处于睡眠状态，当需要一个开辟一个线程去做具体的工作时，就会唤醒线程池中的某一个睡眠线程，让它去做具体工作，当工作完成后，线程又处于睡眠状态，而不是将线程销毁。当线程数达到一定数量时，可以在队列中等待。</p>","r":{"minutes":11.26,"words":3377},"y":"a","t":"池化之线程池"},["/posts/java/池化之线程池.html","/posts/java/%E6%B1%A0%E5%8C%96%E4%B9%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0","/posts/java/池化之线程池.md","/posts/java/%E6%B1%A0%E5%8C%96%E4%B9%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0.md"]],
  ["v-25f60d02","/posts/java/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96-%E7%AE%80%E5%8D%95%E6%B5%81%E7%A8%8B.html",{"a":"郑天祺","d":1577099400000,"l":"2019年12月23日","c":["大数据"],"g":["HADOOP"],"e":"<h1> 一、场景</h1>\n<p>玩家每天游戏的各种操作（登录，充值等），这些行为都会记录到日志中，根据这些日志信息统计并分析用户行为。</p>\n<h2> （1）、时延</h2>\n<p>​\t\t由于 Hadoop MapReduce 底层设计因素，在进行计算的过程中，在 Map 阶段的处理结果会写入磁盘中，在 Reduce 阶段再去下载 Map 阶段处理完的结果，Reduce 计算完毕后的结果又会回写磁盘中。</p>\n<p>​\t\t这样反复操作磁盘，I/O 开销很大，所耗费的时间自然也就偏高。这就意味着，Hadoop MapReduce 计算模型适合处理 批处理任务，而对实时统计任务则不适合，如 股票交易系统，银行交易系统。</p>","r":{"minutes":4.52,"words":1357},"y":"a","t":"用户行为特征提取"},["/posts/java/特征提取-简单流程.html","/posts/java/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96-%E7%AE%80%E5%8D%95%E6%B5%81%E7%A8%8B","/posts/java/特征提取-简单流程.md","/posts/java/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96-%E7%AE%80%E5%8D%95%E6%B5%81%E7%A8%8B.md"]],
  ["v-2ba24008","/posts/java/%E7%90%86%E8%A7%A3IO%E9%98%BB%E5%A1%9E%E4%B8%8E%E9%9D%9E%E9%98%BB%E5%A1%9E.html",{"a":"郑天祺","d":1567186440000,"l":"2019年8月31日","c":["网络"],"g":["IO","阻塞与非阻塞"],"e":"<h2> 1、饭店吃饭的例子</h2>\n<p>A君喜欢下馆子吃饭，服务员点完餐后，A君一直坐在座位上等待厨师炒菜，什么事情也没有干，过了一会服务员端上饭菜后，A君就开吃了 -- 【阻塞I/O】</p>\n<p>B君也喜欢下馆子，服务员点完餐后，B君看这个服务员长得不错便前去搭讪，一直和服务员聊人生理想，并时不时的打听自己的饭做好了没有，过了一会饭也做好了，B君也撩到了美女服务员的微信号 -- 【非阻塞I/O 】</p>\n<h2> 2、阻塞与非阻塞调用对比</h2>\n<figure><img src=\"/assets/images/阻塞与非阻塞调用对比.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>","r":{"minutes":4.59,"words":1377},"y":"a","t":"理解IO阻塞与非阻塞"},["/posts/java/理解IO阻塞与非阻塞.html","/posts/java/%E7%90%86%E8%A7%A3IO%E9%98%BB%E5%A1%9E%E4%B8%8E%E9%9D%9E%E9%98%BB%E5%A1%9E","/posts/java/理解IO阻塞与非阻塞.md","/posts/java/%E7%90%86%E8%A7%A3IO%E9%98%BB%E5%A1%9E%E4%B8%8E%E9%9D%9E%E9%98%BB%E5%A1%9E.md"]],
  ["v-62a9a386","/posts/java/%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E7%9A%84%E7%9F%A5%E8%AF%86.html",{"a":"郑天祺","d":1574279160000,"l":"2019年11月21日","c":["java基础"],"g":["线程"],"e":"<h1> 一、线程之间的通信机制</h1>\n<p>在命令式编程中：线程之间的通信机制有两种：共享内存和消息传递。</p>\n<p>1）在共享内存的并发模型里，线程之间共享程序的公共状态，线程之间通过写-读内存中的公共状态来隐式进行通信。</p>\n<p>2）在消息传递的并发模型里，线程之间没有公共状态，线程之间必须通过明确的发送消息来显示进行通信。</p>\n<p>Java的并发采用的是共享内存模型，Java线程之间的通信总是隐式进行，整个通信过程对程序员完全透明。</p>\n<p>简单例子：</p>\n<p>​    全局变量A，方法B和C都对A进行操作，B和C就可以利用A进行通讯。</p>\n<h1> 二、JMM （JAVA 内存模型）</h1>","r":{"minutes":4.96,"words":1489},"y":"a","t":"线程相关的知识"},["/posts/java/线程相关的知识.html","/posts/java/%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E7%9A%84%E7%9F%A5%E8%AF%86","/posts/java/线程相关的知识.md","/posts/java/%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E7%9A%84%E7%9F%A5%E8%AF%86.md"]],
  ["v-56aa1363","/posts/java/%E8%87%AA%E6%97%8B%E9%94%81.html",{"a":"郑天祺","d":1567256040000,"l":"2019年8月31日","c":["java基础"],"g":["锁"],"e":"<h1> 自旋锁</h1>\n<h2> 1、自旋锁概念（spinlock）</h2>\n<p>是指当一个线程在获取锁的时候，如果锁已经被其它线程获取，那么该线程将循环等待，然后不断的判断锁是否能够被成功获取，直到获取到锁才会退出循环。</p>\n<p>获取锁的线程一直处于活跃状态，但是并没有执行任何有效的任务，使用这种锁会造成busy-waiting。</p>\n<h2> 2、自旋锁的优点 :</h2>\n<p>自旋锁不会使线程状态发生切换，一直处于用户态，即线程一直都是active的；不会使线程进入阻塞状态，减少了不必要的上下文切换，执行速度快非自旋锁在获取不到锁的时候会进入阻塞状态，从而进入内核态，当获取到锁的时候需要从内核态恢复，需要线程上下文切换。 （线程被阻塞后便进入内核（Linux）调度状态，这个会导致系统在用户态与内核态之间来回切换，严重影响锁的性能）</p>","r":{"minutes":2.52,"words":756},"y":"a","t":"自旋锁"},["/posts/java/自旋锁.html","/posts/java/%E8%87%AA%E6%97%8B%E9%94%81","/posts/java/自旋锁.md","/posts/java/%E8%87%AA%E6%97%8B%E9%94%81.md"]],
  ["v-7809d5c4","/posts/java/%E8%AF%BB%E5%86%99%E9%94%81.html",{"a":"郑天祺","d":1567256880000,"l":"2019年8月31日","c":["java基础"],"g":["锁"],"e":"<h1> 4、读写锁</h1>\n<h2> 1、读写锁介绍：</h2>\n<p>​        ReadWriteLock同Lock一样也是一个接口，提供了readLock和writeLock两种锁的操作机制，一个是只读的锁，一个是写锁。</p>\n<p>​        理论上，读写锁比互斥锁允许对于共享数据更大程度的并发。与互斥锁相比，读写锁是否能够提高性能取决于读写数据的频率、读取和写入操作的持续时间、以及读线程和写线程之间的竞争。</p>\n<p>​        一些业务场景中，大部分 只是读数据，写数据很少，如果仅仅是读数据的话并不会影响数据正确性（出现脏读），而如果在这种业务场景下，依然使用独占锁的话，很显然这将是出现性能瓶颈的地方。 针对这种读多写少的情况，java还提供了另外一个实现Lock接口的ReentrantReadWriteLock(读写锁)。读写所允许同一时刻被多个读线程访问，但是在写线程访问时，所有的读线程和其他的写线程都会被阻塞。</p>","r":{"minutes":5.21,"words":1562},"y":"a","t":"读写锁"},["/posts/java/读写锁.html","/posts/java/%E8%AF%BB%E5%86%99%E9%94%81","/posts/java/读写锁.md","/posts/java/%E8%AF%BB%E5%86%99%E9%94%81.md"]],
  ["v-5e856e98","/posts/java/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.html",{"a":"郑天祺","d":1578064860000,"l":"2020年1月3日","c":["设计模式"],"g":["设计模式"],"e":"<p>最近一直听大佬说责任链模式，决定看看到底是什么。本文由翻阅《大话设计模式》得</p>\n<h1> 一、引言</h1>\n<p>​\t\t击鼓传花游戏，也称传彩球。中国民间游戏，流行于中国各地。数人、十数人或数十人围成一个圆圈席地而坐，另外一个人背对着人圈以槌击鼓。鼓响时，开始传花，花由一个人的手里传。</p>\n<p>​\t\t有时候，花束就开始依次传递，鼓声一落，假如花束在某人手中，则该人就得饮酒（多是唱歌、跳舞、说笑话；或回答问题、猜谜、按纸条规定行事等）。</p>\n<p>​\t\t击鼓传花便是责任链模式的应用。在责任链模式里，很多的对象由每一个对象对其下家的引用而联接起来形成一条链。</p>\n<p>​\t\t请求在这个链上传递，直到链上的某一个对象决定处理此请求。发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织链和分配责任。</p>","r":{"minutes":3.21,"words":964},"y":"a","t":"责任链模式"},["/posts/java/责任链模式.html","/posts/java/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F","/posts/java/责任链模式.md","/posts/java/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.md"]],
  ["v-2f5cfd06","/posts/java/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81.html",{"a":"郑天祺","d":1567264080000,"l":"2019年8月31日","c":["java基础"],"g":["锁"],"e":"<h2> 1、轻量级锁</h2>\n<p>锁撤销升级为轻量级锁之后，那么对象的Markword也会进行相应的的变化。</p>\n<p>​    下面先简单描述下锁撤销之后，升级为轻量级锁的过程：</p>\n<p>​    a) 线程在自己的栈桢中创建锁记录 LockRecord。\n​     b) 将锁对象的对象头中的MarkWord复制到线程的刚刚创建的锁记录中。\n​     c) 将锁记录中的Owner指针指向锁对象。\n​     d) 将锁对象的对象头的MarkWord替换为指向锁记录的指针。</p>\n<h2> 2、锁消除</h2>\n<p>由于偏向锁失效了，那么接下来就得把该锁撤销，锁撤销的开销花费还是挺大的，其大概的过程如下：</p>","r":{"minutes":1.31,"words":393},"y":"a","t":"轻量级锁"},["/posts/java/轻量级锁.html","/posts/java/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81","/posts/java/轻量级锁.md","/posts/java/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81.md"]],
  ["v-53b4a8ee","/posts/java/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93.html",{"a":"ztq","d":1667904660000,"l":"2022年11月8日","c":["数据库"],"g":["达梦"],"e":"<p>国产oracle系数据库学习笔记</p>\n<h1> 一 安装</h1>\n<h2> 1 规划安装用户和用户组：</h2>\n<p>不推荐使用 root 安装，规划单独的用户安装。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token punctuation\">[</span>root<span class=\"token annotation punctuation\">@KylinDCA03</span> opt<span class=\"token punctuation\">]</span># groupadd dinstall\n<span class=\"token punctuation\">[</span>root<span class=\"token annotation punctuation\">@KylinDCA03</span> opt<span class=\"token punctuation\">]</span># useradd <span class=\"token operator\">-</span>g dinstall <span class=\"token operator\">-</span>m <span class=\"token operator\">-</span>d <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>dmdba <span class=\"token operator\">-</span>s <span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>bash dmdba\n<span class=\"token punctuation\">[</span>root<span class=\"token annotation punctuation\">@KylinDCA03</span> opt<span class=\"token punctuation\">]</span># passwd dmdba\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":31.34,"words":9402},"y":"a","t":"达梦数据库"},["/posts/java/达梦数据库.html","/posts/java/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93","/posts/java/达梦数据库.md","/posts/java/%E8%BE%BE%E6%A2%A6%E6%95%B0%E6%8D%AE%E5%BA%93.md"]],
  ["v-b8e59ce6","/posts/java/%E8%BF%90%E7%AE%97%E7%AC%A6.html",{"a":"郑天祺","d":1598952240000,"l":"2020年9月1日","c":["java基础"],"g":["运算符"],"e":"<h2> ^ 位异或运算</h2>\n<p>运算规则：两个数转为二进制，然后从高位开始比较，如果  相同  则为0，不相同  则为1</p>\n<p>比如：8^11</p>\n<p>8转为二进制是1000，11转为二进制是1011.从高位开始比较得到的是：0011.然后二进制转为十进制，就是Integer.parseInt(\"0011\",2)=3</p>\n","r":{"minutes":0.37,"words":110},"y":"a","t":"运算符"},["/posts/java/运算符.html","/posts/java/%E8%BF%90%E7%AE%97%E7%AC%A6","/posts/java/运算符.md","/posts/java/%E8%BF%90%E7%AE%97%E7%AC%A6.md"]],
  ["v-aef92024","/posts/java/%E9%87%8D%E6%94%BE%E6%94%BB%E5%87%BB.html",{"a":"郑天祺","d":1567626840000,"l":"2019年9月5日","c":["可信"],"g":["网络安全","可信"],"e":"<h1> 1、概念</h1>\n<p>​\t重放攻击(Replay Attacks)又称重播攻击、回放攻击，是指攻击者发送一个目的主机已接收过的包，来达到欺骗系统的目的，主要用于身份认证过程，破坏认证的正确性。</p>\n<p>​\t重放攻击可以由发起者，也可以由拦截并重发该数据的敌方进行。攻击者利用网络监听或者其他方式盗取认证凭据，之后再把它重新发给认证服务器。</p>\n<p>​\t重放攻击在任何网络通过程中都可能发生，是计算机世界黑客常用的攻击方式之一。</p>\n<p>（来自百度百科）</p>\n<h1> 2、来源</h1>\n<p>一个存在安全漏洞的登录系统：</p>\n<ol>\n<li>\n<p>前端web页面用户输入账号、密码，点击登录。</p>\n</li>\n<li>\n<p>请求提交之前，web端首先通过客户端脚本如javascript对密码原文进行md5加密。</p>\n</li>\n<li>\n<p>提交账号、md5之后的密码</p>\n</li>\n<li>\n<p>请求提交至后端，验证账号与密码是否与数据库中的一致，一致则认为登录成功，反之失败。</p>\n</li>\n</ol>","r":{"minutes":2.53,"words":758},"y":"a","t":"重放攻击"},["/posts/java/重放攻击.html","/posts/java/%E9%87%8D%E6%94%BE%E6%94%BB%E5%87%BB","/posts/java/重放攻击.md","/posts/java/%E9%87%8D%E6%94%BE%E6%94%BB%E5%87%BB.md"]],
  ["v-12af33c1","/posts/java/%E9%87%8D%E6%9E%84.html",{"a":"ztq","d":1618704420000,"l":"2021年4月18日","c":["设计模式"],"g":["重构"],"e":"<h1> 1、什么是重构</h1>\n<p>​\t\t在百度百科里给出的定义是:在不改变软件系统外部行为的前提下，改善它的内部结构。通过调整程序代码改善软件的质量、性能，使其程序的设计模式和架构更趋合理，提高软件的扩展性和维护性。</p>\n<p>​\t\t也许有人会问，为什么不在项目开始时多花些时间把设计做好，而要以后花时间来重构呢？</p>\n<p>​\t\t首先要知道一个完美得可以预见未来任何变化的设计，或一个灵活得可以容纳任何扩展的设计是不存在的。系统设计人员对即将着手的项目往往只能从大方向予以把控，而无法知道每个细枝末节。</p>\n<p>​\t\t其次永远不变的就是变化，提出需求的用户往往要在软件成型后，才开始\"品头论足\"，系统设计人员毕竟不是先知先觉的神仙，功能的变化导致设计的调整再所难免。</p>","r":{"minutes":25.58,"words":7674},"y":"a","t":"重构"},["/posts/java/重构.html","/posts/java/%E9%87%8D%E6%9E%84","/posts/java/重构.md","/posts/java/%E9%87%8D%E6%9E%84.md"]],
  ["v-f2a9ac90","/posts/java/%E9%94%81%E7%B2%97%E5%8C%96.html",{"a":"郑天祺","d":1567258320000,"l":"2019年8月31日","c":["java基础"],"g":["锁"],"e":"<p>转自：<a href=\"https://blog.csdn.net/qq_26222859/article/details/80546917\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/qq_26222859/article/details/80546917</a></p>\n<p>参考：<a href=\"https://www.jianshu.com/p/f05423a21e78\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.jianshu.com/p/f05423a21e78</a></p>","r":{"minutes":2.25,"words":675},"y":"a","t":"锁粗化"},["/posts/java/锁粗化.html","/posts/java/%E9%94%81%E7%B2%97%E5%8C%96","/posts/java/锁粗化.md","/posts/java/%E9%94%81%E7%B2%97%E5%8C%96.md"]],
  ["v-93c4c91e","/posts/java/%E9%98%BB%E5%A1%9E%E9%94%81.html",{"a":"郑天祺","d":1567256400000,"l":"2019年8月31日","c":["java基础"],"g":["锁"],"e":"<h1> 阻塞锁</h1>\n<h2> 1、阻塞锁优势</h2>\n<p>​\t与自旋锁不同，改变了线程的运行状态。</p>\n<p>​    在JAVA环境中，线程Thread有如下几个状态：</p>\n<ol>\n<li>新建状态</li>\n<li>就绪状态</li>\n<li>运行状态</li>\n<li>阻塞状态</li>\n<li>死亡状态</li>\n</ol>\n<p>​      阻塞锁，可以说是让线程进入阻塞状态进行等待，当获得相应的信号（唤醒，时间） 时，才可以进入线程的准备就绪状态，准备就绪状态的所有线程，通过竞争，进入运行状态。\n​       JAVA中，能够进入 / 退出、阻塞状态或包含阻塞锁的方法有 ，synchronized 关键字（其中的重量锁），ReentrantLock，Object.wait() / notify() ，LockSupport.park() / unpart()</p>","r":{"minutes":2.78,"words":834},"y":"a","t":"阻塞锁"},["/posts/java/阻塞锁.html","/posts/java/%E9%98%BB%E5%A1%9E%E9%94%81","/posts/java/阻塞锁.md","/posts/java/%E9%98%BB%E5%A1%9E%E9%94%81.md"]],
  ["v-0176754a","/posts/spring/Spring-Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html",{"a":"郑天祺","d":1573750320000,"l":"2019年11月15日","c":["java基础"],"g":["spring"],"e":"<h1> 一、Spring Bean生命周期</h1>\n<figure><img src=\"/assets/images/clip_image002.png\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>\n<p>解释：</p>\n<ul>\n<li>\n<p>Spring 通过我们的配置，如 @ComponentScan 定义的扫描路径去找到带有 @Component     的类，这个过程就是一个资源定位的过程。</p>\n</li>\n<li>\n<p>一旦找到了资源，那么它就开始解析，并且将定义的信息保存起来。注意，此时还没有初始化 Bean ，也就没有 Bean 实例，它有的仅仅是 Bean 的定义。</p>\n</li>\n<li>\n<p>然后就会把 Bean 定义发布到 Spring IoC 容器中，此时，IoC容器也只有 Bean 的定义，还是没有 Bean 的实例生成。</p>\n<p>在默认的情况下，Spring会继续去完成Bean的实例化和依赖注入， 这样从IoC容器中就可以得到一个依赖注入完成的Bean。但是，有些Bean会在取的时候才初始化和依赖注入。如下图：</p>\n</li>\n</ul>","r":{"minutes":2.19,"words":658},"y":"a","t":"Spring Bean作用域与生命周期"},["/posts/spring/Spring-Bean生命周期.html","/posts/spring/Spring-Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F","/posts/spring/Spring-Bean生命周期.md","/posts/spring/Spring-Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.md"]],
  ["v-482aa01e","/posts/spring/springboot%E6%89%93jar%E5%8C%85%E5%88%86%E7%A6%BB%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6.html",{"a":"ztq","d":1679044860000,"l":"2023年3月17日","c":["CICD"],"g":["打包","运维"],"e":"<h1> 一、配置pom文件插件</h1>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><pre class=\"language-xml\"><code>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token comment\">&lt;!-- jar包名 --&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>finalName</span><span class=\"token punctuation\">&gt;</span></span>${project.artifactId}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>finalName</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token comment\">&lt;!-- 分离lib --&gt;</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.apache.maven.plugins<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>maven-dependency-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>executions</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>execution</span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">&gt;</span></span>copy-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>phase</span><span class=\"token punctuation\">&gt;</span></span>package<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>phase</span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goals</span><span class=\"token punctuation\">&gt;</span></span>\n                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goal</span><span class=\"token punctuation\">&gt;</span></span>copy-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goal</span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goals</span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">&gt;</span></span>\n                            <span class=\"token comment\">&lt;!-- 依赖包输出目录，将来不打进jar包里 --&gt;</span>\n                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>outputDirectory</span><span class=\"token punctuation\">&gt;</span></span>${project.build.directory}/lib<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>outputDirectory</span><span class=\"token punctuation\">&gt;</span></span>\n                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>excludeTransitive</span><span class=\"token punctuation\">&gt;</span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>excludeTransitive</span><span class=\"token punctuation\">&gt;</span></span>\n                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>stripVersion</span><span class=\"token punctuation\">&gt;</span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>stripVersion</span><span class=\"token punctuation\">&gt;</span></span>\n                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>includeScope</span><span class=\"token punctuation\">&gt;</span></span>runtime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>includeScope</span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>execution</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>executions</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token comment\">&lt;!-- copy资源文件 --&gt;</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.apache.maven.plugins<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>maven-resources-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>3.3.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>executions</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>execution</span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">&gt;</span></span>copy-resources<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>phase</span><span class=\"token punctuation\">&gt;</span></span>package<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>phase</span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goals</span><span class=\"token punctuation\">&gt;</span></span>\n                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goal</span><span class=\"token punctuation\">&gt;</span></span>copy-resources<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goal</span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goals</span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">&gt;</span></span>\n                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resources</span><span class=\"token punctuation\">&gt;</span></span>\n                                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resource</span><span class=\"token punctuation\">&gt;</span></span>\n                                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>directory</span><span class=\"token punctuation\">&gt;</span></span>src/main/resources<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>directory</span><span class=\"token punctuation\">&gt;</span></span>\n                                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resource</span><span class=\"token punctuation\">&gt;</span></span>\n                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resources</span><span class=\"token punctuation\">&gt;</span></span>\n                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>outputDirectory</span><span class=\"token punctuation\">&gt;</span></span>${project.build.directory}/resources<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>outputDirectory</span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>execution</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>executions</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token comment\">&lt;!-- 打jar包时忽略配置文件 --&gt;</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.apache.maven.plugins<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>maven-jar-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>excludes</span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclude</span><span class=\"token punctuation\">&gt;</span></span>**/*.yml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclude</span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclude</span><span class=\"token punctuation\">&gt;</span></span>**/*.xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclude</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>excludes</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token comment\">&lt;!-- spring boot repackage --&gt;</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.6.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>layout</span><span class=\"token punctuation\">&gt;</span></span>ZIP<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>layout</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>includes</span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>include</span><span class=\"token punctuation\">&gt;</span></span>\n                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>non-exists<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>non-exists<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>include</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>includes</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>executions</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>execution</span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goals</span><span class=\"token punctuation\">&gt;</span></span>\n                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>goal</span><span class=\"token punctuation\">&gt;</span></span>repackage<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goal</span><span class=\"token punctuation\">&gt;</span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>goals</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>execution</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>executions</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token comment\">&lt;!-- maven 打包时跳过测试 --&gt;</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.apache.maven.plugins<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>maven-surefire-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.12.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">&gt;</span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>skip</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>skip</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.76,"words":527},"y":"a","t":"springboot打jar包分离资源文件"},["/posts/spring/springboot打jar包分离资源文件.html","/posts/spring/springboot%E6%89%93jar%E5%8C%85%E5%88%86%E7%A6%BB%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6","/posts/spring/springboot打jar包分离资源文件.md","/posts/spring/springboot%E6%89%93jar%E5%8C%85%E5%88%86%E7%A6%BB%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6.md"]],
  ["v-333dedde","/posts/spring/SpringCloud-Alibaba%E6%95%B4%E5%90%88Nacos%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0.html",{"a":"郑天祺","d":1575386280000,"l":"2019年12月3日","c":["spring",""],"g":["SpringCloud"],"e":"<h1> 一、服务注册</h1>\n<h2> 1、引入依赖</h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>alibaba<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span>discovery<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.73,"words":820},"y":"a","t":"SpringCloud-Alibaba整合Nacos服务注册发现"},["/posts/spring/SpringCloud-Alibaba整合Nacos服务注册发现.html","/posts/spring/SpringCloud-Alibaba%E6%95%B4%E5%90%88Nacos%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0","/posts/spring/SpringCloud-Alibaba整合Nacos服务注册发现.md","/posts/spring/SpringCloud-Alibaba%E6%95%B4%E5%90%88Nacos%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%8F%91%E7%8E%B0.md"]],
  ["v-162dc78b","/posts/spring/SpringCloud-client%E9%85%8D%E7%BD%AE.html",{"a":"郑天祺","d":1607945520000,"l":"2020年12月14日","c":["spring"],"g":["SpringCloud"],"e":"<h1> 1、pom.xml添加starter依赖</h1>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>mvnrepository<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>artifact<span class=\"token operator\">/</span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">/</span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>alibaba<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span>config <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>alibaba<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span>config<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.62,"words":185},"y":"a","t":"SpringCloud client配置"},["/posts/spring/SpringCloud-client配置.html","/posts/spring/SpringCloud-client%E9%85%8D%E7%BD%AE","/posts/spring/SpringCloud-client配置.md","/posts/spring/SpringCloud-client%E9%85%8D%E7%BD%AE.md"]],
  ["v-196985c4","/posts/spring/SpringCloud-Hystrix%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE.html",{"a":"郑天祺","d":1607945580000,"l":"2020年12月14日","c":["spring",""],"g":["SpringCloud"],"e":"<p>Hystrix修改默认配置有两种方式，注解参数注入，和application.yml配置文件配置。</p>\n<h1> 1、方法一：注解参数注入</h1>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/helloHystrixA/{string}\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@HystrixCommand</span><span class=\"token punctuation\">(</span>fallbackMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"testFallback\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 请求失败降级回调方法，值为方法名，不需要括号</span>\n        commandProperties <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">// 针对单个方法的配置</span>\n            <span class=\"token annotation punctuation\">@HystrixProperty</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"circuitBreaker.enabled\"</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 开启熔断器，可不加默认为true</span>\n            <span class=\"token annotation punctuation\">@HystrixProperty</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"circuitBreaker.errorThresholdPercentage\"</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"50\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 请求错误超过50%，开启熔断器</span>\n            <span class=\"token annotation punctuation\">@HystrixProperty</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"circuitBreaker.requestVolumeThreshold\"</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 一个周期(十秒)内超过10个请求才进行进行容错率判断</span>\n            <span class=\"token annotation punctuation\">@HystrixProperty</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"circuitBreaker.sleepWindowInMilliseconds\"</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"10000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 开启熔断器后过10秒再尝试访问</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">helloHystirxA</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">String</span> string<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Nacos服务发现：远端调用成功！ result=\"</span>\n            <span class=\"token operator\">+</span> restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://nacos.provider.demo/hello/\"</span> <span class=\"token operator\">+</span> string<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.2,"words":661},"y":"a","t":"SpringCloud Hystrix参数配置"},["/posts/spring/SpringCloud-Hystrix参数配置.html","/posts/spring/SpringCloud-Hystrix%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE","/posts/spring/SpringCloud-Hystrix参数配置.md","/posts/spring/SpringCloud-Hystrix%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE.md"]],
  ["v-04b60d4e","/posts/spring/SpringCloud-Ribbon%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE.html",{"a":"郑天祺","d":1607945580000,"l":"2020年12月14日","c":["spring",""],"g":["SpringCloud"],"e":"<h1> Ribbon策略类型</h1>\n<figure><img src=\"/assets/images/image-20201214123508379.png\" alt=\"image-20201214123508379\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20201214123508379</figcaption></figure>\n<p>Ribbon负载均衡策略为轮询，如果要修改默认策略 ，有两种方法，分别是创建配置类，和配置application.yml。</p>\n<h1> 方法一：创建配置类</h1>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code> <span class=\"token annotation punctuation\">@Configuration</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRibbonConfig</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">IRule</span> <span class=\"token function\">ribbonRule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//随机策略</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RandomRule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n然后在启动类上加注解：\n<span class=\"token annotation punctuation\">@RibbonClient</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"nacos.provider.demo\"</span><span class=\"token punctuation\">,</span> configuration <span class=\"token operator\">=</span> <span class=\"token class-name\">MyRibbonConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//name为服务提供者名称</span>\n\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.86,"words":257},"y":"a","t":"SpringCloud Ribbon参数配置"},["/posts/spring/SpringCloud-Ribbon参数配置.html","/posts/spring/SpringCloud-Ribbon%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE","/posts/spring/SpringCloud-Ribbon参数配置.md","/posts/spring/SpringCloud-Ribbon%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE.md"]],
  ["v-5d0db34d","/posts/spring/SpringCloud%E4%BD%BF%E7%94%A8Feign-Ribbon-Hystrix.html",{"a":"郑天祺","d":1607949540000,"l":"2020年12月14日","c":["spring"],"g":["SpringCloud"],"e":"<h1> 1、引入依赖</h1>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>actuator<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>openfeign<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>alibaba<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span>discovery<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>netflix<span class=\"token operator\">-</span>hystrix<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.31,"words":392},"y":"a","t":"SpringCloud使用Feign+Ribbon+Hystrix"},["/posts/spring/SpringCloud使用Feign-Ribbon-Hystrix.html","/posts/spring/SpringCloud%E4%BD%BF%E7%94%A8Feign-Ribbon-Hystrix","/posts/spring/SpringCloud使用Feign-Ribbon-Hystrix.md","/posts/spring/SpringCloud%E4%BD%BF%E7%94%A8Feign-Ribbon-Hystrix.md"]],
  ["v-1b8bf3cf","/posts/spring/SpringCloud%E4%BD%BF%E7%94%A8Feign-Ribbon.html",{"a":"郑天祺","d":1607949540000,"l":"2020年12月14日","c":["spring",""],"g":["SpringCloud"],"e":"<h1> 1、引入依赖</h1>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>alibaba<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span>discovery<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>netflix<span class=\"token operator\">-</span>ribbon<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.59,"words":478},"y":"a","t":"SpringCloud使用Feign+Ribbon"},["/posts/spring/SpringCloud使用Feign-Ribbon.html","/posts/spring/SpringCloud%E4%BD%BF%E7%94%A8Feign-Ribbon","/posts/spring/SpringCloud使用Feign-Ribbon.md","/posts/spring/SpringCloud%E4%BD%BF%E7%94%A8Feign-Ribbon.md"]],
  ["v-8d2d4300","/posts/spring/SpringCloud%E4%BD%BF%E7%94%A8Feign.html",{"a":"郑天祺","d":1607949480000,"l":"2020年12月14日","c":["spring",""],"g":["SpringCloud"],"e":"<h1> 1、引入依赖</h1>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>openfeign<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>alibaba<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span>discovery<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.98,"words":295},"y":"a","t":"SpringCloud使用Feign"},["/posts/spring/SpringCloud使用Feign.html","/posts/spring/SpringCloud%E4%BD%BF%E7%94%A8Feign","/posts/spring/SpringCloud使用Feign.md","/posts/spring/SpringCloud%E4%BD%BF%E7%94%A8Feign.md"]],
  ["v-11f4e933","/posts/spring/SpringCloud%E4%BD%BF%E7%94%A8RestTemplate.html",{"a":"郑天祺","d":1607949420000,"l":"2020年12月14日","c":["spring",""],"g":["SpringCloud"],"e":"<h1> 1、引入依赖</h1>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>alibaba<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span>discovery<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.77,"words":232},"y":"a","t":"SpringCloud使用RestTemplate"},["/posts/spring/SpringCloud使用RestTemplate.html","/posts/spring/SpringCloud%E4%BD%BF%E7%94%A8RestTemplate","/posts/spring/SpringCloud使用RestTemplate.md","/posts/spring/SpringCloud%E4%BD%BF%E7%94%A8RestTemplate.md"]],
  ["v-3a0d7ffc","/posts/spring/SpringCloud%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5.html",{"a":"郑天祺","d":1607945460000,"l":"2020年12月14日","c":["spring"],"g":["SpringCloud"],"e":"<h1> 服务健康检查：</h1>\n<p>基于Spring Cloud体系，可以使用spring cloud  actuator组件</p>\n<h1> 1、POM依赖</h1>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n     <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n     <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>actuator<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.8,"words":239},"y":"a","t":"SpringCloud健康检查"},["/posts/spring/SpringCloud健康检查.html","/posts/spring/SpringCloud%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5","/posts/spring/SpringCloud健康检查.md","/posts/spring/SpringCloud%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5.md"]],
  ["v-369d2626","/posts/spring/SpringCloud%E5%BC%82%E5%B8%B8%E9%85%8D%E7%BD%AE.html",{"d":1607945640000,"l":"2020年12月14日","c":["spring"],"g":["SpringCloud"],"e":"<p css-module=\".\">1.【强制】Java 类库中定义的可以通过预检查方式规避的 RuntimeException 异常不应该通过catch 的方式来处理，比如:NullPointerException，IndexOutOfBoundsException 等等。\n说明:无法通过预检查的异常除外，比如，在解析字符串形式的数字时，不得不通过 catch NumberFormatException 来实现。\n正例:if (obj != null) {...}\n反例:try { obj.method(); } catch (NullPointerException e)</p>\n<p>2.【强制】异常不要用来做流程控制，条件控制。\n说明:异常设计的初衷是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。</p>","r":{"minutes":4.29,"words":1287},"y":"a","t":"SpringCloud异常配置"},["/posts/spring/SpringCloud异常配置.html","/posts/spring/SpringCloud%E5%BC%82%E5%B8%B8%E9%85%8D%E7%BD%AE","/posts/spring/SpringCloud异常配置.md","/posts/spring/SpringCloud%E5%BC%82%E5%B8%B8%E9%85%8D%E7%BD%AE.md"]],
  ["v-b676a5e8","/posts/spring/SpringCloud%E6%9C%8D%E5%8A%A1%E6%9E%84%E5%BB%BA.html",{"a":"郑天祺","d":1607945400000,"l":"2020年12月14日","c":["spring"],"g":["SpringCloud"],"e":"<h1> 1、添加依赖</h1>\n<p>建议使用官方提供的在线地址进行工程的初始化创建：<a href=\"https://start.spring.io\" target=\"_blank\" rel=\"noopener noreferrer\">https://start.spring.io</a></p>\n<p>添加Spring Cloud和Spring Cloud Alibaba依赖管理：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>properties<span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>java<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">&gt;</span></span><span class=\"token number\">1.8</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>java<span class=\"token punctuation\">.</span>version<span class=\"token operator\">&gt;</span>\n\t\t<span class=\"token operator\">&lt;</span>spring<span class=\"token operator\">-</span>cloud<span class=\"token punctuation\">.</span>version<span class=\"token operator\">&gt;</span><span class=\"token class-name\">Greenwich</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SR3</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>spring<span class=\"token operator\">-</span>cloud<span class=\"token punctuation\">.</span>version<span class=\"token operator\">&gt;</span>\n\t\t<span class=\"token operator\">&lt;</span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>alibaba<span class=\"token punctuation\">.</span>version<span class=\"token operator\">&gt;</span><span class=\"token number\">0.9</span><span class=\"token number\">.0</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RELEASE</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>alibaba<span class=\"token punctuation\">.</span>version<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>properties<span class=\"token operator\">&gt;</span>\n\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependencyManagement<span class=\"token punctuation\">&gt;</span></span>\n\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependencies<span class=\"token punctuation\">&gt;</span></span>\n\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span><span class=\"token class-name\">Spring</span> <span class=\"token class-name\">Cloud</span> <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n\t\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n\t\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>dependencies<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n\t\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">&gt;</span></span>$<span class=\"token punctuation\">{</span>spring<span class=\"token operator\">-</span>cloud<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">&gt;</span>\n\t\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>type<span class=\"token punctuation\">&gt;</span></span>pom<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>type<span class=\"token operator\">&gt;</span>\n\t\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>scope<span class=\"token punctuation\">&gt;</span></span><span class=\"token keyword\">import</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>scope<span class=\"token operator\">&gt;</span>\n\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span><span class=\"token class-name\">Spring</span> <span class=\"token class-name\">Cloud</span> <span class=\"token class-name\">Alibaba</span> <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n\t\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n\t\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>alibaba<span class=\"token operator\">-</span>dependencies<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n\t\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">&gt;</span></span>$<span class=\"token punctuation\">{</span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>alibaba<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">&gt;</span>\n\t\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>type<span class=\"token punctuation\">&gt;</span></span>pom<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>type<span class=\"token operator\">&gt;</span>\n\t\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>scope<span class=\"token punctuation\">&gt;</span></span><span class=\"token keyword\">import</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>scope<span class=\"token operator\">&gt;</span>\n\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependencies<span class=\"token operator\">&gt;</span>\n\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependencyManagement<span class=\"token operator\">&gt;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.19,"words":357},"y":"a","t":"SpringCloud服务构建"},["/posts/spring/SpringCloud服务构建.html","/posts/spring/SpringCloud%E6%9C%8D%E5%8A%A1%E6%9E%84%E5%BB%BA","/posts/spring/SpringCloud服务构建.md","/posts/spring/SpringCloud%E6%9C%8D%E5%8A%A1%E6%9E%84%E5%BB%BA.md"]],
  ["v-51332418","/posts/spring/SpringCloud%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C.html",{"a":"郑天祺","d":1607945520000,"l":"2020年12月14日","c":["spring"],"g":["SpringCloud"],"e":"<h1> 1、pom.xml添加starter依赖</h1>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>mvnrepository<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>artifact<span class=\"token operator\">/</span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">/</span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>alibaba<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span>discovery <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\t\n            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>alibaba<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span>discovery<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.8,"words":239},"y":"a","t":"SpringCloud服务注册"},["/posts/spring/SpringCloud服务注册.html","/posts/spring/SpringCloud%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C","/posts/spring/SpringCloud服务注册.md","/posts/spring/SpringCloud%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C.md"]],
  ["v-9f58c1c2","/posts/spring/SpringCloud%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9.html",{"a":"郑天祺","d":1607945520000,"l":"2020年12月14日","c":[],"g":["SpringCloud"],"e":"<p>基于Alibaba Nacos Spring Cloud（服务发现）、Spring Cloud OpenFeign（声明式调用，同时整合了熔断器、负载均衡）</p>\n<h1> 1、pom.xml添加starter依赖</h1>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code>\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token class-name\">Nacos</span>服务发现 <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>alibaba<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span>discovery<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 声明式调用 <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>openfeign<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 负载均衡 <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>netflix<span class=\"token operator\">-</span>ribbon<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 熔断器 <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">&gt;</span></span>\n\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">&gt;</span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">&gt;</span>\n\t\t\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">&gt;</span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>netflix<span class=\"token operator\">-</span>hystrix<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">&gt;</span>\n\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">&gt;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.56,"words":468},"y":"a","t":"SpringCloud服务消费"},["/posts/spring/SpringCloud服务消费.html","/posts/spring/SpringCloud%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9","/posts/spring/SpringCloud服务消费.md","/posts/spring/SpringCloud%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9.md"]],
  ["v-6cef594f","/posts/spring/SpringCloud%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE%E9%A1%B5%E9%9D%A2.html",{"a":"郑天祺","d":1607945460000,"l":"2020年12月14日","c":["spring"],"g":["SpringCloud"],"e":"<h1> 1、配置中心管理服务</h1>\n<p>1、配置 ID：Data ID</p>\n<figure><img src=\"/assets/images/image-20201214121332594.png\" alt=\"image-20201214121332594\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20201214121332594</figcaption></figure>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code>在 <span class=\"token class-name\">Nacos</span> <span class=\"token class-name\">Spring</span> <span class=\"token class-name\">Cloud</span> 中，dataId 的完整格式如下：$<span class=\"token punctuation\">{</span>prefix<span class=\"token punctuation\">}</span><span class=\"token operator\">-</span>$<span class=\"token punctuation\">{</span>spring<span class=\"token punctuation\">.</span>profile<span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>$<span class=\"token punctuation\">{</span>file<span class=\"token operator\">-</span>extension<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","r":{"minutes":1.2,"words":361},"y":"a","t":"SpringCloud管理配置页面"},["/posts/spring/SpringCloud管理配置页面.html","/posts/spring/SpringCloud%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE%E9%A1%B5%E9%9D%A2","/posts/spring/SpringCloud管理配置页面.md","/posts/spring/SpringCloud%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE%E9%A1%B5%E9%9D%A2.md"]],
  ["v-8916f478","/posts/spring/SpringCloud%E8%BF%90%E7%BB%B4%E6%8E%A5%E5%8F%A3.html",{"a":"郑天祺","d":1607945460000,"l":"2020年12月14日","c":["spring"],"g":["SpringCloud"],"e":"<p>注意：默认端点 path 前面有一级 /actuator ，例如：<a href=\"http://xn--zfry9hnb732h/actuator/info\" target=\"_blank\" rel=\"noopener noreferrer\">http://服务地址/actuator/info</a></p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Endpoint</span> <span class=\"token constant\">ID</span>\t<span class=\"token class-name\">Description</span>\nauditevents\t显示应用暴露的审计事件 <span class=\"token punctuation\">(</span>比如认证进入、订单失败<span class=\"token punctuation\">)</span>\ninfo\t显示应用的基本信息\nhealth\t显示应用的健康状态\nmetrics\t显示应用的度量信息\nmetrics<span class=\"token operator\">/</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span>\t显示应用指定名称的度量信息，例如：http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>localhost<span class=\"token operator\">:</span><span class=\"token number\">8080</span><span class=\"token operator\">/</span>actuator<span class=\"token operator\">/</span>metrics<span class=\"token operator\">/</span>system<span class=\"token punctuation\">.</span>cpu<span class=\"token punctuation\">.</span>count\nloggers\t显示和修改配置的loggers\nlogfile\t返回log file中的内容<span class=\"token punctuation\">(</span>如果logging<span class=\"token punctuation\">.</span>file或者logging<span class=\"token punctuation\">.</span>path被设置<span class=\"token punctuation\">)</span>\nhttptrace\t显示<span class=\"token constant\">HTTP</span>足迹，最近<span class=\"token number\">100</span>个<span class=\"token constant\">HTTP</span> request<span class=\"token operator\">/</span>repsponse\nenv\t显示当前的环境特性\nenv<span class=\"token operator\">/</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span>\t显示指定名称的环境信息，例如：http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>localhost<span class=\"token operator\">:</span><span class=\"token number\">8080</span><span class=\"token operator\">/</span>actuator<span class=\"token operator\">/</span>spring<span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">.</span>name\nflyway\t显示数据库迁移路径的详细信息\nliquidbase\t显示<span class=\"token class-name\">Liquibase</span> 数据库迁移的纤细信息\nshutdown\t让你逐步关闭应用\nmappings\t显示所有的<span class=\"token annotation punctuation\">@RequestMapping</span>路径\nscheduledtasks\t显示应用中的调度任务\nthreaddump\t执行一个线程dump\nheapdump\t返回一个<span class=\"token class-name\">GZip</span>压缩的<span class=\"token constant\">JVM</span>堆dump\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.88,"words":265},"y":"a","t":"SpringCloud运维接口"},["/posts/spring/SpringCloud运维接口.html","/posts/spring/SpringCloud%E8%BF%90%E7%BB%B4%E6%8E%A5%E5%8F%A3","/posts/spring/SpringCloud运维接口.md","/posts/spring/SpringCloud%E8%BF%90%E7%BB%B4%E6%8E%A5%E5%8F%A3.md"]],
  ["v-7cc91ae3","/posts/spring/SpringMVC%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8.html",{"a":"ztq","d":1681739220000,"l":"2023年4月17日","c":["spring"],"g":["SpringMVC"],"e":"<h1> 一、引言</h1>\n<p>SpringBoot工程中对Controller配置全局异常处理。有些接口在发生异常时，如何对不同类型的接口使用不同的全局异常进行处理呢？\nSpring提供了对@ControllerAdvice注解的配置，我们可以通过配置@ControllerAdvice对指定的Exception拦截。</p>\n<h1> 二、@ControllerAdvice注解使用方法</h1>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// 第一种</span>\n<span class=\"token annotation punctuation\">@RestControllerAdvice</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GlobalExceptionHandler</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 第二种</span>\n<span class=\"token comment\">// basePackages 指定一个或多个包，这些包及其子包下的所有 Controller 都被该 @ControllerAdvice 管理。其中上面两种等价于 basePackages。</span>\n<span class=\"token comment\">// basePackages</span>\n<span class=\"token comment\">// @ControllerAdvice(\"cn.demo.controller\")</span>\n<span class=\"token comment\">// @ControllerAdvice(value = \"cn.demo.controller\")</span>\n<span class=\"token annotation punctuation\">@ControllerAdvice</span><span class=\"token punctuation\">(</span>basePackages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"cn.demo.controller\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GlobalExceptionHandler</span> \n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 第三种</span>\n<span class=\"token comment\">// basePackageClasses 指定一个或多个 Controller 类，这些类所属的包及其子包下的所有 Controller 都被该 @ControllerAdvice 管理。</span>\n<span class=\"token annotation punctuation\">@ControllerAdvice</span><span class=\"token punctuation\">(</span>basePackageClasses <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token class-name\">MyController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GlobalExceptionHandler</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 第四种</span>\n<span class=\"token comment\">// assignableTypes：指定一个或多个 Controller 类，这些类被该 @ControllerAdvice 管理。</span>\n<span class=\"token annotation punctuation\">@ControllerAdvice</span><span class=\"token punctuation\">(</span>assignableTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token class-name\">MyController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GlobalExceptionHandler</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 第五种</span>\n<span class=\"token comment\">// annotations：指定一个或多个注解，被这些注解所标记的 Controller 会被该 @ControllerAdvice 管理。</span>\n<span class=\"token annotation punctuation\">@ControllerAdvice</span><span class=\"token punctuation\">(</span>annotations <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token class-name\">RestController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GlobalExceptionHandler</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.81,"words":542},"y":"a","t":"SpringMVC全局异常处理器"},["/posts/spring/SpringMVC全局异常处理器.html","/posts/spring/SpringMVC%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8","/posts/spring/SpringMVC全局异常处理器.md","/posts/spring/SpringMVC%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8.md"]],
  ["v-9d6f2886","/posts/spring/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1-springcloud-nacos-seata.html",{"a":"ztq","d":1661945700000,"l":"2022年8月31日","c":["分布式"],"g":["mysql","分布式事务"],"e":"<h1> 一、Seata 是什么</h1>\n<p>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。\n<a href=\"https://seata.io/zh-cn/docs/overview/what-is-seata.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://seata.io/zh-cn/docs/overview/what-is-seata.html</a></p>\n<h1> 二、事务模式</h1>","r":{"minutes":2.49,"words":746},"y":"a","t":"分布式事务-springcloud-nacos-seata"},["/posts/spring/分布式事务-springcloud-nacos-seata.html","/posts/spring/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1-springcloud-nacos-seata","/posts/spring/分布式事务-springcloud-nacos-seata.md","/posts/spring/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1-springcloud-nacos-seata.md"]],
  ["v-6c74d0a8","/posts/spring/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97springboot-kafka.html",{"a":"ztq","d":1666977480000,"l":"2022年10月29日","c":["分布式"],"g":["kafka"],"e":"<h1> 1、应用场景</h1>\n<p>同时为发布和订阅提供高吞吐量、消息持久化、分布式功能、支持数据并行加载到Hadoop中</p>\n<p>实际：\n1、发布系统通知：如评论、点赞、关注这些事件发生后，可以把这些操作放入到kafka消息队列中，如果用户量一大直接操作数据库，服务器压力顶不住。所以把这些通知先存入kafka中，然后一个个消费掉。\n2、一些项目数据同步问题也可以用到。\n3、监测数据：分布式应用程序生成的统计数据集中聚合。\n4、分布式：假设有系统B、C、D都需要系统A的数据\n5、事件采集：其中状态的变化根据时间的顺序记录下来，kafka支持这种非常大的存储日志数据的场景。\n如：日志收集、消息系统、活动追踪、运营指标、流式处理、热点点赞、评论、关注、发短信。</p>","r":{"minutes":8.5,"words":2550},"y":"a","t":"kafka架构设计"},["/posts/spring/消息队列springboot-kafka.html","/posts/spring/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97springboot-kafka","/posts/spring/消息队列springboot-kafka.md","/posts/spring/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97springboot-kafka.md"]],
  ["v-3706649a","/404.html",{"y":"p","t":""},["/404"]],
  ["v-5f688ebf","/posts/database/",{"y":"p","t":"Database"},["/posts/database/index.html"]],
  ["v-e1e3da16","/posts/",{"y":"p","t":"Posts"},["/posts/index.html"]],
  ["v-04ff44bd","/posts/DevOps/",{"y":"p","t":"Dev Ops"},["/posts/DevOps/index.html"]],
  ["v-f49eed3e","/posts/distributed/",{"y":"p","t":"Distributed"},["/posts/distributed/index.html"]],
  ["v-09041878","/posts/java/",{"y":"p","t":"Java"},["/posts/java/index.html"]],
  ["v-644641a6","/posts/spring/",{"y":"p","t":"Spring"},["/posts/spring/index.html"]],
  ["v-5bc93818","/category/",{"y":"p","t":"分类"},["/category/index.html"]],
  ["v-744d024e","/tag/",{"y":"p","t":"标签"},["/tag/index.html"]],
  ["v-e52c881c","/article/",{"y":"p","t":"文章"},["/article/index.html"]],
  ["v-154dc4c4","/star/",{"y":"p","t":"收藏"},["/star/index.html"]],
  ["v-01560935","/timeline/",{"y":"p","t":"时间轴"},["/timeline/index.html"]],
  ["v-feb0f36e","/category/%E5%A4%A7%E6%95%B0%E6%8D%AE/",{"y":"p","t":"大数据 分类"},["/category/大数据/","/category/%E5%A4%A7%E6%95%B0%E6%8D%AE/index.html"]],
  ["v-0da0bc33","/tag/es/",{"y":"p","t":"es 标签"},["/tag/es/index.html"]],
  ["v-1d5dcb17","/category//",{"y":"p","t":" 分类"},["/category//index.html"]],
  ["v-1ccbe29c","/tag/hadoop/",{"y":"p","t":"hadoop 标签"},["/tag/hadoop/index.html"]],
  ["v-5e0b61bd","/category/%E6%95%B0%E6%8D%AE%E5%BA%93/",{"y":"p","t":"数据库 分类"},["/category/数据库/","/category/%E6%95%B0%E6%8D%AE%E5%BA%93/index.html"]],
  ["v-2886ccf8","/tag/hdfs/",{"y":"p","t":"HDFS 标签"},["/tag/hdfs/index.html"]],
  ["v-5ff6b5a3","/category/%E7%BD%91%E7%BB%9C/",{"y":"p","t":"网络 分类"},["/category/网络/","/category/%E7%BD%91%E7%BB%9C/index.html"]],
  ["v-57d268b0","/category/cicd/",{"y":"p","t":"CICD 分类"},["/category/cicd/index.html"]],
  ["v-28894d31","/tag/hive/",{"y":"p","t":"hive 标签"},["/tag/hive/index.html"]],
  ["v-0ce25b6c","/category/%E5%88%86%E5%B8%83%E5%BC%8F/",{"y":"p","t":"分布式 分类"},["/category/分布式/","/category/%E5%88%86%E5%B8%83%E5%BC%8F/index.html"]],
  ["v-d7800d76","/tag/%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/",{"y":"p","t":"向量数据库 标签"},["/tag/向量数据库/","/tag/%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/index.html"]],
  ["v-116a43a7","/category/%E9%9D%A2%E8%AF%95/",{"y":"p","t":"面试 分类"},["/category/面试/","/category/%E9%9D%A2%E8%AF%95/index.html"]],
  ["v-3365d15d","/tag/milvus/",{"y":"p","t":"Milvus 标签"},["/tag/milvus/index.html"]],
  ["v-646b395d","/category/java%E5%9F%BA%E7%A1%80/",{"y":"p","t":"java基础 分类"},["/category/java基础/","/category/java%E5%9F%BA%E7%A1%80/index.html"]],
  ["v-219da821","/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/",{"y":"p","t":"分布式存储 标签"},["/tag/分布式存储/","/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/index.html"]],
  ["v-de9513a2","/category/%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86/",{"y":"p","t":"软件管理 分类"},["/category/软件管理/","/category/%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86/index.html"]],
  ["v-757f190a","/tag/mybatis/",{"y":"p","t":"mybatis 标签"},["/tag/mybatis/index.html"]],
  ["v-08073caa","/category/spring/",{"y":"p","t":"spring 分类"},["/category/spring/index.html"]],
  ["v-1bee38ca","/tag/mysql/",{"y":"p","t":"mysql 标签"},["/tag/mysql/index.html"]],
  ["v-4c40caa5","/category/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",{"y":"p","t":"操作系统 分类"},["/category/操作系统/","/category/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/index.html"]],
  ["v-0d1f4c3c","/tag/redis/",{"y":"p","t":"redis 标签"},["/tag/redis/index.html"]],
  ["v-3cb12e63","/category/%E5%8F%AF%E4%BF%A1/",{"y":"p","t":"可信 分类"},["/category/可信/","/category/%E5%8F%AF%E4%BF%A1/index.html"]],
  ["v-c2a67010","/tag/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/",{"y":"p","t":"分库分表 标签"},["/tag/分库分表/","/tag/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/index.html"]],
  ["v-41590e77","/category/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",{"y":"p","t":"设计模式 分类"},["/category/设计模式/","/category/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.html"]],
  ["v-b3136918","/tag/dns/",{"y":"p","t":"DNS 标签"},["/tag/dns/index.html"]],
  ["v-6106c001","/tag/docker/",{"y":"p","t":"docker 标签"},["/tag/docker/index.html"]],
  ["v-b30ea152","/tag/k8s/",{"y":"p","t":"k8s 标签"},["/tag/k8s/index.html"]],
  ["v-b312914e","/tag/elk/",{"y":"p","t":"elk 标签"},["/tag/elk/index.html"]],
  ["v-095ec223","/tag/%E8%BF%90%E7%BB%B4/",{"y":"p","t":"运维 标签"},["/tag/运维/","/tag/%E8%BF%90%E7%BB%B4/index.html"]],
  ["v-b314b42a","/tag/cap/",{"y":"p","t":"CAP 标签"},["/tag/cap/index.html"]],
  ["v-57e54ebc","/tag/%E5%88%86%E5%B8%83%E5%BC%8F/",{"y":"p","t":"分布式 标签"},["/tag/分布式/","/tag/%E5%88%86%E5%B8%83%E5%BC%8F/index.html"]],
  ["v-53c21136","/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/",{"y":"p","t":"分布式锁 标签"},["/tag/分布式锁/","/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/index.html"]],
  ["v-68cf5b32","/tag/java%E5%9F%BA%E7%A1%80/",{"y":"p","t":"java基础 标签"},["/tag/java基础/","/tag/java%E5%9F%BA%E7%A1%80/index.html"]],
  ["v-7fe7f4f0","/tag/bigdecimal/",{"y":"p","t":"BigDecimal 标签"},["/tag/bigdecimal/index.html"]],
  ["v-28a1d8bf","/tag/java/",{"y":"p","t":"java 标签"},["/tag/java/index.html"]],
  ["v-bad02376","/tag/disruptor/",{"y":"p","t":"Disruptor 标签"},["/tag/disruptor/index.html"]],
  ["v-03c3e647","/tag/getpost/",{"y":"p","t":"GET/POST 标签"},["/tag/getpost/index.html"]],
  ["v-b310d42a","/tag/git/",{"y":"p","t":"git 标签"},["/tag/git/index.html"]],
  ["v-a0d22de6","/tag/%E5%93%88%E5%B8%8C%E8%A1%A8/",{"y":"p","t":"哈希表 标签"},["/tag/哈希表/","/tag/%E5%93%88%E5%B8%8C%E8%A1%A8/index.html"]],
  ["v-f00115a4","/tag/httpclient/",{"y":"p","t":"httpclient 标签"},["/tag/httpclient/index.html"]],
  ["v-2d8ab71c","/tag/https/",{"y":"p","t":"https 标签"},["/tag/https/index.html"]],
  ["v-7d0ba9b4","/tag/spring/",{"y":"p","t":"spring 标签"},["/tag/spring/index.html"]],
  ["v-0da0cada","/tag/ip/",{"y":"p","t":"ip 标签"},["/tag/ip/index.html"]],
  ["v-237dd606","/tag/%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81/",{"y":"p","t":"子网掩码 标签"},["/tag/子网掩码/","/tag/%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81/index.html"]],
  ["v-8296fb0e","/tag/jdk1.8%E6%96%B0%E7%89%B9%E6%80%A7/",{"y":"p","t":"JDK1.8新特性 标签"},["/tag/jdk1.8新特性/","/tag/jdk1.8%E6%96%B0%E7%89%B9%E6%80%A7/index.html"]],
  ["v-1739311e","/tag/%E6%96%87%E4%BB%B6/",{"y":"p","t":"文件 标签"},["/tag/文件/","/tag/%E6%96%87%E4%BB%B6/index.html"]],
  ["v-b30dba08","/tag/jvm/",{"y":"p","t":"JVM 标签"},["/tag/jvm/index.html"]],
  ["v-323f2b96","/tag/springcloud/",{"y":"p","t":"SpringCloud 标签"},["/tag/springcloud/index.html"]],
  ["v-1e90405c","/tag/maven/",{"y":"p","t":"maven 标签"},["/tag/maven/index.html"]],
  ["v-3ae2f3c6","/tag/nacos-config/",{"y":"p","t":"nacos-config 标签"},["/tag/nacos-config/index.html"]],
  ["v-1ab7314a","/tag/netty/",{"y":"p","t":"Netty 标签"},["/tag/netty/index.html"]],
  ["v-1a8900ba","/tag/nginx/",{"y":"p","t":"nginx 标签"},["/tag/nginx/index.html"]],
  ["v-fdc35058","/tag/%E5%B9%B6%E5%8F%91/",{"y":"p","t":"并发 标签"},["/tag/并发/","/tag/%E5%B9%B6%E5%8F%91/index.html"]],
  ["v-721d1794","/tag/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/",{"y":"p","t":"线程安全 标签"},["/tag/线程安全/","/tag/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/index.html"]],
  ["v-08820e80","/tag/spark/",{"y":"p","t":"Spark 标签"},["/tag/spark/index.html"]],
  ["v-f841e7a0","/tag/string/",{"y":"p","t":"String 标签"},["/tag/string/index.html"]],
  ["v-5812b65a","/tag/stringbuilder/",{"y":"p","t":"StringBuilder 标签"},["/tag/stringbuilder/index.html"]],
  ["v-243989a0","/tag/stringbuffer/",{"y":"p","t":"StringBuffer 标签"},["/tag/stringbuffer/index.html"]],
  ["v-06795f96","/tag/tcpip/",{"y":"p","t":"TCP/IP 标签"},["/tag/tcpip/index.html"]],
  ["v-b3044048","/tag/udp/",{"y":"p","t":"UDP 标签"},["/tag/udp/index.html"]],
  ["v-a018a546","/tag/tomcat/",{"y":"p","t":"tomcat 标签"},["/tag/tomcat/index.html"]],
  ["v-62671174","/tag/%E9%94%81/",{"y":"p","t":"锁 标签"},["/tag/锁/","/tag/%E9%94%81/index.html"]],
  ["v-5a8f4c4a","/tag/%E4%BC%AA%E5%85%B1%E4%BA%AB/",{"y":"p","t":"伪共享 标签"},["/tag/伪共享/","/tag/%E4%BC%AA%E5%85%B1%E4%BA%AB/index.html"]],
  ["v-66985c6d","/tag/%E5%8F%AF%E4%BF%A1/",{"y":"p","t":"可信 标签"},["/tag/可信/","/tag/%E5%8F%AF%E4%BF%A1/index.html"]],
  ["v-682883ee","/tag/%E5%AF%86%E7%A0%81%E5%AD%A6/",{"y":"p","t":"密码学 标签"},["/tag/密码学/","/tag/%E5%AF%86%E7%A0%81%E5%AD%A6/index.html"]],
  ["v-05b88e01","/tag/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",{"y":"p","t":"设计模式 标签"},["/tag/设计模式/","/tag/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.html"]],
  ["v-3bfab240","/tag/%E5%8F%AF%E4%BF%A1%E8%AE%A1%E7%AE%97/",{"y":"p","t":"可信计算 标签"},["/tag/可信计算/","/tag/%E5%8F%AF%E4%BF%A1%E8%AE%A1%E7%AE%97/index.html"]],
  ["v-5e867010","/tag/%E5%8F%AF%E9%9D%A0/",{"y":"p","t":"可靠 标签"},["/tag/可靠/","/tag/%E5%8F%AF%E9%9D%A0/index.html"]],
  ["v-1c925f4b","/tag/%E5%AE%B9%E9%94%99/",{"y":"p","t":"容错 标签"},["/tag/容错/","/tag/%E5%AE%B9%E9%94%99/index.html"]],
  ["v-4be01f3a","/tag/javaagent/",{"y":"p","t":"javaagent 标签"},["/tag/javaagent/index.html"]],
  ["v-5fb02740","/tag/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/",{"y":"p","t":"内存模型 标签"},["/tag/内存模型/","/tag/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/index.html"]],
  ["v-13770b26","/tag/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",{"y":"p","t":"数据结构 标签"},["/tag/数据结构/","/tag/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.html"]],
  ["v-155347a1","/tag//",{"y":"p","t":" 标签"},["/tag//index.html"]],
  ["v-ae716344","/tag/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/",{"y":"p","t":"加密算法 标签"},["/tag/加密算法/","/tag/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/index.html"]],
  ["v-07d4d556","/tag/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/",{"y":"p","t":"文件上传 标签"},["/tag/文件上传/","/tag/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/index.html"]],
  ["v-415e2fc5","/tag/%E5%A4%9A%E7%BA%BF%E7%A8%8B/",{"y":"p","t":"多线程 标签"},["/tag/多线程/","/tag/%E5%A4%9A%E7%BA%BF%E7%A8%8B/index.html"]],
  ["v-0da0cabb","/tag/io/",{"y":"p","t":"IO 标签"},["/tag/io/index.html"]],
  ["v-50ada424","/tag/%E9%98%BB%E5%A1%9E%E4%B8%8E%E9%9D%9E%E9%98%BB%E5%A1%9E/",{"y":"p","t":"阻塞与非阻塞 标签"},["/tag/阻塞与非阻塞/","/tag/%E9%98%BB%E5%A1%9E%E4%B8%8E%E9%9D%9E%E9%98%BB%E5%A1%9E/index.html"]],
  ["v-5e043973","/tag/%E7%BA%BF%E7%A8%8B/",{"y":"p","t":"线程 标签"},["/tag/线程/","/tag/%E7%BA%BF%E7%A8%8B/index.html"]],
  ["v-390af19f","/tag/%E8%BE%BE%E6%A2%A6/",{"y":"p","t":"达梦 标签"},["/tag/达梦/","/tag/%E8%BE%BE%E6%A2%A6/index.html"]],
  ["v-483ad7b9","/tag/%E8%BF%90%E7%AE%97%E7%AC%A6/",{"y":"p","t":"运算符 标签"},["/tag/运算符/","/tag/%E8%BF%90%E7%AE%97%E7%AC%A6/index.html"]],
  ["v-67e27820","/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/",{"y":"p","t":"网络安全 标签"},["/tag/网络安全/","/tag/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/index.html"]],
  ["v-82dd5cfe","/tag/%E9%87%8D%E6%9E%84/",{"y":"p","t":"重构 标签"},["/tag/重构/","/tag/%E9%87%8D%E6%9E%84/index.html"]],
  ["v-4b1edce9","/tag/%E6%89%93%E5%8C%85/",{"y":"p","t":"打包 标签"},["/tag/打包/","/tag/%E6%89%93%E5%8C%85/index.html"]],
  ["v-9f510020","/tag/springmvc/",{"y":"p","t":"SpringMVC 标签"},["/tag/springmvc/index.html"]],
  ["v-4f468d65","/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/",{"y":"p","t":"分布式事务 标签"},["/tag/分布式事务/","/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/index.html"]],
  ["v-257204d2","/tag/kafka/",{"y":"p","t":"kafka 标签"},["/tag/kafka/index.html"]],
]
